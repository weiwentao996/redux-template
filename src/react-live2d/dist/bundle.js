/* eslint-disable */
// eslint-disable-next-line vue/no-setup-props-destructure
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"));
	else if(typeof define === 'function' && define.amd)
		define(["react"], factory);
	else if(typeof exports === 'object')
		exports["live2d"] = factory(require("react"));
	else
		root["live2d"] = factory(root["React"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_react__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./Framework/src/cubismdefaultparameterid.ts":
/*!***************************************************!*\
  !*** ./Framework/src/cubismdefaultparameterid.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    Live2DCubismFramework.HitAreaPrefix = 'HitArea';\r\n    Live2DCubismFramework.HitAreaHead = 'Head';\r\n    Live2DCubismFramework.HitAreaBody = 'Body';\r\n    Live2DCubismFramework.PartsIdCore = 'Parts01Core';\r\n    Live2DCubismFramework.PartsArmPrefix = 'Parts01Arm_';\r\n    Live2DCubismFramework.PartsArmLPrefix = 'Parts01ArmL_';\r\n    Live2DCubismFramework.PartsArmRPrefix = 'Parts01ArmR_';\r\n    Live2DCubismFramework.ParamAngleX = 'ParamAngleX';\r\n    Live2DCubismFramework.ParamAngleY = 'ParamAngleY';\r\n    Live2DCubismFramework.ParamAngleZ = 'ParamAngleZ';\r\n    Live2DCubismFramework.ParamEyeLOpen = 'ParamEyeLOpen';\r\n    Live2DCubismFramework.ParamEyeLSmile = 'ParamEyeLSmile';\r\n    Live2DCubismFramework.ParamEyeROpen = 'ParamEyeROpen';\r\n    Live2DCubismFramework.ParamEyeRSmile = 'ParamEyeRSmile';\r\n    Live2DCubismFramework.ParamEyeBallX = 'ParamEyeBallX';\r\n    Live2DCubismFramework.ParamEyeBallY = 'ParamEyeBallY';\r\n    Live2DCubismFramework.ParamEyeBallForm = 'ParamEyeBallForm';\r\n    Live2DCubismFramework.ParamBrowLY = 'ParamBrowLY';\r\n    Live2DCubismFramework.ParamBrowRY = 'ParamBrowRY';\r\n    Live2DCubismFramework.ParamBrowLX = 'ParamBrowLX';\r\n    Live2DCubismFramework.ParamBrowRX = 'ParamBrowRX';\r\n    Live2DCubismFramework.ParamBrowLAngle = 'ParamBrowLAngle';\r\n    Live2DCubismFramework.ParamBrowRAngle = 'ParamBrowRAngle';\r\n    Live2DCubismFramework.ParamBrowLForm = 'ParamBrowLForm';\r\n    Live2DCubismFramework.ParamBrowRForm = 'ParamBrowRForm';\r\n    Live2DCubismFramework.ParamMouthForm = 'ParamMouthForm';\r\n    Live2DCubismFramework.ParamMouthOpenY = 'ParamMouthOpenY';\r\n    Live2DCubismFramework.ParamCheek = 'ParamCheek';\r\n    Live2DCubismFramework.ParamBodyAngleX = 'ParamBodyAngleX';\r\n    Live2DCubismFramework.ParamBodyAngleY = 'ParamBodyAngleY';\r\n    Live2DCubismFramework.ParamBodyAngleZ = 'ParamBodyAngleZ';\r\n    Live2DCubismFramework.ParamBreath = 'ParamBreath';\r\n    Live2DCubismFramework.ParamArmLA = 'ParamArmLA';\r\n    Live2DCubismFramework.ParamArmRA = 'ParamArmRA';\r\n    Live2DCubismFramework.ParamArmLB = 'ParamArmLB';\r\n    Live2DCubismFramework.ParamArmRB = 'ParamArmRB';\r\n    Live2DCubismFramework.ParamHandL = 'ParamHandL';\r\n    Live2DCubismFramework.ParamHandR = 'ParamHandR';\r\n    Live2DCubismFramework.ParamHairFront = 'ParamHairFront';\r\n    Live2DCubismFramework.ParamHairSide = 'ParamHairSide';\r\n    Live2DCubismFramework.ParamHairBack = 'ParamHairBack';\r\n    Live2DCubismFramework.ParamHairFluffy = 'ParamHairFluffy';\r\n    Live2DCubismFramework.ParamShoulderY = 'ParamShoulderY';\r\n    Live2DCubismFramework.ParamBustX = 'ParamBustX';\r\n    Live2DCubismFramework.ParamBustY = 'ParamBustY';\r\n    Live2DCubismFramework.ParamBaseX = 'ParamBaseX';\r\n    Live2DCubismFramework.ParamBaseY = 'ParamBaseY';\r\n    Live2DCubismFramework.ParamNONE = 'NONE:';\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2N1YmlzbWRlZmF1bHRwYXJhbWV0ZXJpZC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvY3ViaXNtZGVmYXVsdHBhcmFtZXRlcmlkLnRzPzEyODciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG4vKipcclxuICogQGJyaWVmIOODkeODqeODoeODvOOCv0lE44Gu44OH44OV44Kp44Or44OI5YCk44KS5L+d5oyB44GZ44KL5a6a5pWwPGJyPlxyXG4gKiAgICAgICAgIOODh+ODleOCqeODq+ODiOWApOOBruS7leanmOOBr+S7peS4i+OBruODnuODi+ODpeOCouODq+OBq+WfuuOBpeOBjzxicj5cclxuICogICAgICAgICBodHRwczovL2RvY3MubGl2ZTJkLmNvbS9jdWJpc20tZWRpdG9yLW1hbnVhbC9zdGFuZGFyZC1wYXJhbWV0b3ItbGlzdC9cclxuICovXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICAvLyDjg5Hjg7zjg4RJRFxyXG4gIGV4cG9ydCBjb25zdCBIaXRBcmVhUHJlZml4ID0gJ0hpdEFyZWEnO1xyXG4gIGV4cG9ydCBjb25zdCBIaXRBcmVhSGVhZCA9ICdIZWFkJztcclxuICBleHBvcnQgY29uc3QgSGl0QXJlYUJvZHkgPSAnQm9keSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcnRzSWRDb3JlID0gJ1BhcnRzMDFDb3JlJztcclxuICBleHBvcnQgY29uc3QgUGFydHNBcm1QcmVmaXggPSAnUGFydHMwMUFybV8nO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJ0c0FybUxQcmVmaXggPSAnUGFydHMwMUFybUxfJztcclxuICBleHBvcnQgY29uc3QgUGFydHNBcm1SUHJlZml4ID0gJ1BhcnRzMDFBcm1SXyc7XHJcblxyXG4gIC8vIOODkeODqeODoeODvOOCv0lEXHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQW5nbGVYID0gJ1BhcmFtQW5nbGVYJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1BbmdsZVkgPSAnUGFyYW1BbmdsZVknO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUFuZ2xlWiA9ICdQYXJhbUFuZ2xlWic7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllTE9wZW4gPSAnUGFyYW1FeWVMT3Blbic7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtRXllTFNtaWxlID0gJ1BhcmFtRXllTFNtaWxlJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1FeWVST3BlbiA9ICdQYXJhbUV5ZVJPcGVuJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1FeWVSU21pbGUgPSAnUGFyYW1FeWVSU21pbGUnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxYID0gJ1BhcmFtRXllQmFsbFgnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxZID0gJ1BhcmFtRXllQmFsbFknO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUV5ZUJhbGxGb3JtID0gJ1BhcmFtRXllQmFsbEZvcm0nO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dMWSA9ICdQYXJhbUJyb3dMWSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd1JZID0gJ1BhcmFtQnJvd1JZJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TFggPSAnUGFyYW1Ccm93TFgnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSWCA9ICdQYXJhbUJyb3dSWCc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJvd0xBbmdsZSA9ICdQYXJhbUJyb3dMQW5nbGUnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSQW5nbGUgPSAnUGFyYW1Ccm93UkFuZ2xlJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Ccm93TEZvcm0gPSAnUGFyYW1Ccm93TEZvcm0nO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJyb3dSRm9ybSA9ICdQYXJhbUJyb3dSRm9ybSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtTW91dGhGb3JtID0gJ1BhcmFtTW91dGhGb3JtJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Nb3V0aE9wZW5ZID0gJ1BhcmFtTW91dGhPcGVuWSc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQ2hlZWsgPSAnUGFyYW1DaGVlayc7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQm9keUFuZ2xlWCA9ICdQYXJhbUJvZHlBbmdsZVgnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJvZHlBbmdsZVkgPSAnUGFyYW1Cb2R5QW5nbGVZJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Cb2R5QW5nbGVaID0gJ1BhcmFtQm9keUFuZ2xlWic7XHJcbiAgZXhwb3J0IGNvbnN0IFBhcmFtQnJlYXRoID0gJ1BhcmFtQnJlYXRoJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1MQSA9ICdQYXJhbUFybUxBJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1SQSA9ICdQYXJhbUFybVJBJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1MQiA9ICdQYXJhbUFybUxCJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1Bcm1SQiA9ICdQYXJhbUFybVJCJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1IYW5kTCA9ICdQYXJhbUhhbmRMJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1IYW5kUiA9ICdQYXJhbUhhbmRSJztcclxuICBleHBvcnQgY29uc3QgUGFyYW1IYWlyRnJvbnQgPSAnUGFyYW1IYWlyRnJvbnQnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJTaWRlID0gJ1BhcmFtSGFpclNpZGUnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJCYWNrID0gJ1BhcmFtSGFpckJhY2snO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUhhaXJGbHVmZnkgPSAnUGFyYW1IYWlyRmx1ZmZ5JztcclxuICBleHBvcnQgY29uc3QgUGFyYW1TaG91bGRlclkgPSAnUGFyYW1TaG91bGRlclknO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJ1c3RYID0gJ1BhcmFtQnVzdFgnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJ1c3RZID0gJ1BhcmFtQnVzdFknO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJhc2VYID0gJ1BhcmFtQmFzZVgnO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbUJhc2VZID0gJ1BhcmFtQmFzZVknO1xyXG4gIGV4cG9ydCBjb25zdCBQYXJhbU5PTkUgPSAnTk9ORTonO1xyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBWUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/cubismdefaultparameterid.ts\n");

/***/ }),

/***/ "./Framework/src/cubismframeworkconfig.ts":
/*!************************************************!*\
  !*** ./Framework/src/cubismframeworkconfig.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_OFF = exports.CSM_LOG_LEVEL_ERROR = exports.CSM_LOG_LEVEL_WARNING = exports.CSM_LOG_LEVEL_INFO = exports.CSM_LOG_LEVEL_DEBUG = exports.CSM_LOG_LEVEL_VERBOSE = void 0;\r\nexports.CSM_LOG_LEVEL_VERBOSE = 0;\r\nexports.CSM_LOG_LEVEL_DEBUG = 1;\r\nexports.CSM_LOG_LEVEL_INFO = 2;\r\nexports.CSM_LOG_LEVEL_WARNING = 3;\r\nexports.CSM_LOG_LEVEL_ERROR = 4;\r\nexports.CSM_LOG_LEVEL_OFF = 5;\r\nexports.CSM_LOG_LEVEL = exports.CSM_LOG_LEVEL_VERBOSE;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2N1YmlzbWZyYW1ld29ya2NvbmZpZy50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvY3ViaXNtZnJhbWV3b3JrY29uZmlnLnRzP2U4MGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vICDjg63jgrDlh7rlipvplqLmlbDjga7oqK3lrppcclxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuLy8tLS0tLS0tLS0tIOODreOCsOWHuuWKm+ODrOODmeODqyDpgbjmip7poIXnm64g5a6a576pIC0tLS0tLS0tLS1cclxuLy8g6Kmz57Sw44Ot44Kw5Ye65Yqb6Kit5a6aXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX1ZFUkJPU0UgPSAwO1xyXG4vLyDjg4fjg5Djg4PjgrDjg63jgrDlh7rlipvoqK3lrppcclxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfREVCVUcgPSAxO1xyXG4vLyBJbmZv44Ot44Kw5Ye65Yqb6Kit5a6aXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMX0lORk8gPSAyO1xyXG4vLyDorablkYrjg63jgrDlh7rlipvoqK3lrppcclxuZXhwb3J0IGNvbnN0IENTTV9MT0dfTEVWRUxfV0FSTklORyA9IDM7XHJcbi8vIOOCqOODqeODvOODreOCsOWHuuWKm+ioreWumlxyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9FUlJPUiA9IDQ7XHJcbi8vIOODreOCsOWHuuWKm+OCquODleioreWumlxyXG5leHBvcnQgY29uc3QgQ1NNX0xPR19MRVZFTF9PRkYgPSA1O1xyXG5cclxuLyoqXHJcbiAqIOODreOCsOWHuuWKm+ODrOODmeODq+ioreWumuOAglxyXG4gKlxyXG4gKiDlvLfliLbnmoTjgavjg63jgrDlh7rlipvjg6zjg5njg6vjgpLlpInjgYjjgovmmYLjgavlrprnvqnjgpLmnInlirnjgavjgZnjgovjgIJcclxuICogQ1NNX0xPR19MRVZFTF9WRVJCT1NFIO+9niBDU01fTE9HX0xFVkVMX09GRiDjgpLpgbjmip7jgZnjgovjgIJcclxuICovXHJcbmV4cG9ydCBjb25zdCBDU01fTE9HX0xFVkVMOiBudW1iZXIgPSBDU01fTE9HX0xFVkVMX1ZFUkJPU0U7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBYUE7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBUUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Framework/src/cubismframeworkconfig.ts\n");

/***/ }),

/***/ "./Framework/src/cubismmodelsettingjson.ts":
/*!*************************************************!*\
  !*** ./Framework/src/cubismmodelsettingjson.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ./live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar icubismmodelsetting_1 = __webpack_require__(/*! ./icubismmodelsetting */ \"./Framework/src/icubismmodelsetting.ts\");\r\nvar cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ./type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar ICubismModelSetting = icubismmodelsetting_1.Live2DCubismFramework.ICubismModelSetting;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Version = 'Version';\r\n    var FileReferences = 'FileReferences';\r\n    var Groups = 'Groups';\r\n    var Layout = 'Layout';\r\n    var HitAreas = 'HitAreas';\r\n    var Moc = 'Moc';\r\n    var Textures = 'Textures';\r\n    var Physics = 'Physics';\r\n    var Pose = 'Pose';\r\n    var Expressions = 'Expressions';\r\n    var Motions = 'Motions';\r\n    var UserData = 'UserData';\r\n    var Name = 'Name';\r\n    var FilePath = 'File';\r\n    var Id = 'Id';\r\n    var Ids = 'Ids';\r\n    var Target = 'Target';\r\n    var Idle = 'Idle';\r\n    var TapBody = 'TapBody';\r\n    var PinchIn = 'PinchIn';\r\n    var PinchOut = 'PinchOut';\r\n    var Shake = 'Shake';\r\n    var FlickHead = 'FlickHead';\r\n    var Parameter = 'Parameter';\r\n    var SoundPath = 'Sound';\r\n    var FadeInTime = 'FadeInTime';\r\n    var FadeOutTime = 'FadeOutTime';\r\n    var CenterX = 'CenterX';\r\n    var CenterY = 'CenterY';\r\n    var X = 'X';\r\n    var Y = 'Y';\r\n    var Width = 'Width';\r\n    var Height = 'Height';\r\n    var LipSync = 'LipSync';\r\n    var EyeBlink = 'EyeBlink';\r\n    var InitParameter = 'init_param';\r\n    var InitPartsVisible = 'init_parts_visible';\r\n    var Val = 'val';\r\n    var FrequestNode;\r\n    (function (FrequestNode) {\r\n        FrequestNode[FrequestNode[\"FrequestNode_Groups\"] = 0] = \"FrequestNode_Groups\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Moc\"] = 1] = \"FrequestNode_Moc\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Motions\"] = 2] = \"FrequestNode_Motions\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Expressions\"] = 3] = \"FrequestNode_Expressions\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Textures\"] = 4] = \"FrequestNode_Textures\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Physics\"] = 5] = \"FrequestNode_Physics\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_Pose\"] = 6] = \"FrequestNode_Pose\";\r\n        FrequestNode[FrequestNode[\"FrequestNode_HitAreas\"] = 7] = \"FrequestNode_HitAreas\";\r\n    })(FrequestNode || (FrequestNode = {}));\r\n    var CubismModelSettingJson = (function (_super) {\r\n        __extends(CubismModelSettingJson, _super);\r\n        function CubismModelSettingJson(buffer, size) {\r\n            var _this = _super.call(this) || this;\r\n            _this._json = CubismJson.create(buffer, size);\r\n            if (_this._json) {\r\n                _this._jsonValue = new csmVector();\r\n                _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(Groups));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Moc));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Motions));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Expressions));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Textures));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Physics));\r\n                _this._jsonValue.pushBack(_this._json\r\n                    .getRoot()\r\n                    .getValueByString(FileReferences)\r\n                    .getValueByString(Pose));\r\n                _this._jsonValue.pushBack(_this._json.getRoot().getValueByString(HitAreas));\r\n            }\r\n            return _this;\r\n        }\r\n        CubismModelSettingJson.prototype.release = function () {\r\n            CubismJson.delete(this._json);\r\n            this._jsonValue = null;\r\n        };\r\n        CubismModelSettingJson.prototype.GetJson = function () {\r\n            return this._json;\r\n        };\r\n        CubismModelSettingJson.prototype.getModelFileName = function () {\r\n            if (!this.isExistModelFile()) {\r\n                return '';\r\n            }\r\n            return this._jsonValue.at(FrequestNode.FrequestNode_Moc).getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getTextureCount = function () {\r\n            if (!this.isExistTextureFiles()) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue.at(FrequestNode.FrequestNode_Textures).getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getTextureDirectory = function () {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Textures)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getTextureFileName = function (index) {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Textures)\r\n                .getValueByIndex(index)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getHitAreasCount = function () {\r\n            if (!this.isExistHitAreas()) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue.at(FrequestNode.FrequestNode_HitAreas).getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getHitAreaId = function (index) {\r\n            return CubismFramework.getIdManager().getId(this._jsonValue\r\n                .at(FrequestNode.FrequestNode_HitAreas)\r\n                .getValueByIndex(index)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismModelSettingJson.prototype.getHitAreaName = function (index) {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_HitAreas)\r\n                .getValueByIndex(index)\r\n                .getValueByString(Name)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getPhysicsFileName = function () {\r\n            if (!this.isExistPhysicsFile()) {\r\n                return '';\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Physics)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getPoseFileName = function () {\r\n            if (!this.isExistPoseFile()) {\r\n                return '';\r\n            }\r\n            return this._jsonValue.at(FrequestNode.FrequestNode_Pose).getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getExpressionCount = function () {\r\n            if (!this.isExistExpressionFile()) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Expressions)\r\n                .getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getExpressionName = function (index) {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Expressions)\r\n                .getValueByIndex(index)\r\n                .getValueByString(Name)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getExpressionFileName = function (index) {\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Expressions)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FilePath)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionGroupCount = function () {\r\n            if (!this.isExistMotionGroups()) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getKeys()\r\n                .getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionGroupName = function (index) {\r\n            if (!this.isExistMotionGroups()) {\r\n                return null;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getKeys()\r\n                .at(index);\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionCount = function (groupName) {\r\n            if (!this.isExistMotionGroupName(groupName)) {\r\n                return 0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getSize();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionFileName = function (groupName, index) {\r\n            if (!this.isExistMotionGroupName(groupName)) {\r\n                return '';\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FilePath)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionSoundFileName = function (groupName, index) {\r\n            if (!this.isExistMotionSoundFile(groupName, index)) {\r\n                return '';\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(SoundPath)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionFadeInTimeValue = function (groupName, index) {\r\n            if (!this.isExistMotionFadeIn(groupName, index)) {\r\n                return -1.0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FadeInTime)\r\n                .toFloat();\r\n        };\r\n        CubismModelSettingJson.prototype.getMotionFadeOutTimeValue = function (groupName, index) {\r\n            if (!this.isExistMotionFadeOut(groupName, index)) {\r\n                return -1.0;\r\n            }\r\n            return this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FadeOutTime)\r\n                .toFloat();\r\n        };\r\n        CubismModelSettingJson.prototype.getUserDataFile = function () {\r\n            if (!this.isExistUserDataFile()) {\r\n                return '';\r\n            }\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(FileReferences)\r\n                .getValueByString(UserData)\r\n                .getRawString();\r\n        };\r\n        CubismModelSettingJson.prototype.getLayoutMap = function (outLayoutMap) {\r\n            var map = this._json\r\n                .getRoot()\r\n                .getValueByString(Layout)\r\n                .getMap();\r\n            if (map == null) {\r\n                return false;\r\n            }\r\n            var ret = false;\r\n            for (var ite = map.begin(); ite.notEqual(map.end()); ite.preIncrement()) {\r\n                outLayoutMap.setValue(ite.ptr().first, ite.ptr().second.toFloat());\r\n                ret = true;\r\n            }\r\n            return ret;\r\n        };\r\n        CubismModelSettingJson.prototype.getEyeBlinkParameterCount = function () {\r\n            if (!this.isExistEyeBlinkParameters()) {\r\n                return 0;\r\n            }\r\n            var num = 0;\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\r\n                var refI = this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i);\r\n                if (refI.isNull() || refI.isError()) {\r\n                    continue;\r\n                }\r\n                if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n                    num = refI\r\n                        .getValueByString(Ids)\r\n                        .getVector()\r\n                        .getSize();\r\n                    break;\r\n                }\r\n            }\r\n            return num;\r\n        };\r\n        CubismModelSettingJson.prototype.getEyeBlinkParameterId = function (index) {\r\n            if (!this.isExistEyeBlinkParameters()) {\r\n                return null;\r\n            }\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\r\n                var refI = this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i);\r\n                if (refI.isNull() || refI.isError()) {\r\n                    continue;\r\n                }\r\n                if (refI.getValueByString(Name).getRawString() == EyeBlink) {\r\n                    return CubismFramework.getIdManager().getId(refI\r\n                        .getValueByString(Ids)\r\n                        .getValueByIndex(index)\r\n                        .getRawString());\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        CubismModelSettingJson.prototype.getLipSyncParameterCount = function () {\r\n            if (!this.isExistLipSyncParameters()) {\r\n                return 0;\r\n            }\r\n            var num = 0;\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\r\n                var refI = this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i);\r\n                if (refI.isNull() || refI.isError()) {\r\n                    continue;\r\n                }\r\n                if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n                    num = refI\r\n                        .getValueByString(Ids)\r\n                        .getVector()\r\n                        .getSize();\r\n                    break;\r\n                }\r\n            }\r\n            return num;\r\n        };\r\n        CubismModelSettingJson.prototype.getLipSyncParameterId = function (index) {\r\n            if (!this.isExistLipSyncParameters()) {\r\n                return null;\r\n            }\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); i++) {\r\n                var refI = this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i);\r\n                if (refI.isNull() || refI.isError()) {\r\n                    continue;\r\n                }\r\n                if (refI.getValueByString(Name).getRawString() == LipSync) {\r\n                    return CubismFramework.getIdManager().getId(refI\r\n                        .getValueByString(Ids)\r\n                        .getValueByIndex(index)\r\n                        .getRawString());\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        CubismModelSettingJson.prototype.isExistModelFile = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Moc);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistTextureFiles = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Textures);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistHitAreas = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_HitAreas);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistPhysicsFile = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Physics);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistPoseFile = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Pose);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistExpressionFile = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Expressions);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionGroups = function () {\r\n            var node = this._jsonValue.at(FrequestNode.FrequestNode_Motions);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionGroupName = function (groupName) {\r\n            var node = this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionSoundFile = function (groupName, index) {\r\n            var node = this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(SoundPath);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionFadeIn = function (groupName, index) {\r\n            var node = this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FadeInTime);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistMotionFadeOut = function (groupName, index) {\r\n            var node = this._jsonValue\r\n                .at(FrequestNode.FrequestNode_Motions)\r\n                .getValueByString(groupName)\r\n                .getValueByIndex(index)\r\n                .getValueByString(FadeOutTime);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistUserDataFile = function () {\r\n            var node = this._json\r\n                .getRoot()\r\n                .getValueByString(FileReferences)\r\n                .getValueByString(UserData);\r\n            return !node.isNull() && !node.isError();\r\n        };\r\n        CubismModelSettingJson.prototype.isExistEyeBlinkParameters = function () {\r\n            if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n                this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\r\n                if (this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i)\r\n                    .getValueByString(Name)\r\n                    .getRawString() == EyeBlink) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        CubismModelSettingJson.prototype.isExistLipSyncParameters = function () {\r\n            if (this._jsonValue.at(FrequestNode.FrequestNode_Groups).isNull() ||\r\n                this._jsonValue.at(FrequestNode.FrequestNode_Groups).isError()) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < this._jsonValue.at(FrequestNode.FrequestNode_Groups).getSize(); ++i) {\r\n                if (this._jsonValue\r\n                    .at(FrequestNode.FrequestNode_Groups)\r\n                    .getValueByIndex(i)\r\n                    .getValueByString(Name)\r\n                    .getRawString() == LipSync) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        return CubismModelSettingJson;\r\n    }(ICubismModelSetting));\r\n    Live2DCubismFramework.CubismModelSettingJson = CubismModelSettingJson;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/cubismmodelsettingjson.ts\n");

/***/ }),

/***/ "./Framework/src/effect/cubismbreath.ts":
/*!**********************************************!*\
  !*** ./Framework/src/effect/cubismbreath.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismBreath = (function () {\r\n        function CubismBreath() {\r\n            this._currentTime = 0.0;\r\n        }\r\n        CubismBreath.create = function () {\r\n            return new CubismBreath();\r\n        };\r\n        CubismBreath.delete = function (instance) {\r\n            if (instance != null) {\r\n                instance = null;\r\n            }\r\n        };\r\n        CubismBreath.prototype.setParameters = function (breathParameters) {\r\n            this._breathParameters = breathParameters;\r\n        };\r\n        CubismBreath.prototype.getParameters = function () {\r\n            return this._breathParameters;\r\n        };\r\n        CubismBreath.prototype.updateParameters = function (model, deltaTimeSeconds) {\r\n            this._currentTime += deltaTimeSeconds;\r\n            var t = this._currentTime * 2.0 * 3.14159;\r\n            for (var i = 0; i < this._breathParameters.getSize(); ++i) {\r\n                var data = this._breathParameters.at(i);\r\n                model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);\r\n            }\r\n        };\r\n        return CubismBreath;\r\n    }());\r\n    Live2DCubismFramework.CubismBreath = CubismBreath;\r\n    var BreathParameterData = (function () {\r\n        function BreathParameterData(parameterId, offset, peak, cycle, weight) {\r\n            this.parameterId = parameterId == undefined ? null : parameterId;\r\n            this.offset = offset == undefined ? 0.0 : offset;\r\n            this.peak = peak == undefined ? 0.0 : peak;\r\n            this.cycle = cycle == undefined ? 0.0 : cycle;\r\n            this.weight = weight == undefined ? 0.0 : weight;\r\n        }\r\n        return BreathParameterData;\r\n    }());\r\n    Live2DCubismFramework.BreathParameterData = BreathParameterData;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21icmVhdGgudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL2VmZmVjdC9jdWJpc21icmVhdGgudHM/YWRiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbCB9IGZyb20gJy4uL21vZGVsL2N1YmlzbW1vZGVsJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XHJcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIOWRvOWQuOapn+iDvVxyXG4gICAqXHJcbiAgICog5ZG85ZC45qmf6IO944KS5o+Q5L6b44GZ44KL44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbUJyZWF0aCB7XHJcbiAgICAvKipcclxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSgpOiBDdWJpc21CcmVhdGgge1xyXG4gICAgICByZXR1cm4gbmV3IEN1YmlzbUJyZWF0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Kk44Oz44K544K/44Oz44K544Gu56C05qOEXHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2Ug5a++6LGh44GuQ3ViaXNtQnJlYXRoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKGluc3RhbmNlOiBDdWJpc21CcmVhdGgpOiB2b2lkIHtcclxuICAgICAgaWYgKGluc3RhbmNlICE9IG51bGwpIHtcclxuICAgICAgICBpbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWRvOWQuOOBruODkeODqeODoeODvOOCv+OBrue0kOOBpeOBkVxyXG4gICAgICogQHBhcmFtIGJyZWF0aFBhcmFtZXRlcnMg5ZG85ZC444KS57SQ44Gl44GR44Gf44GE44OR44Op44Oh44O844K/44Gu44Oq44K544OIXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRQYXJhbWV0ZXJzKFxyXG4gICAgICBicmVhdGhQYXJhbWV0ZXJzOiBjc21WZWN0b3I8QnJlYXRoUGFyYW1ldGVyRGF0YT5cclxuICAgICk6IHZvaWQge1xyXG4gICAgICB0aGlzLl9icmVhdGhQYXJhbWV0ZXJzID0gYnJlYXRoUGFyYW1ldGVycztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWRvOWQuOOBq+e0kOOBpeOBhOOBpuOBhOOCi+ODkeODqeODoeODvOOCv+OBruWPluW+l1xyXG4gICAgICogQHJldHVybiDlkbzlkLjjgavntJDjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFBhcmFtZXRlcnMoKTogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+IHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2JyZWF0aFBhcmFtZXRlcnM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/jga7mm7TmlrBcclxuICAgICAqIEBwYXJhbSBtb2RlbCDlr77osaHjga7jg6Ljg4fjg6tcclxuICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzIOODh+ODq+OCv+aZgumWk1vnp5JdXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVQYXJhbWV0ZXJzKFxyXG4gICAgICBtb2RlbDogQ3ViaXNtTW9kZWwsXHJcbiAgICAgIGRlbHRhVGltZVNlY29uZHM6IG51bWJlclxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX2N1cnJlbnRUaW1lICs9IGRlbHRhVGltZVNlY29uZHM7XHJcblxyXG4gICAgICBjb25zdCB0OiBudW1iZXIgPSB0aGlzLl9jdXJyZW50VGltZSAqIDIuMCAqIDMuMTQxNTk7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2JyZWF0aFBhcmFtZXRlcnMuZ2V0U2l6ZSgpOyArK2kpIHtcclxuICAgICAgICBjb25zdCBkYXRhOiBCcmVhdGhQYXJhbWV0ZXJEYXRhID0gdGhpcy5fYnJlYXRoUGFyYW1ldGVycy5hdChpKTtcclxuXHJcbiAgICAgICAgbW9kZWwuYWRkUGFyYW1ldGVyVmFsdWVCeUlkKFxyXG4gICAgICAgICAgZGF0YS5wYXJhbWV0ZXJJZCxcclxuICAgICAgICAgIGRhdGEub2Zmc2V0ICsgZGF0YS5wZWFrICogTWF0aC5zaW4odCAvIGRhdGEuY3ljbGUpLFxyXG4gICAgICAgICAgZGF0YS53ZWlnaHRcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLl9jdXJyZW50VGltZSA9IDAuMDtcclxuICAgIH1cclxuXHJcbiAgICBfYnJlYXRoUGFyYW1ldGVyczogY3NtVmVjdG9yPEJyZWF0aFBhcmFtZXRlckRhdGE+OyAvLyDlkbzlkLjjgavjgbLjgoLjgaXjgYTjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr/jga7jg6rjgrnjg4hcclxuICAgIF9jdXJyZW50VGltZTogbnVtYmVyOyAvLyDnqY3nrpfmmYLplpNb56eSXVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5ZG85ZC444Gu44OR44Op44Oh44O844K/5oOF5aCxXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEJyZWF0aFBhcmFtZXRlckRhdGEge1xyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJJZCAgIOWRvOWQuOOCkuOBsuOCguOBpeOBkeOCi+ODkeODqeODoeODvOOCv0lEXHJcbiAgICAgKiBAcGFyYW0gb2Zmc2V0ICAgICAgICDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7jgqrjg5Xjgrvjg4Pjg4hcclxuICAgICAqIEBwYXJhbSBwZWFrICAgICAgICAgIOWRvOWQuOOCkuato+W8puazouOBqOOBl+OBn+OBqOOBjeOBruOAgeazouOBrumrmOOBlVxyXG4gICAgICogQHBhcmFtIGN5Y2xlICAgICAgICAg5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu5ZGo5pyfXHJcbiAgICAgKiBAcGFyYW0gd2VpZ2h0ICAgICAgICDjg5Hjg6njg6Hjg7zjgr/jgbjjga7ph43jgb9cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgIHBhcmFtZXRlcklkPzogQ3ViaXNtSWRIYW5kbGUsXHJcbiAgICAgIG9mZnNldD86IG51bWJlcixcclxuICAgICAgcGVhaz86IG51bWJlcixcclxuICAgICAgY3ljbGU/OiBudW1iZXIsXHJcbiAgICAgIHdlaWdodD86IG51bWJlclxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMucGFyYW1ldGVySWQgPSBwYXJhbWV0ZXJJZCA9PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1ldGVySWQ7XHJcbiAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0ID09IHVuZGVmaW5lZCA/IDAuMCA6IG9mZnNldDtcclxuICAgICAgdGhpcy5wZWFrID0gcGVhayA9PSB1bmRlZmluZWQgPyAwLjAgOiBwZWFrO1xyXG4gICAgICB0aGlzLmN5Y2xlID0gY3ljbGUgPT0gdW5kZWZpbmVkID8gMC4wIDogY3ljbGU7XHJcbiAgICAgIHRoaXMud2VpZ2h0ID0gd2VpZ2h0ID09IHVuZGVmaW5lZCA/IDAuMCA6IHdlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBwYXJhbWV0ZXJJZDogQ3ViaXNtSWRIYW5kbGU7IC8vIOWRvOWQuOOCkuOBsuOCguOBpeOBkeOCi+ODkeODqeODoeODvOOCv0lEXFxcclxuICAgIG9mZnNldDogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7jgqrjg5Xjgrvjg4Pjg4hcclxuICAgIHBlYWs6IG51bWJlcjsgLy8g5ZG85ZC444KS5q2j5bym5rOi44Go44GX44Gf44Go44GN44Gu44CB5rOi44Gu6auY44GVXHJcbiAgICBjeWNsZTogbnVtYmVyOyAvLyDlkbzlkLjjgpLmraPlvKbms6LjgajjgZfjgZ/jgajjgY3jga7jgIHms6Ljga7lkajmnJ9cclxuICAgIHdlaWdodDogbnVtYmVyOyAvLyDjg5Hjg6njg6Hjg7zjgr/jgbjjga7ph43jgb9cclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7QUFjQTtBQUFBO0FBTUE7QUErREE7QUFDQTtBQUNBO0FBN0RBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUdBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFPQTtBQUlBO0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBV0E7QUFBQTtBQXJFQTtBQTBFQTtBQVNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFBQTtBQTVCQTtBQTZCQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Framework/src/effect/cubismbreath.ts\n");

/***/ }),

/***/ "./Framework/src/effect/cubismeyeblink.ts":
/*!************************************************!*\
  !*** ./Framework/src/effect/cubismeyeblink.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismEyeBlink = (function () {\r\n        function CubismEyeBlink(modelSetting) {\r\n            this._blinkingState = EyeState.EyeState_First;\r\n            this._nextBlinkingTime = 0.0;\r\n            this._stateStartTimeSeconds = 0.0;\r\n            this._blinkingIntervalSeconds = 4.0;\r\n            this._closingSeconds = 0.1;\r\n            this._closedSeconds = 0.05;\r\n            this._openingSeconds = 0.15;\r\n            this._userTimeSeconds = 0.0;\r\n            this._parameterIds = new csmVector();\r\n            if (modelSetting == null) {\r\n                return;\r\n            }\r\n            for (var i = 0; i < modelSetting.getEyeBlinkParameterCount(); ++i) {\r\n                this._parameterIds.pushBack(modelSetting.getEyeBlinkParameterId(i));\r\n            }\r\n        }\r\n        CubismEyeBlink.create = function (modelSetting) {\r\n            if (modelSetting === void 0) { modelSetting = null; }\r\n            return new CubismEyeBlink(modelSetting);\r\n        };\r\n        CubismEyeBlink.delete = function (eyeBlink) {\r\n            if (eyeBlink != null) {\r\n                eyeBlink = null;\r\n            }\r\n        };\r\n        CubismEyeBlink.prototype.setBlinkingInterval = function (blinkingInterval) {\r\n            this._blinkingIntervalSeconds = blinkingInterval;\r\n        };\r\n        CubismEyeBlink.prototype.setBlinkingSetting = function (closing, closed, opening) {\r\n            this._closingSeconds = closing;\r\n            this._closedSeconds = closed;\r\n            this._openingSeconds = opening;\r\n        };\r\n        CubismEyeBlink.prototype.setParameterIds = function (parameterIds) {\r\n            this._parameterIds = parameterIds;\r\n        };\r\n        CubismEyeBlink.prototype.getParameterIds = function () {\r\n            return this._parameterIds;\r\n        };\r\n        CubismEyeBlink.prototype.updateParameters = function (model, deltaTimeSeconds) {\r\n            this._userTimeSeconds += deltaTimeSeconds;\r\n            var parameterValue;\r\n            var t = 0.0;\r\n            switch (this._blinkingState) {\r\n                case EyeState.EyeState_Closing:\r\n                    t =\r\n                        (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n                            this._closingSeconds;\r\n                    if (t >= 1.0) {\r\n                        t = 1.0;\r\n                        this._blinkingState = EyeState.EyeState_Closed;\r\n                        this._stateStartTimeSeconds = this._userTimeSeconds;\r\n                    }\r\n                    parameterValue = 1.0 - t;\r\n                    break;\r\n                case EyeState.EyeState_Closed:\r\n                    t =\r\n                        (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n                            this._closedSeconds;\r\n                    if (t >= 1.0) {\r\n                        this._blinkingState = EyeState.EyeState_Opening;\r\n                        this._stateStartTimeSeconds = this._userTimeSeconds;\r\n                    }\r\n                    parameterValue = 0.0;\r\n                    break;\r\n                case EyeState.EyeState_Opening:\r\n                    t =\r\n                        (this._userTimeSeconds - this._stateStartTimeSeconds) /\r\n                            this._openingSeconds;\r\n                    if (t >= 1.0) {\r\n                        t = 1.0;\r\n                        this._blinkingState = EyeState.EyeState_Interval;\r\n                        this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n                    }\r\n                    parameterValue = t;\r\n                    break;\r\n                case EyeState.EyeState_Interval:\r\n                    if (this._nextBlinkingTime < this._userTimeSeconds) {\r\n                        this._blinkingState = EyeState.EyeState_Closing;\r\n                        this._stateStartTimeSeconds = this._userTimeSeconds;\r\n                    }\r\n                    parameterValue = 1.0;\r\n                    break;\r\n                case EyeState.EyeState_First:\r\n                default:\r\n                    this._blinkingState = EyeState.EyeState_Interval;\r\n                    this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n                    parameterValue = 1.0;\r\n                    break;\r\n            }\r\n            if (!CubismEyeBlink.CloseIfZero) {\r\n                parameterValue = -parameterValue;\r\n            }\r\n            for (var i = 0; i < this._parameterIds.getSize(); ++i) {\r\n                model.setParameterValueById(this._parameterIds.at(i), parameterValue);\r\n            }\r\n        };\r\n        CubismEyeBlink.prototype.determinNextBlinkingTiming = function () {\r\n            var r = Math.random();\r\n            return (this._userTimeSeconds + r * (2.0 * this._blinkingIntervalSeconds - 1.0));\r\n        };\r\n        CubismEyeBlink.CloseIfZero = true;\r\n        return CubismEyeBlink;\r\n    }());\r\n    Live2DCubismFramework.CubismEyeBlink = CubismEyeBlink;\r\n    var EyeState;\r\n    (function (EyeState) {\r\n        EyeState[EyeState[\"EyeState_First\"] = 0] = \"EyeState_First\";\r\n        EyeState[EyeState[\"EyeState_Interval\"] = 1] = \"EyeState_Interval\";\r\n        EyeState[EyeState[\"EyeState_Closing\"] = 2] = \"EyeState_Closing\";\r\n        EyeState[EyeState[\"EyeState_Closed\"] = 3] = \"EyeState_Closed\";\r\n        EyeState[EyeState[\"EyeState_Opening\"] = 4] = \"EyeState_Opening\";\r\n    })(EyeState = Live2DCubismFramework.EyeState || (Live2DCubismFramework.EyeState = {}));\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/effect/cubismeyeblink.ts\n");

/***/ }),

/***/ "./Framework/src/effect/cubismpose.ts":
/*!********************************************!*\
  !*** ./Framework/src/effect/cubismpose.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Epsilon = 0.001;\r\n    var DefaultFadeInSeconds = 0.5;\r\n    var FadeIn = 'FadeInTime';\r\n    var Link = 'Link';\r\n    var Groups = 'Groups';\r\n    var Id = 'Id';\r\n    var CubismPose = (function () {\r\n        function CubismPose() {\r\n            this._fadeTimeSeconds = DefaultFadeInSeconds;\r\n            this._lastModel = null;\r\n            this._partGroups = new csmVector();\r\n            this._partGroupCounts = new csmVector();\r\n        }\r\n        CubismPose.create = function (pose3json, size) {\r\n            var ret = new CubismPose();\r\n            var json = CubismJson.create(pose3json, size);\r\n            var root = json.getRoot();\r\n            if (!root.getValueByString(FadeIn).isNull()) {\r\n                ret._fadeTimeSeconds = root\r\n                    .getValueByString(FadeIn)\r\n                    .toFloat(DefaultFadeInSeconds);\r\n                if (ret._fadeTimeSeconds <= 0.0) {\r\n                    ret._fadeTimeSeconds = DefaultFadeInSeconds;\r\n                }\r\n            }\r\n            var poseListInfo = root.getValueByString(Groups);\r\n            var poseCount = poseListInfo.getSize();\r\n            for (var poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\r\n                var idListInfo = poseListInfo.getValueByIndex(poseIndex);\r\n                var idCount = idListInfo.getSize();\r\n                var groupCount = 0;\r\n                for (var groupIndex = 0; groupIndex < idCount; ++groupIndex) {\r\n                    var partInfo = idListInfo.getValueByIndex(groupIndex);\r\n                    var partData = new PartData();\r\n                    var parameterId = CubismFramework.getIdManager().getId(partInfo.getValueByString(Id).getRawString());\r\n                    partData.partId = parameterId;\r\n                    if (!partInfo.getValueByString(Link).isNull()) {\r\n                        var linkListInfo = partInfo.getValueByString(Link);\r\n                        var linkCount = linkListInfo.getSize();\r\n                        for (var linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\r\n                            var linkPart = new PartData();\r\n                            var linkId = CubismFramework.getIdManager().getId(linkListInfo.getValueByIndex(linkIndex).getString());\r\n                            linkPart.partId = linkId;\r\n                            partData.link.pushBack(linkPart);\r\n                        }\r\n                    }\r\n                    ret._partGroups.pushBack(partData.clone());\r\n                    ++groupCount;\r\n                }\r\n                ret._partGroupCounts.pushBack(groupCount);\r\n            }\r\n            CubismJson.delete(json);\r\n            return ret;\r\n        };\r\n        CubismPose.delete = function (pose) {\r\n            if (pose != null) {\r\n                pose = null;\r\n            }\r\n        };\r\n        CubismPose.prototype.updateParameters = function (model, deltaTimeSeconds) {\r\n            if (model != this._lastModel) {\r\n                this.reset(model);\r\n            }\r\n            this._lastModel = model;\r\n            if (deltaTimeSeconds < 0.0) {\r\n                deltaTimeSeconds = 0.0;\r\n            }\r\n            var beginIndex = 0;\r\n            for (var i = 0; i < this._partGroupCounts.getSize(); i++) {\r\n                var partGroupCount = this._partGroupCounts.at(i);\r\n                this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\r\n                beginIndex += partGroupCount;\r\n            }\r\n            this.copyPartOpacities(model);\r\n        };\r\n        CubismPose.prototype.reset = function (model) {\r\n            var beginIndex = 0;\r\n            for (var i = 0; i < this._partGroupCounts.getSize(); ++i) {\r\n                var groupCount = this._partGroupCounts.at(i);\r\n                for (var j = beginIndex; j < beginIndex + groupCount; ++j) {\r\n                    this._partGroups.at(j).initialize(model);\r\n                    var partsIndex = this._partGroups.at(j).partIndex;\r\n                    var paramIndex = this._partGroups.at(j).parameterIndex;\r\n                    if (partsIndex < 0) {\r\n                        continue;\r\n                    }\r\n                    model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1.0 : 0.0);\r\n                    model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1.0 : 0.0);\r\n                    for (var k = 0; k < this._partGroups.at(j).link.getSize(); ++k) {\r\n                        this._partGroups\r\n                            .at(j)\r\n                            .link.at(k)\r\n                            .initialize(model);\r\n                    }\r\n                }\r\n                beginIndex += groupCount;\r\n            }\r\n        };\r\n        CubismPose.prototype.copyPartOpacities = function (model) {\r\n            for (var groupIndex = 0; groupIndex < this._partGroups.getSize(); ++groupIndex) {\r\n                var partData = this._partGroups.at(groupIndex);\r\n                if (partData.link.getSize() == 0) {\r\n                    continue;\r\n                }\r\n                var partIndex = this._partGroups.at(groupIndex).partIndex;\r\n                var opacity = model.getPartOpacityByIndex(partIndex);\r\n                for (var linkIndex = 0; linkIndex < partData.link.getSize(); ++linkIndex) {\r\n                    var linkPart = partData.link.at(linkIndex);\r\n                    var linkPartIndex = linkPart.partIndex;\r\n                    if (linkPartIndex < 0) {\r\n                        continue;\r\n                    }\r\n                    model.setPartOpacityByIndex(linkPartIndex, opacity);\r\n                }\r\n            }\r\n        };\r\n        CubismPose.prototype.doFade = function (model, deltaTimeSeconds, beginIndex, partGroupCount) {\r\n            var visiblePartIndex = -1;\r\n            var newOpacity = 1.0;\r\n            var phi = 0.5;\r\n            var backOpacityThreshold = 0.15;\r\n            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n                var partIndex = this._partGroups.at(i).partIndex;\r\n                var paramIndex = this._partGroups.at(i).parameterIndex;\r\n                if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\r\n                    if (visiblePartIndex >= 0) {\r\n                        break;\r\n                    }\r\n                    visiblePartIndex = i;\r\n                    newOpacity = model.getPartOpacityByIndex(partIndex);\r\n                    newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\r\n                    if (newOpacity > 1.0) {\r\n                        newOpacity = 1.0;\r\n                    }\r\n                }\r\n            }\r\n            if (visiblePartIndex < 0) {\r\n                visiblePartIndex = 0;\r\n                newOpacity = 1.0;\r\n            }\r\n            for (var i = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n                var partsIndex = this._partGroups.at(i).partIndex;\r\n                if (visiblePartIndex == i) {\r\n                    model.setPartOpacityByIndex(partsIndex, newOpacity);\r\n                }\r\n                else {\r\n                    var opacity = model.getPartOpacityByIndex(partsIndex);\r\n                    var a1 = void 0;\r\n                    if (newOpacity < phi) {\r\n                        a1 = (newOpacity * (phi - 1)) / phi + 1.0;\r\n                    }\r\n                    else {\r\n                        a1 = ((1 - newOpacity) * phi) / (1.0 - phi);\r\n                    }\r\n                    var backOpacity = (1.0 - a1) * (1.0 - newOpacity);\r\n                    if (backOpacity > backOpacityThreshold) {\r\n                        a1 = 1.0 - backOpacityThreshold / (1.0 - newOpacity);\r\n                    }\r\n                    if (opacity > a1) {\r\n                        opacity = a1;\r\n                    }\r\n                    model.setPartOpacityByIndex(partsIndex, opacity);\r\n                }\r\n            }\r\n        };\r\n        return CubismPose;\r\n    }());\r\n    Live2DCubismFramework.CubismPose = CubismPose;\r\n    var PartData = (function () {\r\n        function PartData(v) {\r\n            this.parameterIndex = 0;\r\n            this.partIndex = 0;\r\n            this.link = new csmVector();\r\n            if (v != undefined) {\r\n                this.partId = v.partId;\r\n                for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\r\n                    this.link.pushBack(ite.ptr().clone());\r\n                }\r\n            }\r\n        }\r\n        PartData.prototype.assignment = function (v) {\r\n            this.partId = v.partId;\r\n            for (var ite = v.link.begin(); ite.notEqual(v.link.end()); ite.preIncrement()) {\r\n                this.link.pushBack(ite.ptr().clone());\r\n            }\r\n            return this;\r\n        };\r\n        PartData.prototype.initialize = function (model) {\r\n            this.parameterIndex = model.getParameterIndex(this.partId);\r\n            this.partIndex = model.getPartIndex(this.partId);\r\n            model.setParameterValueByIndex(this.parameterIndex, 1);\r\n        };\r\n        PartData.prototype.clone = function () {\r\n            var clonePartData = new PartData();\r\n            clonePartData.partId = this.partId;\r\n            clonePartData.parameterIndex = this.parameterIndex;\r\n            clonePartData.partIndex = this.partIndex;\r\n            clonePartData.link = new csmVector();\r\n            for (var ite = this.link.begin(); ite.notEqual(this.link.end()); ite.increment()) {\r\n                clonePartData.link.pushBack(ite.ptr().clone());\r\n            }\r\n            return clonePartData;\r\n        };\r\n        return PartData;\r\n    }());\r\n    Live2DCubismFramework.PartData = PartData;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/effect/cubismpose.ts\n");

/***/ }),

/***/ "./Framework/src/icubismmodelsetting.ts":
/*!**********************************************!*\
  !*** ./Framework/src/icubismmodelsetting.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ICubismModelSetting = (function () {\r\n        function ICubismModelSetting() {\r\n        }\r\n        return ICubismModelSetting;\r\n    }());\r\n    Live2DCubismFramework.ICubismModelSetting = ICubismModelSetting;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/icubismmodelsetting.ts\n");

/***/ }),

/***/ "./Framework/src/id/cubismid.ts":
/*!**************************************!*\
  !*** ./Framework/src/id/cubismid.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismId = (function () {\r\n        function CubismId(id) {\r\n            if (typeof id === 'string') {\r\n                this._id = new csmString(id);\r\n                return;\r\n            }\r\n            this._id = id;\r\n        }\r\n        CubismId.prototype.getString = function () {\r\n            return this._id;\r\n        };\r\n        CubismId.prototype.isEqual = function (c) {\r\n            if (typeof c === 'string') {\r\n                return this._id.isEqual(c);\r\n            }\r\n            else if (c instanceof csmString) {\r\n                return this._id.isEqual(c.s);\r\n            }\r\n            else if (c instanceof CubismId) {\r\n                return this._id.isEqual(c._id.s);\r\n            }\r\n            return false;\r\n        };\r\n        CubismId.prototype.isNotEqual = function (c) {\r\n            if (typeof c == 'string') {\r\n                return !this._id.isEqual(c);\r\n            }\r\n            else if (c instanceof csmString) {\r\n                return !this._id.isEqual(c.s);\r\n            }\r\n            else if (c instanceof CubismId) {\r\n                return !this._id.isEqual(c._id.s);\r\n            }\r\n            return false;\r\n        };\r\n        return CubismId;\r\n    }());\r\n    Live2DCubismFramework.CubismId = CubismId;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9pZC9jdWJpc21pZC50cz8xZjE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLyoqXHJcbiAgICog44OR44Op44Oh44O844K/5ZCN44O744OR44O844OE5ZCN44O7RHJhd2FibGXlkI3jgpLkv53mjIFcclxuICAgKlxyXG4gICAqIOODkeODqeODoeODvOOCv+WQjeODu+ODkeODvOODhOWQjeODu0RyYXdhYmxl5ZCN44KS5L+d5oyB44GZ44KL44Kv44Op44K544CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbUlkIHtcclxuICAgIC8qKlxyXG4gICAgICogSUTlkI3jgpLlj5blvpfjgZnjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFN0cmluZygpOiBjc21TdHJpbmcge1xyXG4gICAgICByZXR1cm4gdGhpcy5faWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcgfCBjc21TdHJpbmcpIHtcclxuICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IG5ldyBjc21TdHJpbmcoaWQpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5faWQgPSBpZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGlk44KS5q+U6LyDXHJcbiAgICAgKiBAcGFyYW0gYyDmr5TovIPjgZnjgotpZFxyXG4gICAgICogQHJldHVybiDlkIzjgZjjgarjgonjgbB0cnVlLOeVsOOBquOBo+OBpuOBhOOCjOOBsGZhbHNl44KS6L+U44GZXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0VxdWFsKGM6IHN0cmluZyB8IGNzbVN0cmluZyB8IEN1YmlzbUlkKTogYm9vbGVhbiB7XHJcbiAgICAgIGlmICh0eXBlb2YgYyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjKTtcclxuICAgICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgY3NtU3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkLmlzRXF1YWwoYy5zKTtcclxuICAgICAgfSBlbHNlIGlmIChjIGluc3RhbmNlb2YgQ3ViaXNtSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBpZOOCkuavlOi8g1xyXG4gICAgICogQHBhcmFtIGMg5q+U6LyD44GZ44KLaWRcclxuICAgICAqIEByZXR1cm4g5ZCM44GY44Gq44KJ44GwdHJ1ZSznlbDjgarjgaPjgabjgYTjgozjgbBmYWxzZeOCkui/lOOBmVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNOb3RFcXVhbChjOiBzdHJpbmcgfCBjc21TdHJpbmcgfCBDdWJpc21JZCk6IGJvb2xlYW4ge1xyXG4gICAgICBpZiAodHlwZW9mIGMgPT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuX2lkLmlzRXF1YWwoYyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoYyBpbnN0YW5jZW9mIGNzbVN0cmluZykge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjLnMpO1xyXG4gICAgICB9IGVsc2UgaWYgKGMgaW5zdGFuY2VvZiBDdWJpc21JZCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5faWQuaXNFcXVhbChjLl9pZC5zKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfaWQ6IGNzbVN0cmluZzsgLy8gSUTlkI1cclxuICB9XHJcblxyXG4gIGV4cG9ydCBkZWNsYXJlIHR5cGUgQ3ViaXNtSWRIYW5kbGUgPSBDdWJpc21JZDtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7OztBQU9BO0FBQ0E7QUFFQTtBQUFBO0FBTUE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQWRBO0FBQ0E7QUFDQTtBQW1CQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBckRBO0FBd0RBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/id/cubismid.ts\n");

/***/ }),

/***/ "./Framework/src/id/cubismidmanager.ts":
/*!*********************************************!*\
  !*** ./Framework/src/id/cubismidmanager.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar cubismid_1 = __webpack_require__(/*! ./cubismid */ \"./Framework/src/id/cubismid.ts\");\r\nvar CubismId = cubismid_1.Live2DCubismFramework.CubismId;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismIdManager = (function () {\r\n        function CubismIdManager() {\r\n            this._ids = new csmVector();\r\n        }\r\n        CubismIdManager.prototype.release = function () {\r\n            for (var i = 0; i < this._ids.getSize(); ++i) {\r\n                this._ids.set(i, void 0);\r\n            }\r\n            this._ids = null;\r\n        };\r\n        CubismIdManager.prototype.registerIds = function (ids) {\r\n            for (var i = 0; i < ids.length; i++) {\r\n                this.registerId(ids[i]);\r\n            }\r\n        };\r\n        CubismIdManager.prototype.registerId = function (id) {\r\n            var result = null;\r\n            if ('string' == typeof id) {\r\n                if ((result = this.findId(id)) != null) {\r\n                    return result;\r\n                }\r\n                result = new CubismId(id);\r\n                this._ids.pushBack(result);\r\n            }\r\n            else {\r\n                return this.registerId(id.s);\r\n            }\r\n            return result;\r\n        };\r\n        CubismIdManager.prototype.getId = function (id) {\r\n            return this.registerId(id);\r\n        };\r\n        CubismIdManager.prototype.isExist = function (id) {\r\n            if ('string' == typeof id) {\r\n                return this.findId(id) != null;\r\n            }\r\n            return this.isExist(id.s);\r\n        };\r\n        CubismIdManager.prototype.findId = function (id) {\r\n            for (var i = 0; i < this._ids.getSize(); ++i) {\r\n                if (this._ids\r\n                    .at(i)\r\n                    .getString()\r\n                    .isEqual(id)) {\r\n                    return this._ids.at(i);\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        return CubismIdManager;\r\n    }());\r\n    Live2DCubismFramework.CubismIdManager = CubismIdManager;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL2lkL2N1YmlzbWlkbWFuYWdlci50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvaWQvY3ViaXNtaWRtYW5hZ2VyLnRzPzZmOWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3NtdmVjdG9yIH0gZnJvbSAnLi4vdHlwZS9jc212ZWN0b3InO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuL2N1YmlzbWlkJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XHJcbmltcG9ydCBDdWJpc21JZCA9IGN1YmlzbWlkLkN1YmlzbUlkO1xyXG5pbXBvcnQgY3NtVmVjdG9yID0gY3NtdmVjdG9yLmNzbVZlY3RvcjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICAvKipcclxuICAgKiBJROWQjeOBrueuoeeQhlxyXG4gICAqXHJcbiAgICogSUTlkI3jgpLnrqHnkIbjgZnjgovjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtSWRNYW5hZ2VyIHtcclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5faWRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21JZD4oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9pZHMuZ2V0U2l6ZSgpOyArK2kpIHtcclxuICAgICAgICB0aGlzLl9pZHMuc2V0KGksIHZvaWQgMCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5faWRzID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIElE5ZCN44KS44Oq44K544OI44GL44KJ55m76YyyXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkcyBJROWQjeODquOCueODiFxyXG4gICAgICogQHBhcmFtIGNvdW50IElE44Gu5YCL5pWwXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWdpc3RlcklkcyhpZHM6IHN0cmluZ1tdIHwgY3NtU3RyaW5nW10pOiB2b2lkIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVySWQoaWRzW2ldKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSUTlkI3jgpLnmbvpjLJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaWQgSUTlkI1cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlZ2lzdGVySWQoaWQ6IHN0cmluZyB8IGNzbVN0cmluZyk6IEN1YmlzbUlkIHtcclxuICAgICAgbGV0IHJlc3VsdDogQ3ViaXNtSWQgPSBudWxsO1xyXG5cclxuICAgICAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBpZCkge1xyXG4gICAgICAgIGlmICgocmVzdWx0ID0gdGhpcy5maW5kSWQoaWQpKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVzdWx0ID0gbmV3IEN1YmlzbUlkKGlkKTtcclxuICAgICAgICB0aGlzLl9pZHMucHVzaEJhY2socmVzdWx0KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcklkKGlkLnMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSUTlkI3jgYvjgolJROOCkuWPluW+l+OBmeOCi1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpZCBJROWQjVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0SWQoaWQ6IGNzbVN0cmluZyB8IHN0cmluZyk6IEN1YmlzbUlkIHtcclxuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0ZXJJZChpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJROWQjeOBi+OCiUlE44Gu56K66KqNXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB0cnVlIOWtmOWcqOOBmeOCi1xyXG4gICAgICogQHJldHVybiBmYWxzZSDlrZjlnKjjgZfjgarjgYRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzRXhpc3QoaWQ6IGNzbVN0cmluZyB8IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZElkKGlkKSAhPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzLmlzRXhpc3QoaWQucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJROWQjeOBi+OCiUlE44KS5qSc57Si44GZ44KL44CCXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkIElE5ZCNXHJcbiAgICAgKiBAcmV0dXJuIOeZu+mMsuOBleOCjOOBpuOBhOOCi0lE44CC44Gq44GR44KM44GwTlVMTOOAglxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGZpbmRJZChpZDogc3RyaW5nKTogQ3ViaXNtSWQge1xyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2lkcy5nZXRTaXplKCk7ICsraSkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHRoaXMuX2lkc1xyXG4gICAgICAgICAgICAuYXQoaSlcclxuICAgICAgICAgICAgLmdldFN0cmluZygpXHJcbiAgICAgICAgICAgIC5pc0VxdWFsKGlkKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2lkcy5hdChpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2lkczogY3NtVmVjdG9yPEN1YmlzbUlkPjsgLy8g55m76Yyy44GV44KM44Gm44GE44KLSUTjga7jg6rjgrnjg4hcclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7QUFPQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQUE7QUFNQTtBQUlBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQUE7QUFoR0E7QUFpR0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Framework/src/id/cubismidmanager.ts\n");

/***/ }),

/***/ "./Framework/src/live2dcubismframework.ts":
/*!************************************************!*\
  !*** ./Framework/src/live2dcubismframework.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LogLevel = exports.Option = exports.Live2DCubismFramework = exports.strtod = void 0;\r\nvar cubismjson_1 = __webpack_require__(/*! ./utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\r\nvar cubismidmanager_1 = __webpack_require__(/*! ./id/cubismidmanager */ \"./Framework/src/id/cubismidmanager.ts\");\r\nvar cubismrenderer_1 = __webpack_require__(/*! ./rendering/cubismrenderer */ \"./Framework/src/rendering/cubismrenderer.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ./utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar Value = cubismjson_1.Live2DCubismFramework.Value;\r\nvar CubismIdManager = cubismidmanager_1.Live2DCubismFramework.CubismIdManager;\r\nvar CubismRenderer = cubismrenderer_1.Live2DCubismFramework.CubismRenderer;\r\nfunction strtod(s, endPtr) {\r\n    var index = 0;\r\n    for (var i = 1;; i++) {\r\n        var testC = s.slice(i - 1, i);\r\n        if (testC == 'e' || testC == '-' || testC == 'E') {\r\n            continue;\r\n        }\r\n        var test = s.substring(0, i);\r\n        var number = Number(test);\r\n        if (isNaN(number)) {\r\n            break;\r\n        }\r\n        index = i;\r\n    }\r\n    var d = parseFloat(s);\r\n    if (isNaN(d)) {\r\n        d = NaN;\r\n    }\r\n    endPtr[0] = s.slice(index);\r\n    return d;\r\n}\r\nexports.strtod = strtod;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var s_isStarted = false;\r\n    var s_isInitialized = false;\r\n    var s_option = null;\r\n    var s_cubismIdManager = null;\r\n    var Constant;\r\n    (function (Constant) {\r\n        Constant.vertexOffset = 0;\r\n        Constant.vertexStep = 2;\r\n    })(Constant = Live2DCubismFramework.Constant || (Live2DCubismFramework.Constant = {}));\r\n    function csmDelete(address) {\r\n        if (!address) {\r\n            return;\r\n        }\r\n        address = void 0;\r\n    }\r\n    Live2DCubismFramework.csmDelete = csmDelete;\r\n    var CubismFramework = (function () {\r\n        function CubismFramework() {\r\n        }\r\n        CubismFramework.startUp = function (option) {\r\n            if (option === void 0) { option = null; }\r\n            if (s_isStarted) {\r\n                cubismdebug_1.CubismLogInfo('CubismFramework.startUp() is already done.');\r\n                return s_isStarted;\r\n            }\r\n            s_option = option;\r\n            if (s_option != null) {\r\n                Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\r\n            }\r\n            s_isStarted = true;\r\n            if (s_isStarted) {\r\n                var version = Live2DCubismCore.Version.csmGetVersion();\r\n                var major = (version & 0xff000000) >> 24;\r\n                var minor = (version & 0x00ff0000) >> 16;\r\n                var patch = version & 0x0000ffff;\r\n                var versionNumber = version;\r\n                cubismdebug_1.CubismLogInfo(\"Live2D Cubism Core version: {0}.{1}.{2} ({3})\", ('00' + major).slice(-2), ('00' + minor).slice(-2), ('0000' + patch).slice(-4), versionNumber);\r\n            }\r\n            cubismdebug_1.CubismLogInfo('CubismFramework.startUp() is complete.');\r\n            return s_isStarted;\r\n        };\r\n        CubismFramework.cleanUp = function () {\r\n            s_isStarted = false;\r\n            s_isInitialized = false;\r\n            s_option = null;\r\n            s_cubismIdManager = null;\r\n        };\r\n        CubismFramework.initialize = function () {\r\n            cubismdebug_1.CSM_ASSERT(s_isStarted);\r\n            if (!s_isStarted) {\r\n                cubismdebug_1.CubismLogWarning('CubismFramework is not started.');\r\n                return;\r\n            }\r\n            if (s_isInitialized) {\r\n                cubismdebug_1.CubismLogWarning('CubismFramework.initialize() skipped, already initialized.');\r\n                return;\r\n            }\r\n            Value.staticInitializeNotForClientCall();\r\n            s_cubismIdManager = new CubismIdManager();\r\n            s_isInitialized = true;\r\n            cubismdebug_1.CubismLogInfo('CubismFramework.initialize() is complete.');\r\n        };\r\n        CubismFramework.dispose = function () {\r\n            cubismdebug_1.CSM_ASSERT(s_isStarted);\r\n            if (!s_isStarted) {\r\n                cubismdebug_1.CubismLogWarning('CubismFramework is not started.');\r\n                return;\r\n            }\r\n            if (!s_isInitialized) {\r\n                cubismdebug_1.CubismLogWarning('CubismFramework.dispose() skipped, not initialized.');\r\n                return;\r\n            }\r\n            Value.staticReleaseNotForClientCall();\r\n            s_cubismIdManager.release();\r\n            s_cubismIdManager = null;\r\n            CubismRenderer.staticRelease();\r\n            s_isInitialized = false;\r\n            cubismdebug_1.CubismLogInfo('CubismFramework.dispose() is complete.');\r\n        };\r\n        CubismFramework.isStarted = function () {\r\n            return s_isStarted;\r\n        };\r\n        CubismFramework.isInitialized = function () {\r\n            return s_isInitialized;\r\n        };\r\n        CubismFramework.coreLogFunction = function (message) {\r\n            if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\r\n                return;\r\n            }\r\n            Live2DCubismCore.Logging.csmGetLogFunction()(message);\r\n        };\r\n        CubismFramework.getLoggingLevel = function () {\r\n            if (s_option != null) {\r\n                return s_option.loggingLevel;\r\n            }\r\n            return LogLevel.LogLevel_Off;\r\n        };\r\n        CubismFramework.getIdManager = function () {\r\n            return s_cubismIdManager;\r\n        };\r\n        return CubismFramework;\r\n    }());\r\n    Live2DCubismFramework.CubismFramework = CubismFramework;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\nvar Option = (function () {\r\n    function Option() {\r\n    }\r\n    return Option;\r\n}());\r\nexports.Option = Option;\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"LogLevel_Verbose\"] = 0] = \"LogLevel_Verbose\";\r\n    LogLevel[LogLevel[\"LogLevel_Debug\"] = 1] = \"LogLevel_Debug\";\r\n    LogLevel[LogLevel[\"LogLevel_Info\"] = 2] = \"LogLevel_Info\";\r\n    LogLevel[LogLevel[\"LogLevel_Warning\"] = 3] = \"LogLevel_Warning\";\r\n    LogLevel[LogLevel[\"LogLevel_Error\"] = 4] = \"LogLevel_Error\";\r\n    LogLevel[LogLevel[\"LogLevel_Off\"] = 5] = \"LogLevel_Off\";\r\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/live2dcubismframework.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismmath.ts":
/*!******************************************!*\
  !*** ./Framework/src/math/cubismmath.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismvector2_1 = __webpack_require__(/*! ./cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\");\r\nvar CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMath = (function () {\r\n        function CubismMath() {\r\n        }\r\n        CubismMath.range = function (value, min, max) {\r\n            if (value < min) {\r\n                value = min;\r\n            }\r\n            else if (value > max) {\r\n                value = max;\r\n            }\r\n            return value;\r\n        };\r\n        CubismMath.sin = function (x) {\r\n            return Math.sin(x);\r\n        };\r\n        CubismMath.cos = function (x) {\r\n            return Math.cos(x);\r\n        };\r\n        CubismMath.abs = function (x) {\r\n            return Math.abs(x);\r\n        };\r\n        CubismMath.sqrt = function (x) {\r\n            return Math.sqrt(x);\r\n        };\r\n        CubismMath.getEasingSine = function (value) {\r\n            if (value < 0.0) {\r\n                return 0.0;\r\n            }\r\n            else if (value > 1.0) {\r\n                return 1.0;\r\n            }\r\n            return 0.5 - 0.5 * this.cos(value * Math.PI);\r\n        };\r\n        CubismMath.max = function (left, right) {\r\n            return left > right ? left : right;\r\n        };\r\n        CubismMath.min = function (left, right) {\r\n            return left > right ? right : left;\r\n        };\r\n        CubismMath.degreesToRadian = function (degrees) {\r\n            return (degrees / 180.0) * Math.PI;\r\n        };\r\n        CubismMath.radianToDegrees = function (radian) {\r\n            return (radian * 180.0) / Math.PI;\r\n        };\r\n        CubismMath.directionToRadian = function (from, to) {\r\n            var q1 = Math.atan2(to.y, to.x);\r\n            var q2 = Math.atan2(from.y, from.x);\r\n            var ret = q1 - q2;\r\n            while (ret < -Math.PI) {\r\n                ret += Math.PI * 2.0;\r\n            }\r\n            while (ret > Math.PI) {\r\n                ret -= Math.PI * 2.0;\r\n            }\r\n            return ret;\r\n        };\r\n        CubismMath.directionToDegrees = function (from, to) {\r\n            var radian = this.directionToRadian(from, to);\r\n            var degree = this.radianToDegrees(radian);\r\n            if (to.x - from.x > 0.0) {\r\n                degree = -degree;\r\n            }\r\n            return degree;\r\n        };\r\n        CubismMath.radianToDirection = function (totalAngle) {\r\n            var ret = new CubismVector2();\r\n            ret.x = this.sin(totalAngle);\r\n            ret.y = this.cos(totalAngle);\r\n            return ret;\r\n        };\r\n        return CubismMath;\r\n    }());\r\n    Live2DCubismFramework.CubismMath = CubismMath;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismmath.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismmatrix44.ts":
/*!**********************************************!*\
  !*** ./Framework/src/math/cubismmatrix44.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMatrix44 = (function () {\r\n        function CubismMatrix44() {\r\n            this._tr = new Float32Array(16);\r\n            this.loadIdentity();\r\n        }\r\n        CubismMatrix44.multiply = function (a, b, dst) {\r\n            var c = new Float32Array([\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0\r\n            ]);\r\n            var n = 4;\r\n            for (var i = 0; i < n; ++i) {\r\n                for (var j = 0; j < n; ++j) {\r\n                    for (var k = 0; k < n; ++k) {\r\n                        c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\r\n                    }\r\n                }\r\n            }\r\n            for (var i = 0; i < 16; ++i) {\r\n                dst[i] = c[i];\r\n            }\r\n        };\r\n        CubismMatrix44.prototype.loadIdentity = function () {\r\n            var c = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            this.setMatrix(c);\r\n        };\r\n        CubismMatrix44.prototype.setMatrix = function (tr) {\r\n            for (var i = 0; i < 16; ++i) {\r\n                this._tr[i] = tr[i];\r\n            }\r\n        };\r\n        CubismMatrix44.prototype.getArray = function () {\r\n            return this._tr;\r\n        };\r\n        CubismMatrix44.prototype.getScaleX = function () {\r\n            return this._tr[0];\r\n        };\r\n        CubismMatrix44.prototype.getScaleY = function () {\r\n            return this._tr[5];\r\n        };\r\n        CubismMatrix44.prototype.getTranslateX = function () {\r\n            return this._tr[12];\r\n        };\r\n        CubismMatrix44.prototype.getTranslateY = function () {\r\n            return this._tr[13];\r\n        };\r\n        CubismMatrix44.prototype.transformX = function (src) {\r\n            return this._tr[0] * src + this._tr[12];\r\n        };\r\n        CubismMatrix44.prototype.transformY = function (src) {\r\n            return this._tr[5] * src + this._tr[13];\r\n        };\r\n        CubismMatrix44.prototype.invertTransformX = function (src) {\r\n            return (src - this._tr[12]) / this._tr[0];\r\n        };\r\n        CubismMatrix44.prototype.invertTransformY = function (src) {\r\n            return (src - this._tr[13]) / this._tr[5];\r\n        };\r\n        CubismMatrix44.prototype.translateRelative = function (x, y) {\r\n            var tr1 = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                x,\r\n                y,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n        };\r\n        CubismMatrix44.prototype.translate = function (x, y) {\r\n            this._tr[12] = x;\r\n            this._tr[13] = y;\r\n        };\r\n        CubismMatrix44.prototype.translateX = function (x) {\r\n            this._tr[12] = x;\r\n        };\r\n        CubismMatrix44.prototype.translateY = function (y) {\r\n            this._tr[13] = y;\r\n        };\r\n        CubismMatrix44.prototype.scaleRelative = function (x, y) {\r\n            var tr1 = new Float32Array([\r\n                x,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                y,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n        };\r\n        CubismMatrix44.prototype.scale = function (x, y) {\r\n            this._tr[0] = x;\r\n            this._tr[5] = y;\r\n        };\r\n        CubismMatrix44.prototype.multiplyByMatrix = function (m) {\r\n            CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\r\n        };\r\n        CubismMatrix44.prototype.clone = function () {\r\n            var cloneMatrix = new CubismMatrix44();\r\n            for (var i = 0; i < this._tr.length; i++) {\r\n                cloneMatrix._tr[i] = this._tr[i];\r\n            }\r\n            return cloneMatrix;\r\n        };\r\n        return CubismMatrix44;\r\n    }());\r\n    Live2DCubismFramework.CubismMatrix44 = CubismMatrix44;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismmatrix44.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismmodelmatrix.ts":
/*!*************************************************!*\
  !*** ./Framework/src/math/cubismmodelmatrix.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\r\nvar CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismModelMatrix = (function (_super) {\r\n        __extends(CubismModelMatrix, _super);\r\n        function CubismModelMatrix(w, h) {\r\n            var _this = _super.call(this) || this;\r\n            _this._width = w !== undefined ? w : 0.0;\r\n            _this._height = h !== undefined ? h : 0.0;\r\n            _this.setHeight(1.0);\r\n            return _this;\r\n        }\r\n        CubismModelMatrix.prototype.setWidth = function (w) {\r\n            var scaleX = w / this._width;\r\n            var scaleY = scaleX;\r\n            this.scale(scaleX * 2.6, scaleY * 2.6);\r\n        };\r\n        CubismModelMatrix.prototype.setHeight = function (h) {\r\n            var scaleX = h / this._height;\r\n            var scaleY = scaleX;\r\n            this.scale(scaleX * 2.6, scaleY * 2.6);\r\n        };\r\n        CubismModelMatrix.prototype.setPosition = function (x, y) {\r\n            this.translate(x, y);\r\n        };\r\n        CubismModelMatrix.prototype.setCenterPosition = function (x, y) {\r\n            this.centerX(x);\r\n            this.centerY(y);\r\n        };\r\n        CubismModelMatrix.prototype.top = function (y) {\r\n            this.setY(y);\r\n        };\r\n        CubismModelMatrix.prototype.bottom = function (y) {\r\n            var h = this._height * this.getScaleY();\r\n            this.translateY(y - h);\r\n        };\r\n        CubismModelMatrix.prototype.left = function (x) {\r\n            this.setX(x);\r\n        };\r\n        CubismModelMatrix.prototype.right = function (x) {\r\n            var w = this._width * this.getScaleX();\r\n            this.translateX(x - w);\r\n        };\r\n        CubismModelMatrix.prototype.centerX = function (x) {\r\n            var w = this._width * this.getScaleX();\r\n            this.translateX(x - w / 2.0);\r\n        };\r\n        CubismModelMatrix.prototype.setX = function (x) {\r\n            this.translateX(x);\r\n        };\r\n        CubismModelMatrix.prototype.centerY = function (y) {\r\n            var h = this._height * this.getScaleY();\r\n            this.translateY(y - h / 2.0);\r\n        };\r\n        CubismModelMatrix.prototype.setY = function (y) {\r\n            this.translateY(y);\r\n        };\r\n        CubismModelMatrix.prototype.setupFromLayout = function (layout) {\r\n            var keyWidth = 'width';\r\n            var keyHeight = 'height';\r\n            var keyX = 'x';\r\n            var keyY = 'y';\r\n            var keyCenterX = 'center_x';\r\n            var keyCenterY = 'center_y';\r\n            var keyTop = 'top';\r\n            var keyBottom = 'bottom';\r\n            var keyLeft = 'left';\r\n            var keyRight = 'right';\r\n            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {\r\n                var key = ite.ptr().first;\r\n                var value = ite.ptr().second;\r\n                if (key == keyWidth) {\r\n                    this.setWidth(value);\r\n                }\r\n                else if (key == keyHeight) {\r\n                    this.setHeight(value);\r\n                }\r\n            }\r\n            for (var ite = layout.begin(); ite.notEqual(layout.end()); ite.preIncrement()) {\r\n                var key = ite.ptr().first;\r\n                var value = ite.ptr().second;\r\n                if (key == keyX) {\r\n                    this.setX(value);\r\n                }\r\n                else if (key == keyY) {\r\n                    this.setY(value);\r\n                }\r\n                else if (key == keyCenterX) {\r\n                    this.centerX(value);\r\n                }\r\n                else if (key == keyCenterY) {\r\n                    this.centerY(value);\r\n                }\r\n                else if (key == keyTop) {\r\n                    this.top(value);\r\n                }\r\n                else if (key == keyBottom) {\r\n                    this.bottom(value);\r\n                }\r\n                else if (key == keyLeft) {\r\n                    this.left(value);\r\n                }\r\n                else if (key == keyRight) {\r\n                    this.right(value);\r\n                }\r\n            }\r\n        };\r\n        return CubismModelMatrix;\r\n    }(CubismMatrix44));\r\n    Live2DCubismFramework.CubismModelMatrix = CubismModelMatrix;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismmodelmatrix.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismtargetpoint.ts":
/*!*************************************************!*\
  !*** ./Framework/src/math/cubismtargetpoint.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmath_1 = __webpack_require__(/*! ./cubismmath */ \"./Framework/src/math/cubismmath.ts\");\r\nvar CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var FrameRate = 30;\r\n    var Epsilon = 0.01;\r\n    var CubismTargetPoint = (function () {\r\n        function CubismTargetPoint() {\r\n            this._faceTargetX = 0.0;\r\n            this._faceTargetY = 0.0;\r\n            this._faceX = 0.0;\r\n            this._faceY = 0.0;\r\n            this._faceVX = 0.0;\r\n            this._faceVY = 0.0;\r\n            this._lastTimeSeconds = 0.0;\r\n            this._userTimeSeconds = 0.0;\r\n        }\r\n        CubismTargetPoint.prototype.update = function (deltaTimeSeconds) {\r\n            this._userTimeSeconds += deltaTimeSeconds;\r\n            var faceParamMaxV = 40.0 / 10.0;\r\n            var maxV = (faceParamMaxV * 1.0) / FrameRate;\r\n            if (this._lastTimeSeconds == 0.0) {\r\n                this._lastTimeSeconds = this._userTimeSeconds;\r\n                return;\r\n            }\r\n            var deltaTimeWeight = (this._userTimeSeconds - this._lastTimeSeconds) * FrameRate;\r\n            this._lastTimeSeconds = this._userTimeSeconds;\r\n            var timeToMaxSpeed = 0.15;\r\n            var frameToMaxSpeed = timeToMaxSpeed * FrameRate;\r\n            var maxA = (deltaTimeWeight * maxV) / frameToMaxSpeed;\r\n            var dx = this._faceTargetX - this._faceX;\r\n            var dy = this._faceTargetY - this._faceY;\r\n            if (CubismMath.abs(dx) <= Epsilon && CubismMath.abs(dy) <= Epsilon) {\r\n                return;\r\n            }\r\n            var d = CubismMath.sqrt(dx * dx + dy * dy);\r\n            var vx = (maxV * dx) / d;\r\n            var vy = (maxV * dy) / d;\r\n            var ax = vx - this._faceVX;\r\n            var ay = vy - this._faceVY;\r\n            var a = CubismMath.sqrt(ax * ax + ay * ay);\r\n            if (a < -maxA || a > maxA) {\r\n                ax *= maxA / a;\r\n                ay *= maxA / a;\r\n            }\r\n            this._faceVX += ax;\r\n            this._faceVY += ay;\r\n            {\r\n                var maxV_1 = 0.5 *\r\n                    (CubismMath.sqrt(maxA * maxA + 16.0 * maxA * d - 8.0 * maxA * d) -\r\n                        maxA);\r\n                var curV = CubismMath.sqrt(this._faceVX * this._faceVX + this._faceVY * this._faceVY);\r\n                if (curV > maxV_1) {\r\n                    this._faceVX *= maxV_1 / curV;\r\n                    this._faceVY *= maxV_1 / curV;\r\n                }\r\n            }\r\n            this._faceX += this._faceVX;\r\n            this._faceY += this._faceVY;\r\n        };\r\n        CubismTargetPoint.prototype.getX = function () {\r\n            return this._faceX;\r\n        };\r\n        CubismTargetPoint.prototype.getY = function () {\r\n            return this._faceY;\r\n        };\r\n        CubismTargetPoint.prototype.set = function (x, y) {\r\n            this._faceTargetX = x;\r\n            this._faceTargetY = y;\r\n        };\r\n        return CubismTargetPoint;\r\n    }());\r\n    Live2DCubismFramework.CubismTargetPoint = CubismTargetPoint;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnQudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnQudHM/NzBiNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tYXRoIH0gZnJvbSAnLi9jdWJpc21tYXRoJztcclxuaW1wb3J0IEN1YmlzbU1hdGggPSBjdWJpc21tYXRoLkN1YmlzbU1hdGg7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgY29uc3QgRnJhbWVSYXRlID0gMzA7XHJcbiAgY29uc3QgRXBzaWxvbiA9IDAuMDE7XHJcblxyXG4gIC8qKlxyXG4gICAqIOmhlOOBruWQkeOBjeOBruWItuW+oeapn+iDvVxyXG4gICAqXHJcbiAgICog6aGU44Gu5ZCR44GN44Gu5Yi25b6h5qmf6IO944KS5o+Q5L6b44GZ44KL44Kv44Op44K544CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbVRhcmdldFBvaW50IHtcclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgdGhpcy5fZmFjZVRhcmdldFggPSAwLjA7XHJcbiAgICAgIHRoaXMuX2ZhY2VUYXJnZXRZID0gMC4wO1xyXG4gICAgICB0aGlzLl9mYWNlWCA9IDAuMDtcclxuICAgICAgdGhpcy5fZmFjZVkgPSAwLjA7XHJcbiAgICAgIHRoaXMuX2ZhY2VWWCA9IDAuMDtcclxuICAgICAgdGhpcy5fZmFjZVZZID0gMC4wO1xyXG4gICAgICB0aGlzLl9sYXN0VGltZVNlY29uZHMgPSAwLjA7XHJcbiAgICAgIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyA9IDAuMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOabtOaWsOWHpueQhlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdXBkYXRlKGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAvLyDjg4fjg6vjgr/mmYLplpPjgpLliqDnrpfjgZnjgotcclxuICAgICAgdGhpcy5fdXNlclRpbWVTZWNvbmRzICs9IGRlbHRhVGltZVNlY29uZHM7XHJcblxyXG4gICAgICAvLyDpppbjgpLkuK3lpK7jgYvjgonlt6blj7PjgavmjK/jgovjgajjgY3jga7lubPlnYfnmoTjgarpgJ/jgZXjga8g56eS6YCf5bqm44CC5Yqg6YCf44O75rib6YCf44KS6ICD5oWu44GX44Gm44CB44Gd44Gu77yS5YCN44KS5pyA6auY6YCf5bqm44Go44GZ44KLXHJcbiAgICAgIC8vIOmhlOOBruaMr+OCiuWFt+WQiOOCkuOAgeS4reWkru+8iDAuMO+8ieOBi+OCieOAgeW3puWPs+OBr++8iCstMS4w77yJ44Go44GZ44KLXHJcbiAgICAgIGNvbnN0IGZhY2VQYXJhbU1heFY6IG51bWJlciA9IDQwLjAgLyAxMC4wOyAvLyA3LjXnp5LplpPjgas0MOWIhuenu+WLlSg1LjMvc2MpXHJcbiAgICAgIGNvbnN0IG1heFY6IG51bWJlciA9IChmYWNlUGFyYW1NYXhWICogMS4wKSAvIEZyYW1lUmF0ZTsgLy8gMWZyYW1l44GC44Gf44KK44Gr5aSJ5YyW44Gn44GN44KL6YCf5bqm44Gu5LiK6ZmQXHJcblxyXG4gICAgICBpZiAodGhpcy5fbGFzdFRpbWVTZWNvbmRzID09IDAuMCkge1xyXG4gICAgICAgIHRoaXMuX2xhc3RUaW1lU2Vjb25kcyA9IHRoaXMuX3VzZXJUaW1lU2Vjb25kcztcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGRlbHRhVGltZVdlaWdodDogbnVtYmVyID1cclxuICAgICAgICAodGhpcy5fdXNlclRpbWVTZWNvbmRzIC0gdGhpcy5fbGFzdFRpbWVTZWNvbmRzKSAqIEZyYW1lUmF0ZTtcclxuICAgICAgdGhpcy5fbGFzdFRpbWVTZWNvbmRzID0gdGhpcy5fdXNlclRpbWVTZWNvbmRzO1xyXG5cclxuICAgICAgLy8g5pyA6auY6YCf5bqm44Gr44Gq44KL44G+44Gn44Gu5pmC6ZaT44KSXHJcbiAgICAgIGNvbnN0IHRpbWVUb01heFNwZWVkID0gMC4xNTtcclxuICAgICAgY29uc3QgZnJhbWVUb01heFNwZWVkOiBudW1iZXIgPSB0aW1lVG9NYXhTcGVlZCAqIEZyYW1lUmF0ZTsgLy8gc2VjICogZnJhbWUvc2VjXHJcbiAgICAgIGNvbnN0IG1heEE6IG51bWJlciA9IChkZWx0YVRpbWVXZWlnaHQgKiBtYXhWKSAvIGZyYW1lVG9NYXhTcGVlZDsgLy8gMWZyYW1l44GC44Gf44KK44Gu5Yqg6YCf5bqmXHJcblxyXG4gICAgICAvLyDnm67mjIfjgZnlkJHjgY3jga/jgIHvvIhkeCwgZHnvvInmlrnlkJHjga7jg5njgq/jg4jjg6vjgajjgarjgotcclxuICAgICAgY29uc3QgZHg6IG51bWJlciA9IHRoaXMuX2ZhY2VUYXJnZXRYIC0gdGhpcy5fZmFjZVg7XHJcbiAgICAgIGNvbnN0IGR5OiBudW1iZXIgPSB0aGlzLl9mYWNlVGFyZ2V0WSAtIHRoaXMuX2ZhY2VZO1xyXG5cclxuICAgICAgaWYgKEN1YmlzbU1hdGguYWJzKGR4KSA8PSBFcHNpbG9uICYmIEN1YmlzbU1hdGguYWJzKGR5KSA8PSBFcHNpbG9uKSB7XHJcbiAgICAgICAgcmV0dXJuOyAvLyDlpInljJbjgarjgZdcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8g6YCf5bqm44Gu5pyA5aSn44KI44KK44KC5aSn44GN44GE5aC05ZCI44Gv44CB6YCf5bqm44KS6JC944Go44GZXHJcbiAgICAgIGNvbnN0IGQ6IG51bWJlciA9IEN1YmlzbU1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XHJcblxyXG4gICAgICAvLyDpgLLooYzmlrnlkJHjga7mnIDlpKfpgJ/luqbjg5njgq/jg4jjg6tcclxuICAgICAgY29uc3Qgdng6IG51bWJlciA9IChtYXhWICogZHgpIC8gZDtcclxuICAgICAgY29uc3Qgdnk6IG51bWJlciA9IChtYXhWICogZHkpIC8gZDtcclxuXHJcbiAgICAgIC8vIOePvuWcqOOBrumAn+W6puOBi+OCieOAgeaWsOimj+mAn+W6puOBuOOBruWkieWMlu+8iOWKoOmAn+W6pu+8ieOCkuaxguOCgeOCi1xyXG4gICAgICBsZXQgYXg6IG51bWJlciA9IHZ4IC0gdGhpcy5fZmFjZVZYO1xyXG4gICAgICBsZXQgYXk6IG51bWJlciA9IHZ5IC0gdGhpcy5fZmFjZVZZO1xyXG5cclxuICAgICAgY29uc3QgYTogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KGF4ICogYXggKyBheSAqIGF5KTtcclxuXHJcbiAgICAgIC8vIOWKoOmAn+OBruOBqOOBjVxyXG4gICAgICBpZiAoYSA8IC1tYXhBIHx8IGEgPiBtYXhBKSB7XHJcbiAgICAgICAgYXggKj0gbWF4QSAvIGE7XHJcbiAgICAgICAgYXkgKj0gbWF4QSAvIGE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIOWKoOmAn+W6puOCkuWFg+OBrumAn+W6puOBq+i2s+OBl+OBpuOAgeaWsOmAn+W6puOBqOOBmeOCi1xyXG4gICAgICB0aGlzLl9mYWNlVlggKz0gYXg7XHJcbiAgICAgIHRoaXMuX2ZhY2VWWSArPSBheTtcclxuXHJcbiAgICAgIC8vIOebrueahOOBruaWueWQkeOBq+i/keOBpeOBhOOBn+OBqOOBjeOAgea7keOCieOBi+OBq+a4m+mAn+OBmeOCi+OBn+OCgeOBruWHpueQhlxyXG4gICAgICAvLyDoqK3lrprjgZXjgozjgZ/liqDpgJ/luqbjgafmraLjgb7jgovkuovjga7lh7rmnaXjgovot53pm6LjgajpgJ/luqbjga7plqLkv4LjgYvjgolcclxuICAgICAgLy8g54++5Zyo44Go44KK44GG44KL5pyA6auY6YCf5bqm44KS6KiI566X44GX44CB44Gd44KM5Lul5LiK44Gu5pmC44Gv6YCf5bqm44KS6JC944Go44GZXHJcbiAgICAgIC8vIOKAu+acrOadpeOAgeS6uumWk+OBr+eti+WKm+OBp+WKm++8iOWKoOmAn+W6pu+8ieOCkuiqv+aVtOOBp+OBjeOCi+OBn+OCgeOAgeOCiOOCiuiHqueUseW6puOBjOmrmOOBhOOBjOOAgeewoeWNmOOBquWHpueQhuOBp+a4iOOBvuOBm+OBpuOBhOOCi1xyXG4gICAgICB7XHJcbiAgICAgICAgLy8g5Yqg6YCf5bqm44CB6YCf5bqm44CB6Led6Zui44Gu6Zai5L+C5byP44CCXHJcbiAgICAgICAgLy8gICAgICAgICAgICAyICA2ICAgICAgICAgICAyICAgICAgICAgICAgICAgM1xyXG4gICAgICAgIC8vICAgICAgc3FydChhICB0ICArIDE2IGEgaCB0ICAtIDggYSBoKSAtIGEgdFxyXG4gICAgICAgIC8vIHYgPSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAyXHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIDQgdCAgLSAyXHJcbiAgICAgICAgLy8gKHQ9MSlcclxuICAgICAgICAvLyBcdOaZguWIu3Tjga/jgIHjgYLjgonjgYvjgZjjgoHliqDpgJ/luqbjgIHpgJ/luqbjgpIxLzYwKOODleODrOODvOODoOODrOODvOODiOOAgeWNmOS9jeOBquOBlynjgadcclxuICAgICAgICAvLyBcdOiAg+OBiOOBpuOBhOOCi+OBruOBp+OAgXTvvJ3vvJHjgajjgZfjgabmtojjgZfjgabjgojjgYTvvIjigLvmnKrmpJzoqLzvvIlcclxuXHJcbiAgICAgICAgY29uc3QgbWF4VjogbnVtYmVyID1cclxuICAgICAgICAgIDAuNSAqXHJcbiAgICAgICAgICAoQ3ViaXNtTWF0aC5zcXJ0KG1heEEgKiBtYXhBICsgMTYuMCAqIG1heEEgKiBkIC0gOC4wICogbWF4QSAqIGQpIC1cclxuICAgICAgICAgICAgbWF4QSk7XHJcbiAgICAgICAgY29uc3QgY3VyVjogbnVtYmVyID0gQ3ViaXNtTWF0aC5zcXJ0KFxyXG4gICAgICAgICAgdGhpcy5fZmFjZVZYICogdGhpcy5fZmFjZVZYICsgdGhpcy5fZmFjZVZZICogdGhpcy5fZmFjZVZZXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgaWYgKGN1clYgPiBtYXhWKSB7XHJcbiAgICAgICAgICAvLyDnj77lnKjjga7pgJ/luqYgPiDmnIDpq5jpgJ/luqbjga7jgajjgY3jgIHmnIDpq5jpgJ/luqbjgb7jgafmuJvpgJ9cclxuICAgICAgICAgIHRoaXMuX2ZhY2VWWCAqPSBtYXhWIC8gY3VyVjtcclxuICAgICAgICAgIHRoaXMuX2ZhY2VWWSAqPSBtYXhWIC8gY3VyVjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX2ZhY2VYICs9IHRoaXMuX2ZhY2VWWDtcclxuICAgICAgdGhpcy5fZmFjZVkgKz0gdGhpcy5fZmFjZVZZO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogWOi7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gWOi7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFgoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2ZhY2VYO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogWei7uOOBrumhlOOBruWQkeOBjeOBruWApOOCkuWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gWei7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFkoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2ZhY2VZO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6aGU44Gu5ZCR44GN44Gu55uu5qiZ5YCk44KS6Kit5a6aXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHggWOi7uOOBrumhlOOBruWQkeOBjeOBruWApO+8iC0xLjAgfiAxLjDvvIlcclxuICAgICAqIEBwYXJhbSB5IFnou7jjga7poZTjga7lkJHjgY3jga7lgKTvvIgtMS4wIH4gMS4w77yJXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgdGhpcy5fZmFjZVRhcmdldFggPSB4O1xyXG4gICAgICB0aGlzLl9mYWNlVGFyZ2V0WSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZmFjZVRhcmdldFg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44GuWOebruaomeWApO+8iOOBk+OBruWApOOBq+i/keOBpeOBhOOBpuOBhOOBj++8iVxyXG4gICAgcHJpdmF0ZSBfZmFjZVRhcmdldFk6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44GuWeebruaomeWApO+8iOOBk+OBruWApOOBq+i/keOBpeOBhOOBpuOBhOOBj++8iVxyXG4gICAgcHJpdmF0ZSBfZmFjZVg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GNWO+8iC0xLjAgfiAxLjDvvIlcclxuICAgIHByaXZhdGUgX2ZhY2VZOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjVnvvIgtMS4wIH4gMS4w77yJXHJcbiAgICBwcml2YXRlIF9mYWNlVlg6IG51bWJlcjsgLy8g6aGU44Gu5ZCR44GN44Gu5aSJ5YyW6YCf5bqmWFxyXG4gICAgcHJpdmF0ZSBfZmFjZVZZOiBudW1iZXI7IC8vIOmhlOOBruWQkeOBjeOBruWkieWMlumAn+W6pllcclxuICAgIHByaXZhdGUgX2xhc3RUaW1lU2Vjb25kczogbnVtYmVyOyAvLyDmnIDlvozjga7lrp/ooYzmmYLplpNb56eSXVxyXG4gICAgcHJpdmF0ZSBfdXNlclRpbWVTZWNvbmRzOiBudW1iZXI7IC8vIOODh+ODq+OCv+aZgumWk+OBruepjeeul+WApFvnp5JdXHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBT0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBT0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBRUE7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQU1BO0FBV0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUFBO0FBL0lBO0FBZ0pBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismtargetpoint.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismvector2.ts":
/*!*********************************************!*\
  !*** ./Framework/src/math/cubismvector2.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismVector2 = (function () {\r\n        function CubismVector2(x, y) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.x = x == undefined ? 0.0 : x;\r\n            this.y = y == undefined ? 0.0 : y;\r\n        }\r\n        CubismVector2.prototype.add = function (vector2) {\r\n            var ret = new CubismVector2(0.0, 0.0);\r\n            ret.x = this.x + vector2.x;\r\n            ret.y = this.y + vector2.y;\r\n            return ret;\r\n        };\r\n        CubismVector2.prototype.substract = function (vector2) {\r\n            var ret = new CubismVector2(0.0, 0.0);\r\n            ret.x = this.x - vector2.x;\r\n            ret.y = this.y - vector2.y;\r\n            return ret;\r\n        };\r\n        CubismVector2.prototype.multiply = function (vector2) {\r\n            var ret = new CubismVector2(0.0, 0.0);\r\n            ret.x = this.x * vector2.x;\r\n            ret.y = this.y * vector2.y;\r\n            return ret;\r\n        };\r\n        CubismVector2.prototype.multiplyByScaler = function (scalar) {\r\n            return this.multiply(new CubismVector2(scalar, scalar));\r\n        };\r\n        CubismVector2.prototype.division = function (vector2) {\r\n            var ret = new CubismVector2(0.0, 0.0);\r\n            ret.x = this.x / vector2.x;\r\n            ret.y = this.y / vector2.y;\r\n            return ret;\r\n        };\r\n        CubismVector2.prototype.divisionByScalar = function (scalar) {\r\n            return this.division(new CubismVector2(scalar, scalar));\r\n        };\r\n        CubismVector2.prototype.getLength = function () {\r\n            return Math.sqrt(this.x * this.x + this.y * this.y);\r\n        };\r\n        CubismVector2.prototype.getDistanceWith = function (a) {\r\n            return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));\r\n        };\r\n        CubismVector2.prototype.dot = function (a) {\r\n            return this.x * a.x + this.y * a.y;\r\n        };\r\n        CubismVector2.prototype.normalize = function () {\r\n            var length = Math.pow(this.x * this.x + this.y * this.y, 0.5);\r\n            this.x = this.x / length;\r\n            this.y = this.y / length;\r\n        };\r\n        CubismVector2.prototype.isEqual = function (rhs) {\r\n            return this.x == rhs.x && this.y == rhs.y;\r\n        };\r\n        CubismVector2.prototype.isNotEqual = function (rhs) {\r\n            return !this.isEqual(rhs);\r\n        };\r\n        return CubismVector2;\r\n    }());\r\n    Live2DCubismFramework.CubismVector2 = CubismVector2;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21hdGgvY3ViaXNtdmVjdG9yMi50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvbWF0aC9jdWJpc212ZWN0b3IyLnRzP2RiMDgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLyoqXHJcbiAgICogMuasoeWFg+ODmeOCr+ODiOODq+Wei1xyXG4gICAqXHJcbiAgICogMuasoeWFg+ODmeOCr+ODiOODq+Wei+OBruapn+iDveOCkuaPkOS+m+OBmeOCi+OAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21WZWN0b3IyIHtcclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgeD86IG51bWJlciwgcHVibGljIHk/OiBudW1iZXIpIHtcclxuICAgICAgdGhpcy54ID0geCA9PSB1bmRlZmluZWQgPyAwLjAgOiB4O1xyXG5cclxuICAgICAgdGhpcy55ID0geSA9PSB1bmRlZmluZWQgPyAwLjAgOiB5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OZ44Kv44OI44Or44Gu5Yqg566XXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZlY3RvcjIg5Yqg566X44GZ44KL44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKiBAcmV0dXJuIOWKoOeul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFkZCh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgcmV0LnggPSB0aGlzLnggKyB2ZWN0b3IyLng7XHJcbiAgICAgIHJldC55ID0gdGhpcy55ICsgdmVjdG9yMi55O1xyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OZ44Kv44OI44Or44Gu5rib566XXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZlY3RvcjIg5rib566X44GZ44KL44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKiBAcmV0dXJuIOa4m+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN1YnN0cmFjdCh2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgcmV0LnggPSB0aGlzLnggLSB2ZWN0b3IyLng7XHJcbiAgICAgIHJldC55ID0gdGhpcy55IC0gdmVjdG9yMi55O1xyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OZ44Kv44OI44Or44Gu5LmX566XXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZlY3RvcjIg5LmX566X44GZ44KL44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG11bHRpcGx5KHZlY3RvcjI6IEN1YmlzbVZlY3RvcjIpOiBDdWJpc21WZWN0b3IyIHtcclxuICAgICAgY29uc3QgcmV0OiBDdWJpc21WZWN0b3IyID0gbmV3IEN1YmlzbVZlY3RvcjIoMC4wLCAwLjApO1xyXG4gICAgICByZXQueCA9IHRoaXMueCAqIHZlY3RvcjIueDtcclxuICAgICAgcmV0LnkgPSB0aGlzLnkgKiB2ZWN0b3IyLnk7XHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg5njgq/jg4jjg6vjga7kuZfnrpco44K544Kr44Op44O8KVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzY2FsYXIg5LmX566X44GZ44KL44K544Kr44Op44O85YCkXHJcbiAgICAgKiBAcmV0dXJuIOS5l+eul+e1kOaenCDjg5njgq/jg4jjg6vlgKRcclxuICAgICAqL1xyXG4gICAgcHVibGljIG11bHRpcGx5QnlTY2FsZXIoc2NhbGFyOiBudW1iZXIpOiBDdWJpc21WZWN0b3IyIHtcclxuICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHkobmV3IEN1YmlzbVZlY3RvcjIoc2NhbGFyLCBzY2FsYXIpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODmeOCr+ODiOODq+OBrumZpOeul1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB2ZWN0b3IyIOmZpOeul+OBmeOCi+ODmeOCr+ODiOODq+WApFxyXG4gICAgICogQHJldHVybiDpmaTnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkaXZpc2lvbih2ZWN0b3IyOiBDdWJpc21WZWN0b3IyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICAgIGNvbnN0IHJldDogQ3ViaXNtVmVjdG9yMiA9IG5ldyBDdWJpc21WZWN0b3IyKDAuMCwgMC4wKTtcclxuICAgICAgcmV0LnggPSB0aGlzLnggLyB2ZWN0b3IyLng7XHJcbiAgICAgIHJldC55ID0gdGhpcy55IC8gdmVjdG9yMi55O1xyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OZ44Kv44OI44Or44Gu6Zmk566XKOOCueOCq+ODqeODvClcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc2NhbGFyIOmZpOeul+OBmeOCi+OCueOCq+ODqeODvOWApFxyXG4gICAgICogQHJldHVybiDpmaTnrpfntZDmnpwg44OZ44Kv44OI44Or5YCkXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkaXZpc2lvbkJ5U2NhbGFyKHNjYWxhcjogbnVtYmVyKTogQ3ViaXNtVmVjdG9yMiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmRpdmlzaW9uKG5ldyBDdWJpc21WZWN0b3IyKHNjYWxhciwgc2NhbGFyKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg5njgq/jg4jjg6vjga7plbfjgZXjgpLlj5blvpfjgZnjgotcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIOODmeOCr+ODiOODq+OBrumVt+OBlVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODmeOCr+ODiOODq+OBrui3nembouOBruWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBhIOeCuVxyXG4gICAgICogQHJldHVybiDjg5njgq/jg4jjg6vjga7ot53pm6JcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldERpc3RhbmNlV2l0aChhOiBDdWJpc21WZWN0b3IyKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIE1hdGguc3FydChcclxuICAgICAgICAodGhpcy54IC0gYS54KSAqICh0aGlzLnggLSBhLngpICsgKHRoaXMueSAtIGEueSkgKiAodGhpcy55IC0gYS55KVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OJ44OD44OI56mN44Gu6KiI566XXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGEg5YCkXHJcbiAgICAgKiBAcmV0dXJuIOe1kOaenFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZG90KGE6IEN1YmlzbVZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy54ICogYS54ICsgdGhpcy55ICogYS55O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5q2j6KaP5YyW44Gu6YGp55SoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBub3JtYWxpemUoKTogdm9pZCB7XHJcbiAgICAgIGNvbnN0IGxlbmd0aDogbnVtYmVyID0gTWF0aC5wb3codGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55LCAwLjUpO1xyXG5cclxuICAgICAgdGhpcy54ID0gdGhpcy54IC8gbGVuZ3RoO1xyXG4gICAgICB0aGlzLnkgPSB0aGlzLnkgLyBsZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnrYnjgZfjgZXjga7norroqo3vvIjnrYnjgZfjgYTjgYvvvJ/vvIlcclxuICAgICAqXHJcbiAgICAgKiDlgKTjgYznrYnjgZfjgYTjgYvvvJ9cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gcmhzIOeiuuiqjeOBmeOCi+WApFxyXG4gICAgICogQHJldHVybiB0cnVlIOWApOOBr+etieOBl+OBhFxyXG4gICAgICogQHJldHVybiBmYWxzZSDlgKTjga/nrYnjgZfjgY/jgarjgYRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzRXF1YWwocmhzOiBDdWJpc21WZWN0b3IyKTogYm9vbGVhbiB7XHJcbiAgICAgIHJldHVybiB0aGlzLnggPT0gcmhzLnggJiYgdGhpcy55ID09IHJocy55O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog562J44GX44GV44Gu56K66KqN77yI562J44GX44GP44Gq44GE44GL77yf77yJXHJcbiAgICAgKlxyXG4gICAgICog5YCk44GM562J44GX44GP44Gq44GE44GL77yfXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHJocyDnorroqo3jgZnjgovlgKRcclxuICAgICAqIEByZXR1cm4gdHJ1ZSDlgKTjga/nrYnjgZfjgY/jgarjgYRcclxuICAgICAqIEByZXR1cm4gZmFsc2Ug5YCk44Gv562J44GX44GEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc05vdEVxdWFsKHJoczogQ3ViaXNtVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gIXRoaXMuaXNFcXVhbChyaHMpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7OztBQU9BO0FBQUE7QUFNQTtBQUlBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFHQTtBQVFBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBcEpBO0FBcUpBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismvector2.ts\n");

/***/ }),

/***/ "./Framework/src/math/cubismviewmatrix.ts":
/*!************************************************!*\
  !*** ./Framework/src/math/cubismviewmatrix.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ./cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\r\nvar CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismViewMatrix = (function (_super) {\r\n        __extends(CubismViewMatrix, _super);\r\n        function CubismViewMatrix() {\r\n            var _this = _super.call(this) || this;\r\n            _this._screenLeft = 0.0;\r\n            _this._screenRight = 0.0;\r\n            _this._screenTop = 0.0;\r\n            _this._screenBottom = 0.0;\r\n            _this._maxLeft = 0.0;\r\n            _this._maxRight = 0.0;\r\n            _this._maxTop = 0.0;\r\n            _this._maxBottom = 0.0;\r\n            _this._maxScale = 0.0;\r\n            _this._minScale = 0.0;\r\n            return _this;\r\n        }\r\n        CubismViewMatrix.prototype.adjustTranslate = function (x, y) {\r\n            if (this._tr[0] * this._maxLeft + (this._tr[12] + x) > this._screenLeft) {\r\n                x = this._screenLeft - this._tr[0] * this._maxLeft - this._tr[12];\r\n            }\r\n            if (this._tr[0] * this._maxRight + (this._tr[12] + x) <\r\n                this._screenRight) {\r\n                x = this._screenRight - this._tr[0] * this._maxRight - this._tr[12];\r\n            }\r\n            if (this._tr[5] * this._maxTop + (this._tr[13] + y) < this._screenTop) {\r\n                y = this._screenTop - this._tr[5] * this._maxTop - this._tr[13];\r\n            }\r\n            if (this._tr[5] * this._maxBottom + (this._tr[13] + y) >\r\n                this._screenBottom) {\r\n                y = this._screenBottom - this._tr[5] * this._maxBottom - this._tr[13];\r\n            }\r\n            var tr1 = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                x,\r\n                y,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n        };\r\n        CubismViewMatrix.prototype.adjustScale = function (cx, cy, scale) {\r\n            var maxScale = this.getMaxScale();\r\n            var minScale = this.getMinScale();\r\n            var targetScale = scale * this._tr[0];\r\n            if (targetScale < minScale) {\r\n                if (this._tr[0] > 0.0) {\r\n                    scale = minScale / this._tr[0];\r\n                }\r\n            }\r\n            else if (targetScale > maxScale) {\r\n                if (this._tr[0] > 0.0) {\r\n                    scale = maxScale / this._tr[0];\r\n                }\r\n            }\r\n            var tr1 = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                cx,\r\n                cy,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            var tr2 = new Float32Array([\r\n                scale,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                scale,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            var tr3 = new Float32Array([\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                0.0,\r\n                1.0,\r\n                0.0,\r\n                -cx,\r\n                -cy,\r\n                0.0,\r\n                1.0\r\n            ]);\r\n            CubismMatrix44.multiply(tr3, this._tr, this._tr);\r\n            CubismMatrix44.multiply(tr2, this._tr, this._tr);\r\n            CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n        };\r\n        CubismViewMatrix.prototype.setScreenRect = function (left, right, bottom, top) {\r\n            this._screenLeft = left;\r\n            this._screenRight = right;\r\n            this._screenBottom = bottom;\r\n            this._screenTop = top;\r\n        };\r\n        CubismViewMatrix.prototype.setMaxScreenRect = function (left, right, bottom, top) {\r\n            this._maxLeft = left;\r\n            this._maxRight = right;\r\n            this._maxTop = top;\r\n            this._maxBottom = bottom;\r\n        };\r\n        CubismViewMatrix.prototype.setMaxScale = function (maxScale) {\r\n            this._maxScale = maxScale;\r\n        };\r\n        CubismViewMatrix.prototype.setMinScale = function (minScale) {\r\n            this._minScale = minScale;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxScale = function () {\r\n            return this._maxScale;\r\n        };\r\n        CubismViewMatrix.prototype.getMinScale = function () {\r\n            return this._minScale;\r\n        };\r\n        CubismViewMatrix.prototype.isMaxScale = function () {\r\n            return this.getScaleX() >= this._maxScale;\r\n        };\r\n        CubismViewMatrix.prototype.isMinScale = function () {\r\n            return this.getScaleX() <= this._minScale;\r\n        };\r\n        CubismViewMatrix.prototype.getScreenLeft = function () {\r\n            return this._screenLeft;\r\n        };\r\n        CubismViewMatrix.prototype.getScreenRight = function () {\r\n            return this._screenRight;\r\n        };\r\n        CubismViewMatrix.prototype.getScreenBottom = function () {\r\n            return this._screenBottom;\r\n        };\r\n        CubismViewMatrix.prototype.getScreenTop = function () {\r\n            return this._screenTop;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxLeft = function () {\r\n            return this._maxLeft;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxRight = function () {\r\n            return this._maxRight;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxBottom = function () {\r\n            return this._maxBottom;\r\n        };\r\n        CubismViewMatrix.prototype.getMaxTop = function () {\r\n            return this._maxTop;\r\n        };\r\n        return CubismViewMatrix;\r\n    }(CubismMatrix44));\r\n    Live2DCubismFramework.CubismViewMatrix = CubismViewMatrix;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/math/cubismviewmatrix.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismmoc.ts":
/*!******************************************!*\
  !*** ./Framework/src/model/cubismmoc.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmodel_1 = __webpack_require__(/*! ./cubismmodel */ \"./Framework/src/model/cubismmodel.ts\");\r\nvar CubismModel = cubismmodel_1.Live2DCubismFramework.CubismModel;\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMoc = (function () {\r\n        function CubismMoc(moc) {\r\n            this._moc = moc;\r\n            this._modelCount = 0;\r\n        }\r\n        CubismMoc.create = function (mocBytes) {\r\n            var cubismMoc = null;\r\n            var moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\r\n            if (moc) {\r\n                cubismMoc = new CubismMoc(moc);\r\n            }\r\n            return cubismMoc;\r\n        };\r\n        CubismMoc.delete = function (moc) {\r\n            moc._moc._release();\r\n            moc._moc = null;\r\n            moc = null;\r\n        };\r\n        CubismMoc.prototype.createModel = function () {\r\n            var cubismModel = null;\r\n            var model = Live2DCubismCore.Model.fromMoc(this._moc);\r\n            if (model) {\r\n                cubismModel = new CubismModel(model);\r\n                cubismModel.initialize();\r\n                ++this._modelCount;\r\n            }\r\n            return cubismModel;\r\n        };\r\n        CubismMoc.prototype.deleteModel = function (model) {\r\n            if (model != null) {\r\n                model.release();\r\n                model = null;\r\n                --this._modelCount;\r\n            }\r\n        };\r\n        CubismMoc.prototype.release = function () {\r\n            cubismdebug_1.CSM_ASSERT(this._modelCount == 0);\r\n            this._moc._release();\r\n            this._moc = null;\r\n        };\r\n        return CubismMoc;\r\n    }());\r\n    Live2DCubismFramework.CubismMoc = CubismMoc;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vYy50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtbW9jLnRzPzdlNDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuL2N1YmlzbW1vZGVsJztcclxuaW1wb3J0IEN1YmlzbU1vZGVsID0gY3ViaXNtbW9kZWwuQ3ViaXNtTW9kZWw7XHJcbmltcG9ydCB7IENTTV9BU1NFUlQgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLyoqXHJcbiAgICogTW9j44OH44O844K/44Gu566h55CGXHJcbiAgICpcclxuICAgKiBNb2Pjg4fjg7zjgr/jga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrnjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9jIHtcclxuICAgIC8qKlxyXG4gICAgICogTW9j44OH44O844K/44Gu5L2c5oiQXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKG1vY0J5dGVzOiBBcnJheUJ1ZmZlcik6IEN1YmlzbU1vYyB7XHJcbiAgICAgIGxldCBjdWJpc21Nb2M6IEN1YmlzbU1vYyA9IG51bGw7XHJcbiAgICAgIGNvbnN0IG1vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MgPSBMaXZlMkRDdWJpc21Db3JlLk1vYy5mcm9tQXJyYXlCdWZmZXIoXHJcbiAgICAgICAgbW9jQnl0ZXNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChtb2MpIHtcclxuICAgICAgICBjdWJpc21Nb2MgPSBuZXcgQ3ViaXNtTW9jKG1vYyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBjdWJpc21Nb2M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNb2Pjg4fjg7zjgr/jgpLliYrpmaRcclxuICAgICAqXHJcbiAgICAgKiBNb2Pjg4fjg7zjgr/jgpLliYrpmaTjgZnjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBkZWxldGUobW9jOiBDdWJpc21Nb2MpOiB2b2lkIHtcclxuICAgICAgbW9jLl9tb2MuX3JlbGVhc2UoKTtcclxuICAgICAgbW9jLl9tb2MgPSBudWxsO1xyXG4gICAgICBtb2MgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oi44OH44Or44KS5L2c5oiQ44GZ44KLXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBNb2Pjg4fjg7zjgr/jgYvjgonkvZzmiJDjgZXjgozjgZ/jg6Ljg4fjg6tcclxuICAgICAqL1xyXG4gICAgY3JlYXRlTW9kZWwoKTogQ3ViaXNtTW9kZWwge1xyXG4gICAgICBsZXQgY3ViaXNtTW9kZWw6IEN1YmlzbU1vZGVsID0gbnVsbDtcclxuXHJcbiAgICAgIGNvbnN0IG1vZGVsOiBMaXZlMkRDdWJpc21Db3JlLk1vZGVsID0gTGl2ZTJEQ3ViaXNtQ29yZS5Nb2RlbC5mcm9tTW9jKFxyXG4gICAgICAgIHRoaXMuX21vY1xyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKG1vZGVsKSB7XHJcbiAgICAgICAgY3ViaXNtTW9kZWwgPSBuZXcgQ3ViaXNtTW9kZWwobW9kZWwpO1xyXG4gICAgICAgIGN1YmlzbU1vZGVsLmluaXRpYWxpemUoKTtcclxuXHJcbiAgICAgICAgKyt0aGlzLl9tb2RlbENvdW50O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gY3ViaXNtTW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg4fjg6vjgpLliYrpmaTjgZnjgotcclxuICAgICAqL1xyXG4gICAgZGVsZXRlTW9kZWwobW9kZWw6IEN1YmlzbU1vZGVsKTogdm9pZCB7XHJcbiAgICAgIGlmIChtb2RlbCAhPSBudWxsKSB7XHJcbiAgICAgICAgbW9kZWwucmVsZWFzZSgpO1xyXG4gICAgICAgIG1vZGVsID0gbnVsbDtcclxuICAgICAgICAtLXRoaXMuX21vZGVsQ291bnQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKG1vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2MpIHtcclxuICAgICAgdGhpcy5fbW9jID0gbW9jO1xyXG4gICAgICB0aGlzLl9tb2RlbENvdW50ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+ebuOW9k+OBruWHpueQhlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVsZWFzZSgpOiB2b2lkIHtcclxuICAgICAgQ1NNX0FTU0VSVCh0aGlzLl9tb2RlbENvdW50ID09IDApO1xyXG5cclxuICAgICAgdGhpcy5fbW9jLl9yZWxlYXNlKCk7XHJcbiAgICAgIHRoaXMuX21vYyA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgX21vYzogTGl2ZTJEQ3ViaXNtQ29yZS5Nb2M7IC8vIE1vY+ODh+ODvOOCv1xyXG4gICAgX21vZGVsQ291bnQ6IG51bWJlcjsgLy8gTW9j44OH44O844K/44GL44KJ5L2c44KJ44KM44Gf44Oi44OH44Or44Gu5YCL5pWwXHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBT0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQU1BO0FBZ0VBO0FBQ0E7QUFDQTtBQUNBO0FBL0RBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUFBO0FBakZBO0FBa0ZBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismmoc.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismmodel.ts":
/*!********************************************!*\
  !*** ./Framework/src/model/cubismmodel.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismrenderer_1 = __webpack_require__(/*! ../rendering/cubismrenderer */ \"./Framework/src/rendering/cubismrenderer.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"./Framework/src/type/csmmap.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismBlendMode = cubismrenderer_1.Live2DCubismFramework.CubismBlendMode;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismModel = (function () {\r\n        function CubismModel(model) {\r\n            this._model = model;\r\n            this._parameterValues = null;\r\n            this._parameterMaximumValues = null;\r\n            this._parameterMinimumValues = null;\r\n            this._partOpacities = null;\r\n            this._savedParameters = new csmVector();\r\n            this._parameterIds = new csmVector();\r\n            this._drawableIds = new csmVector();\r\n            this._partIds = new csmVector();\r\n            this._notExistPartId = new csmMap();\r\n            this._notExistParameterId = new csmMap();\r\n            this._notExistParameterValues = new csmMap();\r\n            this._notExistPartOpacities = new csmMap();\r\n        }\r\n        CubismModel.prototype.update = function () {\r\n            this._model.update();\r\n            this._model.drawables.resetDynamicFlags();\r\n        };\r\n        CubismModel.prototype.getCanvasWidth = function () {\r\n            if (this._model == null) {\r\n                return 0.0;\r\n            }\r\n            return (this._model.canvasinfo.CanvasWidth /\r\n                this._model.canvasinfo.PixelsPerUnit);\r\n        };\r\n        CubismModel.prototype.getCanvasHeight = function () {\r\n            if (this._model == null) {\r\n                return 0.0;\r\n            }\r\n            return (this._model.canvasinfo.CanvasHeight /\r\n                this._model.canvasinfo.PixelsPerUnit);\r\n        };\r\n        CubismModel.prototype.saveParameters = function () {\r\n            var parameterCount = this._model.parameters.count;\r\n            var savedParameterCount = this._savedParameters.getSize();\r\n            for (var i = 0; i < parameterCount; ++i) {\r\n                if (i < savedParameterCount) {\r\n                    this._savedParameters.set(i, this._parameterValues[i]);\r\n                }\r\n                else {\r\n                    this._savedParameters.pushBack(this._parameterValues[i]);\r\n                }\r\n            }\r\n        };\r\n        CubismModel.prototype.getModel = function () {\r\n            return this._model;\r\n        };\r\n        CubismModel.prototype.getPartIndex = function (partId) {\r\n            var partIndex;\r\n            var partCount = this._model.parts.count;\r\n            for (partIndex = 0; partIndex < partCount; ++partIndex) {\r\n                if (partId == this._partIds.at(partIndex)) {\r\n                    return partIndex;\r\n                }\r\n            }\r\n            if (this._notExistPartId.isExist(partId)) {\r\n                return this._notExistPartId.getValue(partId);\r\n            }\r\n            partIndex = partCount + this._notExistPartId.getSize();\r\n            this._notExistPartId.setValue(partId, partIndex);\r\n            this._notExistPartOpacities.appendKey(partIndex);\r\n            return partIndex;\r\n        };\r\n        CubismModel.prototype.getPartCount = function () {\r\n            var partCount = this._model.parts.count;\r\n            return partCount;\r\n        };\r\n        CubismModel.prototype.setPartOpacityByIndex = function (partIndex, opacity) {\r\n            if (this._notExistPartOpacities.isExist(partIndex)) {\r\n                this._notExistPartOpacities.setValue(partIndex, opacity);\r\n                return;\r\n            }\r\n            cubismdebug_1.CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n            this._partOpacities[partIndex] = opacity;\r\n        };\r\n        CubismModel.prototype.setPartOpacityById = function (partId, opacity) {\r\n            var index = this.getPartIndex(partId);\r\n            if (index < 0) {\r\n                return;\r\n            }\r\n            this.setPartOpacityByIndex(index, opacity);\r\n        };\r\n        CubismModel.prototype.getPartOpacityByIndex = function (partIndex) {\r\n            if (this._notExistPartOpacities.isExist(partIndex)) {\r\n                return this._notExistPartOpacities.getValue(partIndex);\r\n            }\r\n            cubismdebug_1.CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n            return this._partOpacities[partIndex];\r\n        };\r\n        CubismModel.prototype.getPartOpacityById = function (partId) {\r\n            var index = this.getPartIndex(partId);\r\n            if (index < 0) {\r\n                return 0;\r\n            }\r\n            return this.getPartOpacityByIndex(index);\r\n        };\r\n        CubismModel.prototype.getParameterIndex = function (parameterId) {\r\n            var parameterIndex;\r\n            var idCount = this._model.parameters.count;\r\n            for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\r\n                if (parameterId != this._parameterIds.at(parameterIndex)) {\r\n                    continue;\r\n                }\r\n                return parameterIndex;\r\n            }\r\n            if (this._notExistParameterId.isExist(parameterId)) {\r\n                return this._notExistParameterId.getValue(parameterId);\r\n            }\r\n            parameterIndex =\r\n                this._model.parameters.count + this._notExistParameterId.getSize();\r\n            this._notExistParameterId.setValue(parameterId, parameterIndex);\r\n            this._notExistParameterValues.appendKey(parameterIndex);\r\n            return parameterIndex;\r\n        };\r\n        CubismModel.prototype.getParameterCount = function () {\r\n            return this._model.parameters.count;\r\n        };\r\n        CubismModel.prototype.getParameterMaximumValue = function (parameterIndex) {\r\n            return this._model.parameters.maximumValues[parameterIndex];\r\n        };\r\n        CubismModel.prototype.getParameterMinimumValue = function (parameterIndex) {\r\n            return this._model.parameters.minimumValues[parameterIndex];\r\n        };\r\n        CubismModel.prototype.getParameterDefaultValue = function (parameterIndex) {\r\n            return this._model.parameters.defaultValues[parameterIndex];\r\n        };\r\n        CubismModel.prototype.getParameterValueByIndex = function (parameterIndex) {\r\n            if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n                return this._notExistParameterValues.getValue(parameterIndex);\r\n            }\r\n            cubismdebug_1.CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\r\n            return this._parameterValues[parameterIndex];\r\n        };\r\n        CubismModel.prototype.getParameterValueById = function (parameterId) {\r\n            var parameterIndex = this.getParameterIndex(parameterId);\r\n            return this.getParameterValueByIndex(parameterIndex);\r\n        };\r\n        CubismModel.prototype.setParameterValueByIndex = function (parameterIndex, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            if (this._notExistParameterValues.isExist(parameterIndex)) {\r\n                this._notExistParameterValues.setValue(parameterIndex, weight == 1\r\n                    ? value\r\n                    : this._notExistParameterValues.getValue(parameterIndex) *\r\n                        (1 - weight) +\r\n                        value * weight);\r\n                return;\r\n            }\r\n            cubismdebug_1.CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\r\n            if (this._model.parameters.maximumValues[parameterIndex] < value) {\r\n                value = this._model.parameters.maximumValues[parameterIndex];\r\n            }\r\n            if (this._model.parameters.minimumValues[parameterIndex] > value) {\r\n                value = this._model.parameters.minimumValues[parameterIndex];\r\n            }\r\n            this._parameterValues[parameterIndex] =\r\n                weight == 1\r\n                    ? value\r\n                    : (this._parameterValues[parameterIndex] =\r\n                        this._parameterValues[parameterIndex] * (1 - weight) +\r\n                            value * weight);\r\n        };\r\n        CubismModel.prototype.setParameterValueById = function (parameterId, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            var index = this.getParameterIndex(parameterId);\r\n            this.setParameterValueByIndex(index, value, weight);\r\n        };\r\n        CubismModel.prototype.addParameterValueByIndex = function (parameterIndex, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);\r\n        };\r\n        CubismModel.prototype.addParameterValueById = function (parameterId, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            var index = this.getParameterIndex(parameterId);\r\n            this.addParameterValueByIndex(index, value, weight);\r\n        };\r\n        CubismModel.prototype.multiplyParameterValueById = function (parameterId, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            var index = this.getParameterIndex(parameterId);\r\n            this.multiplyParameterValueByIndex(index, value, weight);\r\n        };\r\n        CubismModel.prototype.multiplyParameterValueByIndex = function (parameterIndex, value, weight) {\r\n            if (weight === void 0) { weight = 1.0; }\r\n            this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) *\r\n                (1.0 + (value - 1.0) * weight));\r\n        };\r\n        CubismModel.prototype.getDrawableIndex = function (drawableId) {\r\n            var drawableCount = this._model.drawables.count;\r\n            for (var drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {\r\n                if (this._drawableIds.at(drawableIndex) == drawableId) {\r\n                    return drawableIndex;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n        CubismModel.prototype.getDrawableCount = function () {\r\n            var drawableCount = this._model.drawables.count;\r\n            return drawableCount;\r\n        };\r\n        CubismModel.prototype.getDrawableId = function (drawableIndex) {\r\n            var parameterIds = this._model.drawables.ids;\r\n            return CubismFramework.getIdManager().getId(parameterIds[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableRenderOrders = function () {\r\n            var renderOrders = this._model.drawables.renderOrders;\r\n            return renderOrders;\r\n        };\r\n        CubismModel.prototype.getDrawableTextureIndices = function (drawableIndex) {\r\n            var textureIndices = this._model.drawables.textureIndices;\r\n            return textureIndices[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagVertexPositionsDidChange = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableVertexIndexCount = function (drawableIndex) {\r\n            var indexCounts = this._model.drawables.indexCounts;\r\n            return indexCounts[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableVertexCount = function (drawableIndex) {\r\n            var vertexCounts = this._model.drawables.vertexCounts;\r\n            return vertexCounts[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableVertices = function (drawableIndex) {\r\n            return this.getDrawableVertexPositions(drawableIndex);\r\n        };\r\n        CubismModel.prototype.getDrawableVertexIndices = function (drawableIndex) {\r\n            var indicesArray = this._model.drawables.indices;\r\n            return indicesArray[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableVertexPositions = function (drawableIndex) {\r\n            var verticesArray = this._model.drawables\r\n                .vertexPositions;\r\n            return verticesArray[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableVertexUvs = function (drawableIndex) {\r\n            var uvsArray = this._model.drawables.vertexUvs;\r\n            return uvsArray[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableOpacity = function (drawableIndex) {\r\n            var opacities = this._model.drawables.opacities;\r\n            return opacities[drawableIndex];\r\n        };\r\n        CubismModel.prototype.getDrawableCulling = function (drawableIndex) {\r\n            var constantFlags = this._model.drawables.constantFlags;\r\n            return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableBlendMode = function (drawableIndex) {\r\n            var constantFlags = this._model.drawables.constantFlags;\r\n            return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex])\r\n                ? CubismBlendMode.CubismBlendMode_Additive\r\n                : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex])\r\n                    ? CubismBlendMode.CubismBlendMode_Multiplicative\r\n                    : CubismBlendMode.CubismBlendMode_Normal;\r\n        };\r\n        CubismModel.prototype.getDrawableInvertedMaskBit = function (drawableIndex) {\r\n            var constantFlags = this._model.drawables.constantFlags;\r\n            return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableMasks = function () {\r\n            var masks = this._model.drawables.masks;\r\n            return masks;\r\n        };\r\n        CubismModel.prototype.getDrawableMaskCounts = function () {\r\n            var maskCounts = this._model.drawables.maskCounts;\r\n            return maskCounts;\r\n        };\r\n        CubismModel.prototype.isUsingMasking = function () {\r\n            for (var d = 0; d < this._model.drawables.count; ++d) {\r\n                if (this._model.drawables.maskCounts[d] <= 0) {\r\n                    continue;\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagIsVisible = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagVisibilityDidChange = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagOpacityDidChange = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.getDrawableDynamicFlagRenderOrderDidChange = function (drawableIndex) {\r\n            var dynamicFlags = this._model.drawables.dynamicFlags;\r\n            return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);\r\n        };\r\n        CubismModel.prototype.loadParameters = function () {\r\n            var parameterCount = this._model.parameters.count;\r\n            var savedParameterCount = this._savedParameters.getSize();\r\n            if (parameterCount > savedParameterCount) {\r\n                parameterCount = savedParameterCount;\r\n            }\r\n            for (var i = 0; i < parameterCount; ++i) {\r\n                this._parameterValues[i] = this._savedParameters.at(i);\r\n            }\r\n        };\r\n        CubismModel.prototype.initialize = function () {\r\n            cubismdebug_1.CSM_ASSERT(this._model);\r\n            this._parameterValues = this._model.parameters.values;\r\n            this._partOpacities = this._model.parts.opacities;\r\n            this._parameterMaximumValues = this._model.parameters.maximumValues;\r\n            this._parameterMinimumValues = this._model.parameters.minimumValues;\r\n            {\r\n                var parameterIds = this._model.parameters.ids;\r\n                var parameterCount = this._model.parameters.count;\r\n                this._parameterIds.prepareCapacity(parameterCount);\r\n                for (var i = 0; i < parameterCount; ++i) {\r\n                    this._parameterIds.pushBack(CubismFramework.getIdManager().getId(parameterIds[i]));\r\n                }\r\n            }\r\n            {\r\n                var partIds = this._model.parts.ids;\r\n                var partCount = this._model.parts.count;\r\n                this._partIds.prepareCapacity(partCount);\r\n                for (var i = 0; i < partCount; ++i) {\r\n                    this._partIds.pushBack(CubismFramework.getIdManager().getId(partIds[i]));\r\n                }\r\n            }\r\n            {\r\n                var drawableIds = this._model.drawables.ids;\r\n                var drawableCount = this._model.drawables.count;\r\n                this._drawableIds.prepareCapacity(drawableCount);\r\n                for (var i = 0; i < drawableCount; ++i) {\r\n                    this._drawableIds.pushBack(CubismFramework.getIdManager().getId(drawableIds[i]));\r\n                }\r\n            }\r\n        };\r\n        CubismModel.prototype.release = function () {\r\n            this._model.release();\r\n            this._model = null;\r\n        };\r\n        return CubismModel;\r\n    }());\r\n    Live2DCubismFramework.CubismModel = CubismModel;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismmodel.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismmodeluserdata.ts":
/*!****************************************************!*\
  !*** ./Framework/src/model/cubismmodeluserdata.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmodeluserdatajson_1 = __webpack_require__(/*! ./cubismmodeluserdatajson */ \"./Framework/src/model/cubismmodeluserdatajson.ts\");\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar CubismModelUserDataJson = cubismmodeluserdatajson_1.Live2DCubismFramework.CubismModelUserDataJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ArtMesh = 'ArtMesh';\r\n    var CubismModelUserDataNode = (function () {\r\n        function CubismModelUserDataNode() {\r\n        }\r\n        return CubismModelUserDataNode;\r\n    }());\r\n    Live2DCubismFramework.CubismModelUserDataNode = CubismModelUserDataNode;\r\n    var CubismModelUserData = (function () {\r\n        function CubismModelUserData() {\r\n            this._userDataNodes = new csmVector();\r\n            this._artMeshUserDataNode = new csmVector();\r\n        }\r\n        CubismModelUserData.create = function (buffer, size) {\r\n            var ret = new CubismModelUserData();\r\n            ret.parseUserData(buffer, size);\r\n            return ret;\r\n        };\r\n        CubismModelUserData.delete = function (modelUserData) {\r\n            if (modelUserData != null) {\r\n                modelUserData.release();\r\n                modelUserData = null;\r\n            }\r\n        };\r\n        CubismModelUserData.prototype.getArtMeshUserDatas = function () {\r\n            return this._artMeshUserDataNode;\r\n        };\r\n        CubismModelUserData.prototype.parseUserData = function (buffer, size) {\r\n            var json = new CubismModelUserDataJson(buffer, size);\r\n            var typeOfArtMesh = CubismFramework.getIdManager().getId(ArtMesh);\r\n            var nodeCount = json.getUserDataCount();\r\n            for (var i = 0; i < nodeCount; i++) {\r\n                var addNode = new CubismModelUserDataNode();\r\n                addNode.targetId = json.getUserDataId(i);\r\n                addNode.targetType = CubismFramework.getIdManager().getId(json.getUserDataTargetType(i));\r\n                addNode.value = new csmString(json.getUserDataValue(i));\r\n                this._userDataNodes.pushBack(addNode);\r\n                if (addNode.targetType == typeOfArtMesh) {\r\n                    this._artMeshUserDataNode.pushBack(addNode);\r\n                }\r\n            }\r\n            json.release();\r\n            json = void 0;\r\n        };\r\n        CubismModelUserData.prototype.release = function () {\r\n            for (var i = 0; i < this._userDataNodes.getSize(); ++i) {\r\n                this._userDataNodes.set(i, null);\r\n            }\r\n            this._userDataNodes = null;\r\n        };\r\n        return CubismModelUserData;\r\n    }());\r\n    Live2DCubismFramework.CubismModelUserData = CubismModelUserData;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGEudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGEudHM/OTU1MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb2RlbHVzZXJkYXRhanNvbiB9IGZyb20gJy4vY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24nO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21mcmFtZXdvcmsgfSBmcm9tICcuLi9saXZlMmRjdWJpc21mcmFtZXdvcmsnO1xyXG5pbXBvcnQgQ3ViaXNtRnJhbWV3b3JrID0gY3ViaXNtZnJhbWV3b3JrLkN1YmlzbUZyYW1ld29yaztcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5pbXBvcnQgQ3ViaXNtSWRIYW5kbGUgPSBjdWJpc21pZC5DdWJpc21JZEhhbmRsZTtcclxuaW1wb3J0IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gY3ViaXNtbW9kZWx1c2VyZGF0YWpzb24uQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb247XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgY29uc3QgQXJ0TWVzaCA9ICdBcnRNZXNoJztcclxuXHJcbiAgLyoqXHJcbiAgICog44Om44O844K244O844OH44O844K/44Kk44Oz44K/44O844OV44Kn44O844K5XHJcbiAgICpcclxuICAgKiBKc29u44GL44KJ6Kqt44G/6L6844KT44Gg44Om44O844K244O844OH44O844K/44KS6KiY6Yyy44GX44Gm44GK44GP44Gf44KB44Gu5qeL6YCg5L2TXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlIHtcclxuICAgIHRhcmdldFR5cGU6IEN1YmlzbUlkSGFuZGxlOyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgr/jg7zjgrLjg4Pjg4jjgr/jgqTjg5dcclxuICAgIHRhcmdldElkOiBDdWJpc21JZEhhbmRsZTsgLy8g44Om44O844K244O844OH44O844K/44K/44O844Ky44OD44OI44GuSURcclxuICAgIHZhbHVlOiBjc21TdHJpbmc7IC8vIOODpuODvOOCtuODvOODh+ODvOOCv1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Om44O844K244OH44O844K/44Gu566h55CG44Kv44Op44K5XHJcbiAgICpcclxuICAgKiDjg6bjg7zjgrbjg4fjg7zjgr/jgpLjg63jg7zjg4njgIHnrqHnkIbjgIHmpJzntKLjgqTjg7Pjgr/jg7zjg5XjgqfjgqTjgrnjgIHop6PmlL7jgb7jgafjgpLooYzjgYbjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YSB7XHJcbiAgICAvKipcclxuICAgICAqIOOCpOODs+OCueOCv+ODs+OCueOBruS9nOaIkFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgKiBAcmV0dXJuIOS9nOaIkOOBleOCjOOBn+OCpOODs+OCueOCv+ODs+OCuVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShcclxuICAgICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcclxuICAgICAgc2l6ZTogbnVtYmVyXHJcbiAgICApOiBDdWJpc21Nb2RlbFVzZXJEYXRhIHtcclxuICAgICAgY29uc3QgcmV0OiBDdWJpc21Nb2RlbFVzZXJEYXRhID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGEoKTtcclxuXHJcbiAgICAgIHJldC5wYXJzZVVzZXJEYXRhKGJ1ZmZlciwgc2l6ZSk7XHJcblxyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Kk44Oz44K544K/44Oz44K544KS56C05qOE44GZ44KLXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG1vZGVsVXNlckRhdGEg56C05qOE44GZ44KL44Kk44Oz44K544K/44Oz44K5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgZGVsZXRlKG1vZGVsVXNlckRhdGE6IEN1YmlzbU1vZGVsVXNlckRhdGEpOiB2b2lkIHtcclxuICAgICAgaWYgKG1vZGVsVXNlckRhdGEgIT0gbnVsbCkge1xyXG4gICAgICAgIG1vZGVsVXNlckRhdGEucmVsZWFzZSgpO1xyXG4gICAgICAgIG1vZGVsVXNlckRhdGEgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcnRNZXNo44Gu44Om44O844K244O844OH44O844K/44Gu44Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jg6rjgrnjg4hcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEFydE1lc2hVc2VyRGF0YXMoKTogY3NtVmVjdG9yPEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlPiB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdXNlcmRhdGEzLmpzb27jga7jg5Hjg7zjgrlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYnVmZmVyICAgIHVzZXJkYXRhMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICAgIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFyc2VVc2VyRGF0YShidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgbGV0IGpzb246IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFKc29uKFxyXG4gICAgICAgIGJ1ZmZlcixcclxuICAgICAgICBzaXplXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCB0eXBlT2ZBcnRNZXNoID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKEFydE1lc2gpO1xyXG4gICAgICBjb25zdCBub2RlQ291bnQ6IG51bWJlciA9IGpzb24uZ2V0VXNlckRhdGFDb3VudCgpO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGFkZE5vZGU6IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlID0gbmV3IEN1YmlzbU1vZGVsVXNlckRhdGFOb2RlKCk7XHJcblxyXG4gICAgICAgIGFkZE5vZGUudGFyZ2V0SWQgPSBqc29uLmdldFVzZXJEYXRhSWQoaSk7XHJcbiAgICAgICAgYWRkTm9kZS50YXJnZXRUeXBlID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxyXG4gICAgICAgICAganNvbi5nZXRVc2VyRGF0YVRhcmdldFR5cGUoaSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGFkZE5vZGUudmFsdWUgPSBuZXcgY3NtU3RyaW5nKGpzb24uZ2V0VXNlckRhdGFWYWx1ZShpKSk7XHJcbiAgICAgICAgdGhpcy5fdXNlckRhdGFOb2Rlcy5wdXNoQmFjayhhZGROb2RlKTtcclxuXHJcbiAgICAgICAgaWYgKGFkZE5vZGUudGFyZ2V0VHlwZSA9PSB0eXBlT2ZBcnRNZXNoKSB7XHJcbiAgICAgICAgICB0aGlzLl9hcnRNZXNoVXNlckRhdGFOb2RlLnB1c2hCYWNrKGFkZE5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAganNvbi5yZWxlYXNlKCk7XHJcbiAgICAgIGpzb24gPSB2b2lkIDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT4oKTtcclxuICAgICAgdGhpcy5fYXJ0TWVzaFVzZXJEYXRhTm9kZSA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAqXHJcbiAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/mp4vpgKDkvZPphY3liJfjgpLop6PmlL7jgZnjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdXNlckRhdGFOb2Rlcy5nZXRTaXplKCk7ICsraSkge1xyXG4gICAgICAgIHRoaXMuX3VzZXJEYXRhTm9kZXMuc2V0KGksIG51bGwpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl91c2VyRGF0YU5vZGVzID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91c2VyRGF0YU5vZGVzOiBjc21WZWN0b3I8Q3ViaXNtTW9kZWxVc2VyRGF0YU5vZGU+OyAvLyDjg6bjg7zjgrbjg7zjg4fjg7zjgr/mp4vpgKDkvZPphY3liJdcclxuICAgIHByaXZhdGUgX2FydE1lc2hVc2VyRGF0YU5vZGU6IGNzbVZlY3RvcjxDdWJpc21Nb2RlbFVzZXJEYXRhTm9kZT47IC8vIOmWsuimp+ODquOCueODiOOBruS/neaMgVxyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7OztBQU9BO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFPQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBSkE7QUFXQTtBQTZFQTtBQUNBO0FBQ0E7QUFDQTtBQXhFQTtBQUlBO0FBRUE7QUFFQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQWVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBQUE7QUFqR0E7QUFrR0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismmodeluserdata.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismmodeluserdatajson.ts":
/*!********************************************************!*\
  !*** ./Framework/src/model/cubismmodeluserdatajson.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Meta = 'Meta';\r\n    var UserDataCount = 'UserDataCount';\r\n    var TotalUserDataSize = 'TotalUserDataSize';\r\n    var UserData = 'UserData';\r\n    var Target = 'Target';\r\n    var Id = 'Id';\r\n    var Value = 'Value';\r\n    var CubismModelUserDataJson = (function () {\r\n        function CubismModelUserDataJson(buffer, size) {\r\n            this._json = CubismJson.create(buffer, size);\r\n        }\r\n        CubismModelUserDataJson.prototype.release = function () {\r\n            CubismJson.delete(this._json);\r\n        };\r\n        CubismModelUserDataJson.prototype.getUserDataCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(UserDataCount)\r\n                .toInt();\r\n        };\r\n        CubismModelUserDataJson.prototype.getTotalUserDataSize = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalUserDataSize)\r\n                .toInt();\r\n        };\r\n        CubismModelUserDataJson.prototype.getUserDataTargetType = function (i) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(i)\r\n                .getValueByString(Target)\r\n                .getRawString();\r\n        };\r\n        CubismModelUserDataJson.prototype.getUserDataId = function (i) {\r\n            return CubismFramework.getIdManager().getId(this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(i)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismModelUserDataJson.prototype.getUserDataValue = function (i) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(i)\r\n                .getValueByString(Value)\r\n                .getRawString();\r\n        };\r\n        return CubismModelUserDataJson;\r\n    }());\r\n    Live2DCubismFramework.CubismModelUserDataJson = CubismModelUserDataJson;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbW1vZGVsdXNlcmRhdGFqc29uLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tb2RlbC9jdWJpc21tb2RlbHVzZXJkYXRhanNvbi50cz82MWE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWpzb24gfSBmcm9tICcuLi91dGlscy9jdWJpc21qc29uJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbWlkIH0gZnJvbSAnLi4vaWQvY3ViaXNtaWQnO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XHJcbmltcG9ydCBDdWJpc21JZEhhbmRsZSA9IGN1YmlzbWlkLkN1YmlzbUlkSGFuZGxlO1xyXG5pbXBvcnQgQ3ViaXNtSnNvbiA9IGN1YmlzbWpzb24uQ3ViaXNtSnNvbjtcclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICBjb25zdCBNZXRhID0gJ01ldGEnO1xyXG4gIGNvbnN0IFVzZXJEYXRhQ291bnQgPSAnVXNlckRhdGFDb3VudCc7XHJcbiAgY29uc3QgVG90YWxVc2VyRGF0YVNpemUgPSAnVG90YWxVc2VyRGF0YVNpemUnO1xyXG4gIGNvbnN0IFVzZXJEYXRhID0gJ1VzZXJEYXRhJztcclxuICBjb25zdCBUYXJnZXQgPSAnVGFyZ2V0JztcclxuICBjb25zdCBJZCA9ICdJZCc7XHJcbiAgY29uc3QgVmFsdWUgPSAnVmFsdWUnO1xyXG5cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW9kZWxVc2VyRGF0YUpzb24ge1xyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqIEBwYXJhbSBidWZmZXIgICAgdXNlcmRhdGEzLmpzb27jgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgICAqIEBwYXJhbSBzaXplICAgICAg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihidWZmZXI6IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy5fanNvbiA9IEN1YmlzbUpzb24uY3JlYXRlKGJ1ZmZlciwgc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg4fjgrnjg4jjg6njgq/jgr/nm7jlvZPjga7lh6bnkIZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbGVhc2UoKTogdm9pZCB7XHJcbiAgICAgIEN1YmlzbUpzb24uZGVsZXRlKHRoaXMuX2pzb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Om44O844K244O844OH44O844K/5YCL5pWw44Gu5Y+W5b6XXHJcbiAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+OBruWAi+aVsFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VXNlckRhdGFDb3VudCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAgIC5nZXRSb290KClcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhNZXRhKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFVzZXJEYXRhQ291bnQpXHJcbiAgICAgICAgLnRvSW50KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/nt4/mloflrZfliJfmlbDjga7lj5blvpdcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv+e3j+aWh+Wtl+WIl+aVsFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VG90YWxVc2VyRGF0YVNpemUoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoTWV0YSlcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhUb3RhbFVzZXJEYXRhU2l6ZSlcclxuICAgICAgICAudG9JbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODpuODvOOCtuODvOODh+ODvOOCv+OBruOCv+OCpOODl+OBruWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4g44Om44O844K244O844OH44O844K/44Gu44K/44Kk44OXXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVc2VyRGF0YVRhcmdldFR5cGUoaTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2pzb25cclxuICAgICAgICAuZ2V0Um9vdCgpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXHJcbiAgICAgICAgLmdldFZhbHVlQnlJbmRleChpKVxyXG4gICAgICAgIC5nZXRWYWx1ZUJ5U3RyaW5nKFRhcmdldClcclxuICAgICAgICAuZ2V0UmF3U3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jga7jgr/jg7zjgrLjg4Pjg4hJROOBruWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpIOOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgICogQHJldHVybiDjg6bjg7zjgrbjg7zjg4fjg7zjgr/jgr/jg7zjgrLjg4Pjg4hJRFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VXNlckRhdGFJZChpOiBudW1iZXIpOiBDdWJpc21JZEhhbmRsZSB7XHJcbiAgICAgIHJldHVybiBDdWJpc21GcmFtZXdvcmsuZ2V0SWRNYW5hZ2VyKCkuZ2V0SWQoXHJcbiAgICAgICAgdGhpcy5fanNvblxyXG4gICAgICAgICAgLmdldFJvb3QoKVxyXG4gICAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVXNlckRhdGEpXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXHJcbiAgICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhJZClcclxuICAgICAgICAgIC5nZXRSYXdTdHJpbmcoKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Om44O844K244O844OH44O844K/44Gu5paH5a2X5YiX44Gu5Y+W5b6XXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGkg44Kk44Oz44OH44OD44Kv44K5XHJcbiAgICAgKiBAcmV0dXJuIOODpuODvOOCtuODvOODh+ODvOOCv1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VXNlckRhdGFWYWx1ZShpOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICByZXR1cm4gdGhpcy5fanNvblxyXG4gICAgICAgIC5nZXRSb290KClcclxuICAgICAgICAuZ2V0VmFsdWVCeVN0cmluZyhVc2VyRGF0YSlcclxuICAgICAgICAuZ2V0VmFsdWVCeUluZGV4KGkpXHJcbiAgICAgICAgLmdldFZhbHVlQnlTdHJpbmcoVmFsdWUpXHJcbiAgICAgICAgLmdldFJhd1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2pzb246IEN1YmlzbUpzb247XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBT0E7QUFFQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQU1BO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBekZBO0FBMEZBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismmodeluserdatajson.ts\n");

/***/ }),

/***/ "./Framework/src/model/cubismusermodel.ts":
/*!************************************************!*\
  !*** ./Framework/src/model/cubismusermodel.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar cubismmotionmanager_1 = __webpack_require__(/*! ../motion/cubismmotionmanager */ \"./Framework/src/motion/cubismmotionmanager.ts\");\r\nvar cubismtargetpoint_1 = __webpack_require__(/*! ../math/cubismtargetpoint */ \"./Framework/src/math/cubismtargetpoint.ts\");\r\nvar cubismmodelmatrix_1 = __webpack_require__(/*! ../math/cubismmodelmatrix */ \"./Framework/src/math/cubismmodelmatrix.ts\");\r\nvar cubismmoc_1 = __webpack_require__(/*! ./cubismmoc */ \"./Framework/src/model/cubismmoc.ts\");\r\nvar cubismmotion_1 = __webpack_require__(/*! ../motion/cubismmotion */ \"./Framework/src/motion/cubismmotion.ts\");\r\nvar cubismexpressionmotion_1 = __webpack_require__(/*! ../motion/cubismexpressionmotion */ \"./Framework/src/motion/cubismexpressionmotion.ts\");\r\nvar cubismpose_1 = __webpack_require__(/*! ../effect/cubismpose */ \"./Framework/src/effect/cubismpose.ts\");\r\nvar cubismmodeluserdata_1 = __webpack_require__(/*! ./cubismmodeluserdata */ \"./Framework/src/model/cubismmodeluserdata.ts\");\r\nvar cubismphysics_1 = __webpack_require__(/*! ../physics/cubismphysics */ \"./Framework/src/physics/cubismphysics.ts\");\r\nvar cubismbreath_1 = __webpack_require__(/*! ../effect/cubismbreath */ \"./Framework/src/effect/cubismbreath.ts\");\r\nvar cubismeyeblink_1 = __webpack_require__(/*! ../effect/cubismeyeblink */ \"./Framework/src/effect/cubismeyeblink.ts\");\r\nvar cubismrenderer_webgl_1 = __webpack_require__(/*! ../rendering/cubismrenderer_webgl */ \"./Framework/src/rendering/cubismrenderer_webgl.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar CubismRenderer_WebGL = cubismrenderer_webgl_1.Live2DCubismFramework.CubismRenderer_WebGL;\r\nvar CubismEyeBlink = cubismeyeblink_1.Live2DCubismFramework.CubismEyeBlink;\r\nvar CubismBreath = cubismbreath_1.Live2DCubismFramework.CubismBreath;\r\nvar Constant = live2dcubismframework_1.Live2DCubismFramework.Constant;\r\nvar CubismPhysics = cubismphysics_1.Live2DCubismFramework.CubismPhysics;\r\nvar CubismModelUserData = cubismmodeluserdata_1.Live2DCubismFramework.CubismModelUserData;\r\nvar CubismPose = cubismpose_1.Live2DCubismFramework.CubismPose;\r\nvar CubismExpressionMotion = cubismexpressionmotion_1.Live2DCubismFramework.CubismExpressionMotion;\r\nvar CubismMotion = cubismmotion_1.Live2DCubismFramework.CubismMotion;\r\nvar CubismMoc = cubismmoc_1.Live2DCubismFramework.CubismMoc;\r\nvar CubismModelMatrix = cubismmodelmatrix_1.Live2DCubismFramework.CubismModelMatrix;\r\nvar CubismTargetPoint = cubismtargetpoint_1.Live2DCubismFramework.CubismTargetPoint;\r\nvar CubismMotionManager = cubismmotionmanager_1.Live2DCubismFramework.CubismMotionManager;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismUserModel = (function () {\r\n        function CubismUserModel() {\r\n            this.loadMotion = function (buffer, size, name, onFinishedMotionHandler) { return CubismMotion.create(buffer, size, onFinishedMotionHandler); };\r\n            this._moc = null;\r\n            this._model = null;\r\n            this._motionManager = null;\r\n            this._expressionManager = null;\r\n            this._eyeBlink = null;\r\n            this._breath = null;\r\n            this._modelMatrix = null;\r\n            this._pose = null;\r\n            this._dragManager = null;\r\n            this._physics = null;\r\n            this._modelUserData = null;\r\n            this._initialized = false;\r\n            this._updating = false;\r\n            this._opacity = 1.0;\r\n            this._lipsync = true;\r\n            this._lastLipSyncValue = 0.0;\r\n            this._dragX = 0.0;\r\n            this._dragY = 0.0;\r\n            this._accelerationX = 0.0;\r\n            this._accelerationY = 0.0;\r\n            this._accelerationZ = 0.0;\r\n            this._debugMode = false;\r\n            this._renderer = null;\r\n            this._motionManager = new CubismMotionManager();\r\n            this._motionManager.setEventCallback(CubismUserModel.cubismDefaultMotionEventCallback, this);\r\n            this._expressionManager = new CubismMotionManager();\r\n            this._dragManager = new CubismTargetPoint();\r\n        }\r\n        CubismUserModel.prototype.isInitialized = function () {\r\n            return this._initialized;\r\n        };\r\n        CubismUserModel.prototype.setInitialized = function (v) {\r\n            this._initialized = v;\r\n        };\r\n        CubismUserModel.prototype.isUpdating = function () {\r\n            return this._updating;\r\n        };\r\n        CubismUserModel.prototype.setUpdating = function (v) {\r\n            this._updating = v;\r\n        };\r\n        CubismUserModel.prototype.setDragging = function (x, y) {\r\n            this._dragManager.set(x, y);\r\n        };\r\n        CubismUserModel.prototype.setAcceleration = function (x, y, z) {\r\n            this._accelerationX = x;\r\n            this._accelerationY = y;\r\n            this._accelerationZ = z;\r\n        };\r\n        CubismUserModel.prototype.getModelMatrix = function () {\r\n            return this._modelMatrix;\r\n        };\r\n        CubismUserModel.prototype.setOpacity = function (a) {\r\n            this._opacity = a;\r\n        };\r\n        CubismUserModel.prototype.getOpacity = function () {\r\n            return this._opacity;\r\n        };\r\n        CubismUserModel.prototype.loadModel = function (buffer) {\r\n            this._moc = CubismMoc.create(buffer);\r\n            this._model = this._moc.createModel();\r\n            this._model.saveParameters();\r\n            if (this._moc == null || this._model == null) {\r\n                cubismdebug_1.CubismLogError('Failed to CreateModel().');\r\n                return;\r\n            }\r\n            this._modelMatrix = new CubismModelMatrix(this._model.getCanvasWidth(), this._model.getCanvasHeight());\r\n        };\r\n        CubismUserModel.prototype.loadExpression = function (buffer, size, name) {\r\n            return CubismExpressionMotion.create(buffer, size);\r\n        };\r\n        CubismUserModel.prototype.loadPose = function (buffer, size) {\r\n            this._pose = CubismPose.create(buffer, size);\r\n        };\r\n        CubismUserModel.prototype.loadUserData = function (buffer, size) {\r\n            this._modelUserData = CubismModelUserData.create(buffer, size);\r\n        };\r\n        CubismUserModel.prototype.loadPhysics = function (buffer, size) {\r\n            this._physics = CubismPhysics.create(buffer, size);\r\n        };\r\n        CubismUserModel.prototype.isHit = function (drawableId, pointX, pointY) {\r\n            var drawIndex = this._model.getDrawableIndex(drawableId);\r\n            if (drawIndex < 0) {\r\n                return false;\r\n            }\r\n            var count = this._model.getDrawableVertexCount(drawIndex);\r\n            var vertices = this._model.getDrawableVertices(drawIndex);\r\n            var left = vertices[0];\r\n            var right = vertices[0];\r\n            var top = vertices[1];\r\n            var bottom = vertices[1];\r\n            for (var j = 1; j < count; ++j) {\r\n                var x = vertices[Constant.vertexOffset + j * Constant.vertexStep];\r\n                var y = vertices[Constant.vertexOffset + j * Constant.vertexStep + 1];\r\n                if (x < left) {\r\n                    left = x;\r\n                }\r\n                if (x > right) {\r\n                    right = x;\r\n                }\r\n                if (y < top) {\r\n                    top = y;\r\n                }\r\n                if (y > bottom) {\r\n                    bottom = y;\r\n                }\r\n            }\r\n            var tx = this._modelMatrix.invertTransformX(pointX);\r\n            var ty = this._modelMatrix.invertTransformY(pointY);\r\n            return left <= tx && tx <= right && top <= ty && ty <= bottom;\r\n        };\r\n        CubismUserModel.prototype.getModel = function () {\r\n            return this._model;\r\n        };\r\n        CubismUserModel.prototype.getRenderer = function () {\r\n            return this._renderer;\r\n        };\r\n        CubismUserModel.prototype.createRenderer = function () {\r\n            if (this._renderer) {\r\n                this.deleteRenderer();\r\n            }\r\n            this._renderer = new CubismRenderer_WebGL();\r\n            this._renderer.initialize(this._model);\r\n        };\r\n        CubismUserModel.prototype.deleteRenderer = function () {\r\n            if (this._renderer != null) {\r\n                this._renderer.release();\r\n                this._renderer = null;\r\n            }\r\n        };\r\n        CubismUserModel.prototype.motionEventFired = function (eventValue) {\r\n            cubismdebug_1.CubismLogInfo('{0}', eventValue.s);\r\n        };\r\n        CubismUserModel.cubismDefaultMotionEventCallback = function (caller, eventValue, customData) {\r\n            var model = customData;\r\n            if (model != null) {\r\n                model.motionEventFired(eventValue);\r\n            }\r\n        };\r\n        CubismUserModel.prototype.release = function () {\r\n            if (this._motionManager != null) {\r\n                this._motionManager.release();\r\n                this._motionManager = null;\r\n            }\r\n            if (this._expressionManager != null) {\r\n                this._expressionManager.release();\r\n                this._expressionManager = null;\r\n            }\r\n            if (this._moc != null) {\r\n                this._moc.deleteModel(this._model);\r\n                this._moc.release();\r\n                this._moc = null;\r\n            }\r\n            this._modelMatrix = null;\r\n            CubismPose.delete(this._pose);\r\n            CubismEyeBlink.delete(this._eyeBlink);\r\n            CubismBreath.delete(this._breath);\r\n            this._dragManager = null;\r\n            CubismPhysics.delete(this._physics);\r\n            CubismModelUserData.delete(this._modelUserData);\r\n            this.deleteRenderer();\r\n        };\r\n        return CubismUserModel;\r\n    }());\r\n    Live2DCubismFramework.CubismUserModel = CubismUserModel;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vZGVsL2N1YmlzbXVzZXJtb2RlbC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvbW9kZWwvY3ViaXNtdXNlcm1vZGVsLnRzPzIwOWYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbm1hbmFnZXIgfSBmcm9tICcuLi9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlcic7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc210YXJnZXRwb2ludCB9IGZyb20gJy4uL21hdGgvY3ViaXNtdGFyZ2V0cG9pbnQnO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWxtYXRyaXggfSBmcm9tICcuLi9tYXRoL2N1YmlzbW1vZGVsbWF0cml4JztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vYyB9IGZyb20gJy4vY3ViaXNtbW9jJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi4vbW90aW9uL2FjdWJpc21tb3Rpb24nO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW90aW9uIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbW1vdGlvbic7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21leHByZXNzaW9ubW90aW9uIH0gZnJvbSAnLi4vbW90aW9uL2N1YmlzbWV4cHJlc3Npb25tb3Rpb24nO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcG9zZSB9IGZyb20gJy4uL2VmZmVjdC9jdWJpc21wb3NlJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsdXNlcmRhdGEgfSBmcm9tICcuL2N1YmlzbW1vZGVsdXNlcmRhdGEnO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtcGh5c2ljcyB9IGZyb20gJy4uL3BoeXNpY3MvY3ViaXNtcGh5c2ljcyc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlciB9IGZyb20gJy4uL21vdGlvbi9jdWJpc21tb3Rpb25xdWV1ZW1hbmFnZXInO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtYnJlYXRoIH0gZnJvbSAnLi4vZWZmZWN0L2N1YmlzbWJyZWF0aCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21leWVibGluayB9IGZyb20gJy4uL2VmZmVjdC9jdWJpc21leWVibGluayc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21yZW5kZXJlcl93ZWJnbCB9IGZyb20gJy4uL3JlbmRlcmluZy9jdWJpc21yZW5kZXJlcl93ZWJnbCc7XHJcbmltcG9ydCB7IEN1YmlzbUxvZ0Vycm9yLCBDdWJpc21Mb2dJbmZvIH0gZnJvbSAnLi4vdXRpbHMvY3ViaXNtZGVidWcnO1xyXG5pbXBvcnQgQ3ViaXNtUmVuZGVyZXJfV2ViR0wgPSBjdWJpc21yZW5kZXJlcl93ZWJnbC5DdWJpc21SZW5kZXJlcl9XZWJHTDtcclxuaW1wb3J0IEN1YmlzbUV5ZUJsaW5rID0gY3ViaXNtZXllYmxpbmsuQ3ViaXNtRXllQmxpbms7XHJcbmltcG9ydCBDdWJpc21CcmVhdGggPSBjdWJpc21icmVhdGguQ3ViaXNtQnJlYXRoO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyID0gY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyLkN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcjtcclxuaW1wb3J0IGNzbVN0cmluZyA9IGNzbXN0cmluZy5jc21TdHJpbmc7XHJcbmltcG9ydCBDb25zdGFudCA9IGN1YmlzbWZyYW1ld29yay5Db25zdGFudDtcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21QaHlzaWNzID0gY3ViaXNtcGh5c2ljcy5DdWJpc21QaHlzaWNzO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWxVc2VyRGF0YSA9IGN1YmlzbW1vZGVsdXNlcmRhdGEuQ3ViaXNtTW9kZWxVc2VyRGF0YTtcclxuaW1wb3J0IEN1YmlzbVBvc2UgPSBjdWJpc21wb3NlLkN1YmlzbVBvc2U7XHJcbmltcG9ydCBDdWJpc21FeHByZXNzaW9uTW90aW9uID0gY3ViaXNtZXhwcmVzc2lvbm1vdGlvbi5DdWJpc21FeHByZXNzaW9uTW90aW9uO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uID0gY3ViaXNtbW90aW9uLkN1YmlzbU1vdGlvbjtcclxuaW1wb3J0IEFDdWJpc21Nb3Rpb24gPSBhY3ViaXNtbW90aW9uLkFDdWJpc21Nb3Rpb247XHJcbmltcG9ydCBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrID0gYWN1YmlzbW1vdGlvbi5GaW5pc2hlZE1vdGlvbkNhbGxiYWNrO1xyXG5pbXBvcnQgQ3ViaXNtTW9kZWwgPSBjdWJpc21tb2RlbC5DdWJpc21Nb2RlbDtcclxuaW1wb3J0IEN1YmlzbU1vYyA9IGN1YmlzbW1vYy5DdWJpc21Nb2M7XHJcbmltcG9ydCBDdWJpc21Nb2RlbE1hdHJpeCA9IGN1YmlzbW1vZGVsbWF0cml4LkN1YmlzbU1vZGVsTWF0cml4O1xyXG5pbXBvcnQgQ3ViaXNtVGFyZ2V0UG9pbnQgPSBjdWJpc210YXJnZXRwb2ludC5DdWJpc21UYXJnZXRQb2ludDtcclxuaW1wb3J0IEN1YmlzbU1vdGlvbk1hbmFnZXIgPSBjdWJpc21tb3Rpb25tYW5hZ2VyLkN1YmlzbU1vdGlvbk1hbmFnZXI7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLyoqXHJcbiAgICog44Om44O844K244O844GM5a6f6Zqb44Gr5L2/55So44GZ44KL44Oi44OH44OrXHJcbiAgICpcclxuICAgKiDjg6bjg7zjgrbjg7zjgYzlrp/pmpvjgavkvb/nlKjjgZnjgovjg6Ljg4fjg6vjga7ln7rlupXjgq/jg6njgrnjgILjgZPjgozjgpLntpnmib/jgZfjgabjg6bjg7zjgrbjg7zjgYzlrp/oo4XjgZnjgovjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtVXNlck1vZGVsIHtcclxuICAgIC8qKlxyXG4gICAgICog5Yid5pyf5YyW54q25oWL44Gu5Y+W5b6XXHJcbiAgICAgKlxyXG4gICAgICog5Yid5pyf5YyW44GV44KM44Gm44GE44KL54q25oWL44GL77yfXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB0cnVlICAgICDliJ3mnJ/ljJbjgZXjgozjgabjgYTjgotcclxuICAgICAqIEByZXR1cm4gZmFsc2UgICAg5Yid5pyf5YyW44GV44KM44Gm44GE44Gq44GEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0luaXRpYWxpemVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5faW5pdGlhbGl6ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliJ3mnJ/ljJbnirbmhYvjga7oqK3lrppcclxuICAgICAqXHJcbiAgICAgKiDliJ3mnJ/ljJbnirbmhYvjgpLoqK3lrprjgZnjgovjgIJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdiDliJ3mnJ/ljJbnirbmhYtcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldEluaXRpYWxpemVkKHY6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB2O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pu05paw54q25oWL44Gu5Y+W5b6XXHJcbiAgICAgKlxyXG4gICAgICog5pu05paw44GV44KM44Gm44GE44KL54q25oWL44GL77yfXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB0cnVlICAgICDmm7TmlrDjgZXjgozjgabjgYTjgotcclxuICAgICAqIEByZXR1cm4gZmFsc2UgICAg5pu05paw44GV44KM44Gm44GE44Gq44GEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc1VwZGF0aW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5fdXBkYXRpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7TmlrDnirbmhYvjga7oqK3lrppcclxuICAgICAqXHJcbiAgICAgKiDmm7TmlrDnirbmhYvjgpLoqK3lrprjgZnjgotcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdiDmm7TmlrDnirbmhYtcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFVwZGF0aW5nKHY6IGJvb2xlYW4pOiB2b2lkIHtcclxuICAgICAgdGhpcy5fdXBkYXRpbmcgPSB2O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oe44Km44K544OJ44Op44OD44Kw5oOF5aCx44Gu6Kit5a6aXHJcbiAgICAgKiBAcGFyYW0g44OJ44Op44OD44Kw44GX44Gm44GE44KL44Kr44O844K944Or44GuWOS9jee9rlxyXG4gICAgICogQHBhcmFtIOODieODqeODg+OCsOOBl+OBpuOBhOOCi+OCq+ODvOOCveODq+OBrlnkvY3nva5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldERyYWdnaW5nKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX2RyYWdNYW5hZ2VyLnNldCh4LCB5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWKoOmAn+W6puOBruaDheWgseOCkuioreWumuOBmeOCi1xyXG4gICAgICogQHBhcmFtIHggWOi7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAgICogQHBhcmFtIHkgWei7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAgICogQHBhcmFtIHogWui7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QWNjZWxlcmF0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgdGhpcy5fYWNjZWxlcmF0aW9uWCA9IHg7XHJcbiAgICAgIHRoaXMuX2FjY2VsZXJhdGlvblkgPSB5O1xyXG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25aID0gejtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODh+ODq+ihjOWIl+OCkuWPluW+l+OBmeOCi1xyXG4gICAgICogQHJldHVybiDjg6Ljg4fjg6vooYzliJdcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldE1vZGVsTWF0cml4KCk6IEN1YmlzbU1vZGVsTWF0cml4IHtcclxuICAgICAgcmV0dXJuIHRoaXMuX21vZGVsTWF0cml4O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiN6YCP5piO5bqm44Gu6Kit5a6aXHJcbiAgICAgKiBAcGFyYW0gYSDkuI3pgI/mmI7luqZcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldE9wYWNpdHkoYTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX29wYWNpdHkgPSBhO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiN6YCP5piO5bqm44Gu5Y+W5b6XXHJcbiAgICAgKiBAcmV0dXJuIOS4jemAj+aYjuW6plxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0T3BhY2l0eSgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5fb3BhY2l0eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODh+ODq+ODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBidWZmZXIgICAgbW9jM+ODleOCoeOCpOODq+OBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbG9hZE1vZGVsKGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHtcclxuICAgICAgdGhpcy5fbW9jID0gQ3ViaXNtTW9jLmNyZWF0ZShidWZmZXIpO1xyXG4gICAgICB0aGlzLl9tb2RlbCA9IHRoaXMuX21vYy5jcmVhdGVNb2RlbCgpO1xyXG4gICAgICB0aGlzLl9tb2RlbC5zYXZlUGFyYW1ldGVycygpO1xyXG5cclxuICAgICAgaWYgKHRoaXMuX21vYyA9PSBudWxsIHx8IHRoaXMuX21vZGVsID09IG51bGwpIHtcclxuICAgICAgICBDdWJpc21Mb2dFcnJvcignRmFpbGVkIHRvIENyZWF0ZU1vZGVsKCkuJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG5ldyBDdWJpc21Nb2RlbE1hdHJpeChcclxuICAgICAgICB0aGlzLl9tb2RlbC5nZXRDYW52YXNXaWR0aCgpLFxyXG4gICAgICAgIHRoaXMuX21vZGVsLmdldENhbnZhc0hlaWdodCgpXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcclxuICAgICAqIEBwYXJhbSBidWZmZXIgbW90aW9uMy5qc29u44OV44Kh44Kk44Or44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAqIEBwYXJhbSBuYW1lIOODouODvOOCt+ODp+ODs+OBruWQjeWJjVxyXG4gICAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOODouODvOOCt+ODp+ODs+WGjeeUn+e1guS6huaZguOBq+WRvOOBs+WHuuOBleOCjOOCi+OCs+ODvOODq+ODkOODg+OCr+mWouaVsFxyXG4gICAgICogQHJldHVybiDjg6Ljg7zjgrfjg6fjg7Pjgq/jg6njgrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGxvYWRNb3Rpb24gPSAoXHJcbiAgICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXHJcbiAgICAgIHNpemU6IG51bWJlcixcclxuICAgICAgbmFtZTogc3RyaW5nLFxyXG4gICAgICBvbkZpbmlzaGVkTW90aW9uSGFuZGxlcj86IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2tcclxuICAgICkgPT4gQ3ViaXNtTW90aW9uLmNyZWF0ZShidWZmZXIsIHNpemUsIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOihqOaDheODh+ODvOOCv+OBruiqreOBv+i+vOOBv1xyXG4gICAgICogQHBhcmFtIGJ1ZmZlciBleHDjg5XjgqHjgqTjg6vjgYzoqq3jgb/ovrzjgb7jgozjgabjgYTjgovjg5Djg4Pjg5XjgqFcclxuICAgICAqIEBwYXJhbSBzaXplIOODkOODg+ODleOCoeOBruOCteOCpOOCulxyXG4gICAgICogQHBhcmFtIG5hbWUg6KGo5oOF44Gu5ZCN5YmNXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBsb2FkRXhwcmVzc2lvbihcclxuICAgICAgYnVmZmVyOiBBcnJheUJ1ZmZlcixcclxuICAgICAgc2l6ZTogbnVtYmVyLFxyXG4gICAgICBuYW1lOiBzdHJpbmdcclxuICAgICk6IEFDdWJpc21Nb3Rpb24ge1xyXG4gICAgICByZXR1cm4gQ3ViaXNtRXhwcmVzc2lvbk1vdGlvbi5jcmVhdGUoYnVmZmVyLCBzaXplKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODneODvOOCuuODh+ODvOOCv+OBruiqreOBv+i+vOOBv1xyXG4gICAgICogQHBhcmFtIGJ1ZmZlciBwb3NlMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAqL1xyXG4gICAgcHVibGljIGxvYWRQb3NlKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICB0aGlzLl9wb3NlID0gQ3ViaXNtUG9zZS5jcmVhdGUoYnVmZmVyLCBzaXplKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODh+ODq+OBq+S7mOWxnuOBmeOCi+ODpuODvOOCtuODvOODh+ODvOOCv+OCkuiqreOBv+i+vOOCgFxyXG4gICAgICogQHBhcmFtIGJ1ZmZlciB1c2VyZGF0YTMuanNvbuOBjOiqreOBv+i+vOOBvuOCjOOBpuOBhOOCi+ODkOODg+ODleOCoVxyXG4gICAgICogQHBhcmFtIHNpemUg44OQ44OD44OV44Kh44Gu44K144Kk44K6XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBsb2FkVXNlckRhdGEoYnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX21vZGVsVXNlckRhdGEgPSBDdWJpc21Nb2RlbFVzZXJEYXRhLmNyZWF0ZShidWZmZXIsIHNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog54mp55CG5ryU566X44OH44O844K/44Gu6Kqt44G/6L6844G/XHJcbiAgICAgKiBAcGFyYW0gYnVmZmVyICBwaHlzaWNzMy5qc29u44GM6Kqt44G/6L6844G+44KM44Gm44GE44KL44OQ44OD44OV44KhXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAqL1xyXG4gICAgcHVibGljIGxvYWRQaHlzaWNzKGJ1ZmZlcjogQXJyYXlCdWZmZXIsIHNpemU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICB0aGlzLl9waHlzaWNzID0gQ3ViaXNtUGh5c2ljcy5jcmVhdGUoYnVmZmVyLCBzaXplKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+OBn+OCiuWIpOWumuOBruWPluW+l1xyXG4gICAgICogQHBhcmFtIGRyYXdhYmxlSWQg5qSc6Ki844GX44Gf44GERHJhd2FibGXjga5JRFxyXG4gICAgICogQHBhcmFtIHBvaW50WCBY5L2N572uXHJcbiAgICAgKiBAcGFyYW0gcG9pbnRZIFnkvY3nva5cclxuICAgICAqIEByZXR1cm4gdHJ1ZSDjg5Ljg4Pjg4jjgZfjgabjgYTjgotcclxuICAgICAqIEByZXR1cm4gZmFsc2Ug44OS44OD44OI44GX44Gm44GE44Gq44GEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0hpdChcclxuICAgICAgZHJhd2FibGVJZDogQ3ViaXNtSWRIYW5kbGUsXHJcbiAgICAgIHBvaW50WDogbnVtYmVyLFxyXG4gICAgICBwb2ludFk6IG51bWJlclxyXG4gICAgKTogYm9vbGVhbiB7XHJcbiAgICAgIGNvbnN0IGRyYXdJbmRleDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZ2V0RHJhd2FibGVJbmRleChkcmF3YWJsZUlkKTtcclxuXHJcbiAgICAgIGlmIChkcmF3SW5kZXggPCAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyDlrZjlnKjjgZfjgarjgYTloLTlkIjjga9mYWxzZVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBjb3VudDogbnVtYmVyID0gdGhpcy5fbW9kZWwuZ2V0RHJhd2FibGVWZXJ0ZXhDb3VudChkcmF3SW5kZXgpO1xyXG4gICAgICBjb25zdCB2ZXJ0aWNlczogRmxvYXQzMkFycmF5ID0gdGhpcy5fbW9kZWwuZ2V0RHJhd2FibGVWZXJ0aWNlcyhkcmF3SW5kZXgpO1xyXG5cclxuICAgICAgbGV0IGxlZnQ6IG51bWJlciA9IHZlcnRpY2VzWzBdO1xyXG4gICAgICBsZXQgcmlnaHQ6IG51bWJlciA9IHZlcnRpY2VzWzBdO1xyXG4gICAgICBsZXQgdG9wOiBudW1iZXIgPSB2ZXJ0aWNlc1sxXTtcclxuICAgICAgbGV0IGJvdHRvbTogbnVtYmVyID0gdmVydGljZXNbMV07XHJcblxyXG4gICAgICBmb3IgKGxldCBqID0gMTsgaiA8IGNvdW50OyArK2opIHtcclxuICAgICAgICBjb25zdCB4ID0gdmVydGljZXNbQ29uc3RhbnQudmVydGV4T2Zmc2V0ICsgaiAqIENvbnN0YW50LnZlcnRleFN0ZXBdO1xyXG4gICAgICAgIGNvbnN0IHkgPSB2ZXJ0aWNlc1tDb25zdGFudC52ZXJ0ZXhPZmZzZXQgKyBqICogQ29uc3RhbnQudmVydGV4U3RlcCArIDFdO1xyXG5cclxuICAgICAgICBpZiAoeCA8IGxlZnQpIHtcclxuICAgICAgICAgIGxlZnQgPSB4OyAvLyBNaW4geFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHggPiByaWdodCkge1xyXG4gICAgICAgICAgcmlnaHQgPSB4OyAvLyBNYXggeFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHkgPCB0b3ApIHtcclxuICAgICAgICAgIHRvcCA9IHk7IC8vIE1pbiB5XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoeSA+IGJvdHRvbSkge1xyXG4gICAgICAgICAgYm90dG9tID0geTsgLy8gTWF4IHlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHR4OiBudW1iZXIgPSB0aGlzLl9tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1YKHBvaW50WCk7XHJcbiAgICAgIGNvbnN0IHR5OiBudW1iZXIgPSB0aGlzLl9tb2RlbE1hdHJpeC5pbnZlcnRUcmFuc2Zvcm1ZKHBvaW50WSk7XHJcblxyXG4gICAgICByZXR1cm4gbGVmdCA8PSB0eCAmJiB0eCA8PSByaWdodCAmJiB0b3AgPD0gdHkgJiYgdHkgPD0gYm90dG9tO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Oi44OH44Or44Gu5Y+W5b6XXHJcbiAgICAgKiBAcmV0dXJuIOODouODh+ODq1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TW9kZWwoKTogQ3ViaXNtTW9kZWwge1xyXG4gICAgICByZXR1cm4gdGhpcy5fbW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7lj5blvpdcclxuICAgICAqIEByZXR1cm4g44Os44Oz44OA44OpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRSZW5kZXJlcigpOiBDdWJpc21SZW5kZXJlcl9XZWJHTCB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODrOODs+ODgOODqeOCkuS9nOaIkOOBl+OBpuWIneacn+WMluOCkuWun+ihjOOBmeOCi1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY3JlYXRlUmVuZGVyZXIoKTogdm9pZCB7XHJcbiAgICAgIGlmICh0aGlzLl9yZW5kZXJlcikge1xyXG4gICAgICAgIHRoaXMuZGVsZXRlUmVuZGVyZXIoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fcmVuZGVyZXIgPSBuZXcgQ3ViaXNtUmVuZGVyZXJfV2ViR0woKTtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIuaW5pdGlhbGl6ZSh0aGlzLl9tb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6zjg7Pjg4Djg6njga7op6PmlL5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlbGV0ZVJlbmRlcmVyKCk6IHZvaWQge1xyXG4gICAgICBpZiAodGhpcy5fcmVuZGVyZXIgIT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbGVhc2UoKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCpOODmeODs+ODiOeZuueBq+aZguOBruaomea6luWHpueQhlxyXG4gICAgICpcclxuICAgICAqIEV2ZW5044GM5YaN55Sf5Yem55CG5pmC44Gr44GC44Gj44Gf5aC05ZCI44Gu5Yem55CG44KS44GZ44KL44CCXHJcbiAgICAgKiDntpnmib/jgafkuIrmm7jjgY3jgZnjgovjgZPjgajjgpLmg7PlrprjgZfjgabjgYTjgovjgIJcclxuICAgICAqIOS4iuabuOOBjeOBl+OBquOBhOWgtOWQiOOBr+ODreOCsOWHuuWKm+OCkuOBmeOCi+OAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbW90aW9uRXZlbnRGaXJlZChldmVudFZhbHVlOiBjc21TdHJpbmcpOiB2b2lkIHtcclxuICAgICAgQ3ViaXNtTG9nSW5mbygnezB9JywgZXZlbnRWYWx1ZS5zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCpOODmeODs+ODiOeUqOOBruOCs+ODvOODq+ODkOODg+OCr1xyXG4gICAgICpcclxuICAgICAqIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlcuOBq+OCpOODmeODs+ODiOeUqOOBq+eZu+mMsuOBmeOCi+OBn+OCgeOBrkNhbGxiYWNr44CCXHJcbiAgICAgKiBDdWJpc21Vc2VyTW9kZWzjga7ntpnmib/lhYjjga5FdmVudEZpcmVk44KS5ZG844G244CCXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxlciDnmbrngavjgZfjgZ/jgqTjg5njg7Pjg4jjgpLnrqHnkIbjgZfjgabjgYTjgZ/jg6Ljg7zjgrfjg6fjg7Pjg57jg43jg7zjgrjjg6Pjg7zjgIHmr5TovIPnlKhcclxuICAgICAqIEBwYXJhbSBldmVudFZhbHVlIOeZuueBq+OBl+OBn+OCpOODmeODs+ODiOOBruaWh+Wtl+WIl+ODh+ODvOOCv1xyXG4gICAgICogQHBhcmFtIGN1c3RvbURhdGEgQ3ViaXNtVXNlck1vZGVs44KS57aZ5om/44GX44Gf44Kk44Oz44K544K/44Oz44K544KS5oOz5a6aXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgY3ViaXNtRGVmYXVsdE1vdGlvbkV2ZW50Q2FsbGJhY2soXHJcbiAgICAgIGNhbGxlcjogQ3ViaXNtTW90aW9uUXVldWVNYW5hZ2VyLFxyXG4gICAgICBldmVudFZhbHVlOiBjc21TdHJpbmcsXHJcbiAgICAgIGN1c3RvbURhdGE6IEN1YmlzbVVzZXJNb2RlbFxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgIGNvbnN0IG1vZGVsOiBDdWJpc21Vc2VyTW9kZWwgPSBjdXN0b21EYXRhO1xyXG5cclxuICAgICAgaWYgKG1vZGVsICE9IG51bGwpIHtcclxuICAgICAgICBtb2RlbC5tb3Rpb25FdmVudEZpcmVkKGV2ZW50VmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAvLyDlkITlpInmlbDliJ3mnJ/ljJZcclxuICAgICAgdGhpcy5fbW9jID0gbnVsbDtcclxuICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xyXG4gICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyID0gbnVsbDtcclxuICAgICAgdGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgPSBudWxsO1xyXG4gICAgICB0aGlzLl9leWVCbGluayA9IG51bGw7XHJcbiAgICAgIHRoaXMuX2JyZWF0aCA9IG51bGw7XHJcbiAgICAgIHRoaXMuX21vZGVsTWF0cml4ID0gbnVsbDtcclxuICAgICAgdGhpcy5fcG9zZSA9IG51bGw7XHJcbiAgICAgIHRoaXMuX2RyYWdNYW5hZ2VyID0gbnVsbDtcclxuICAgICAgdGhpcy5fcGh5c2ljcyA9IG51bGw7XHJcbiAgICAgIHRoaXMuX21vZGVsVXNlckRhdGEgPSBudWxsO1xyXG4gICAgICB0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gICAgICB0aGlzLl91cGRhdGluZyA9IGZhbHNlO1xyXG4gICAgICB0aGlzLl9vcGFjaXR5ID0gMS4wO1xyXG4gICAgICB0aGlzLl9saXBzeW5jID0gdHJ1ZTtcclxuICAgICAgdGhpcy5fbGFzdExpcFN5bmNWYWx1ZSA9IDAuMDtcclxuICAgICAgdGhpcy5fZHJhZ1ggPSAwLjA7XHJcbiAgICAgIHRoaXMuX2RyYWdZID0gMC4wO1xyXG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25YID0gMC4wO1xyXG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25ZID0gMC4wO1xyXG4gICAgICB0aGlzLl9hY2NlbGVyYXRpb25aID0gMC4wO1xyXG4gICAgICB0aGlzLl9kZWJ1Z01vZGUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIgPSBudWxsO1xyXG5cclxuICAgICAgLy8g44Oi44O844K344On44Oz44Oe44ON44O844K444Oj44O844KS5L2c5oiQXHJcbiAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBuZXcgQ3ViaXNtTW90aW9uTWFuYWdlcigpO1xyXG4gICAgICB0aGlzLl9tb3Rpb25NYW5hZ2VyLnNldEV2ZW50Q2FsbGJhY2soXHJcbiAgICAgICAgQ3ViaXNtVXNlck1vZGVsLmN1YmlzbURlZmF1bHRNb3Rpb25FdmVudENhbGxiYWNrLFxyXG4gICAgICAgIHRoaXNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIC8vIOihqOaDheODnuODjeODvOOCuOODo+ODvOOCkuS9nOaIkFxyXG4gICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG5ldyBDdWJpc21Nb3Rpb25NYW5hZ2VyKCk7XHJcblxyXG4gICAgICAvLyDjg4njg6njg4PjgrDjgavjgojjgovjgqLjg4vjg6Hjg7zjgrfjg6fjg7NcclxuICAgICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBuZXcgQ3ViaXNtVGFyZ2V0UG9pbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODh+OCueODiOODqeOCr+OCv+OBq+ebuOW9k+OBmeOCi+WHpueQhlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVsZWFzZSgpIHtcclxuICAgICAgaWYgKHRoaXMuX21vdGlvbk1hbmFnZXIgIT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIucmVsZWFzZSgpO1xyXG4gICAgICAgIHRoaXMuX21vdGlvbk1hbmFnZXIgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5fZXhwcmVzc2lvbk1hbmFnZXIgIT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX2V4cHJlc3Npb25NYW5hZ2VyLnJlbGVhc2UoKTtcclxuICAgICAgICB0aGlzLl9leHByZXNzaW9uTWFuYWdlciA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLl9tb2MgIT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX21vYy5kZWxldGVNb2RlbCh0aGlzLl9tb2RlbCk7XHJcbiAgICAgICAgdGhpcy5fbW9jLnJlbGVhc2UoKTtcclxuICAgICAgICB0aGlzLl9tb2MgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9tb2RlbE1hdHJpeCA9IG51bGw7XHJcblxyXG4gICAgICBDdWJpc21Qb3NlLmRlbGV0ZSh0aGlzLl9wb3NlKTtcclxuICAgICAgQ3ViaXNtRXllQmxpbmsuZGVsZXRlKHRoaXMuX2V5ZUJsaW5rKTtcclxuICAgICAgQ3ViaXNtQnJlYXRoLmRlbGV0ZSh0aGlzLl9icmVhdGgpO1xyXG5cclxuICAgICAgdGhpcy5fZHJhZ01hbmFnZXIgPSBudWxsO1xyXG5cclxuICAgICAgQ3ViaXNtUGh5c2ljcy5kZWxldGUodGhpcy5fcGh5c2ljcyk7XHJcbiAgICAgIEN1YmlzbU1vZGVsVXNlckRhdGEuZGVsZXRlKHRoaXMuX21vZGVsVXNlckRhdGEpO1xyXG5cclxuICAgICAgdGhpcy5kZWxldGVSZW5kZXJlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBfbW9jOiBDdWJpc21Nb2M7IC8vIE1vY+ODh+ODvOOCv1xyXG4gICAgcHJvdGVjdGVkIF9tb2RlbDogQ3ViaXNtTW9kZWw7IC8vIE1vZGVs44Kk44Oz44K544K/44Oz44K5XHJcblxyXG4gICAgcHJvdGVjdGVkIF9tb3Rpb25NYW5hZ2VyOiBDdWJpc21Nb3Rpb25NYW5hZ2VyOyAvLyDjg6Ljg7zjgrfjg6fjg7PnrqHnkIZcclxuICAgIHByb3RlY3RlZCBfZXhwcmVzc2lvbk1hbmFnZXI6IEN1YmlzbU1vdGlvbk1hbmFnZXI7IC8vIOihqOaDheeuoeeQhlxyXG4gICAgcHJvdGVjdGVkIF9leWVCbGluazogQ3ViaXNtRXllQmxpbms7IC8vIOiHquWLleOBvuOBsOOBn+OBjVxyXG4gICAgcHJvdGVjdGVkIF9icmVhdGg6IEN1YmlzbUJyZWF0aDsgLy8g5ZG85ZC4XHJcbiAgICBwcm90ZWN0ZWQgX21vZGVsTWF0cml4OiBDdWJpc21Nb2RlbE1hdHJpeDsgLy8g44Oi44OH44Or6KGM5YiXXHJcbiAgICBwcm90ZWN0ZWQgX3Bvc2U6IEN1YmlzbVBvc2U7IC8vIOODneODvOOCuueuoeeQhlxyXG4gICAgcHJvdGVjdGVkIF9kcmFnTWFuYWdlcjogQ3ViaXNtVGFyZ2V0UG9pbnQ7IC8vIOODnuOCpuOCueODieODqeODg+OCsFxyXG4gICAgcHJvdGVjdGVkIF9waHlzaWNzOiBDdWJpc21QaHlzaWNzOyAvLyDniannkIbmvJTnrpdcclxuICAgIHByb3RlY3RlZCBfbW9kZWxVc2VyRGF0YTogQ3ViaXNtTW9kZWxVc2VyRGF0YTsgLy8g44Om44O844K244O844OH44O844K/XHJcblxyXG4gICAgcHJvdGVjdGVkIF9pbml0aWFsaXplZDogYm9vbGVhbjsgLy8g5Yid5pyf5YyW44GV44KM44Gf44GL44Gp44GG44GLXHJcbiAgICBwcm90ZWN0ZWQgX3VwZGF0aW5nOiBib29sZWFuOyAvLyDmm7TmlrDjgZXjgozjgZ/jgYvjganjgYbjgYtcclxuICAgIHByb3RlY3RlZCBfb3BhY2l0eTogbnVtYmVyOyAvLyDkuI3pgI/mmI7luqZcclxuICAgIHByb3RlY3RlZCBfbGlwc3luYzogYm9vbGVhbjsgLy8g44Oq44OD44OX44K344Oz44Kv44GZ44KL44GL44Gp44GG44GLXHJcbiAgICBwcm90ZWN0ZWQgX2xhc3RMaXBTeW5jVmFsdWU6IG51bWJlcjsgLy8g5pyA5b6M44Gu44Oq44OD44OX44K344Oz44Kv44Gu5Yi25b6h5ZywXHJcbiAgICBwcm90ZWN0ZWQgX2RyYWdYOiBudW1iZXI7IC8vIOODnuOCpuOCueODieODqeODg+OCsOOBrljkvY3nva5cclxuICAgIHByb3RlY3RlZCBfZHJhZ1k6IG51bWJlcjsgLy8g44Oe44Km44K544OJ44Op44OD44Kw44GuWeS9jee9rlxyXG4gICAgcHJvdGVjdGVkIF9hY2NlbGVyYXRpb25YOiBudW1iZXI7IC8vIFjou7jmlrnlkJHjga7liqDpgJ/luqZcclxuICAgIHByb3RlY3RlZCBfYWNjZWxlcmF0aW9uWTogbnVtYmVyOyAvLyBZ6Lu45pa55ZCR44Gu5Yqg6YCf5bqmXHJcbiAgICBwcm90ZWN0ZWQgX2FjY2VsZXJhdGlvblo6IG51bWJlcjsgLy8gWui7uOaWueWQkeOBruWKoOmAn+W6plxyXG4gICAgcHJvdGVjdGVkIF9kZWJ1Z01vZGU6IGJvb2xlYW47IC8vIOODh+ODkOODg+OCsOODouODvOODieOBi+OBqeOBhuOBi1xyXG5cclxuICAgIHByaXZhdGUgX3JlbmRlcmVyOiBDdWJpc21SZW5kZXJlcl9XZWJHTDsgLy8g44Os44Oz44OA44OpXHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQU1BO0FBMlNBO0FBbExBO0FBb0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBTUE7QUFHQTtBQUNBO0FBeFVBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQVVBO0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFJQTtBQXVCQTtBQUtBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFVQTtBQUtBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0E7QUFDQTtBQUNBO0FBWUE7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBZ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUE0QkE7QUFBQTtBQS9ZQTtBQWdaQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Framework/src/model/cubismusermodel.ts\n");

/***/ }),

/***/ "./Framework/src/motion/acubismmotion.ts":
/*!***********************************************!*\
  !*** ./Framework/src/motion/acubismmotion.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"./Framework/src/math/cubismmath.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ACubismMotion = (function () {\r\n        function ACubismMotion() {\r\n            var _this = this;\r\n            this.setFinishedMotionHandler = function (onFinishedMotionHandler) { return (_this._onFinishedMotion = onFinishedMotionHandler); };\r\n            this.getFinishedMotionHandler = function () { return _this._onFinishedMotion; };\r\n            this._fadeInSeconds = -1.0;\r\n            this._fadeOutSeconds = -1.0;\r\n            this._weight = 1.0;\r\n            this._offsetSeconds = 0.0;\r\n            this._firedEventValues = new csmVector();\r\n        }\r\n        ACubismMotion.delete = function (motion) {\r\n            motion.release();\r\n            motion = void 0;\r\n            motion = null;\r\n        };\r\n        ACubismMotion.prototype.release = function () {\r\n            this._weight = 0.0;\r\n        };\r\n        ACubismMotion.prototype.updateParameters = function (model, motionQueueEntry, userTimeSeconds) {\r\n            if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\r\n                return;\r\n            }\r\n            if (!motionQueueEntry.isStarted()) {\r\n                motionQueueEntry.setIsStarted(true);\r\n                motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);\r\n                motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n                var duration = this.getDuration();\r\n                if (motionQueueEntry.getEndTime() < 0) {\r\n                    motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);\r\n                }\r\n            }\r\n            var fadeWeight = this._weight;\r\n            var fadeIn = this._fadeInSeconds == 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                    this._fadeInSeconds);\r\n            var fadeOut = this._fadeOutSeconds == 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                    this._fadeOutSeconds);\r\n            fadeWeight = fadeWeight * fadeIn * fadeOut;\r\n            motionQueueEntry.setState(userTimeSeconds, fadeWeight);\r\n            cubismdebug_1.CSM_ASSERT(0.0 <= fadeWeight && fadeWeight <= 1.0);\r\n            this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);\r\n            if (motionQueueEntry.getEndTime() > 0 &&\r\n                motionQueueEntry.getEndTime() < userTimeSeconds) {\r\n                motionQueueEntry.setIsFinished(true);\r\n            }\r\n        };\r\n        ACubismMotion.prototype.setFadeInTime = function (fadeInSeconds) {\r\n            this._fadeInSeconds = fadeInSeconds;\r\n        };\r\n        ACubismMotion.prototype.setFadeOutTime = function (fadeOutSeconds) {\r\n            this._fadeOutSeconds = fadeOutSeconds;\r\n        };\r\n        ACubismMotion.prototype.getFadeOutTime = function () {\r\n            return this._fadeOutSeconds;\r\n        };\r\n        ACubismMotion.prototype.getFadeInTime = function () {\r\n            return this._fadeInSeconds;\r\n        };\r\n        ACubismMotion.prototype.setWeight = function (weight) {\r\n            this._weight = weight;\r\n        };\r\n        ACubismMotion.prototype.getWeight = function () {\r\n            return this._weight;\r\n        };\r\n        ACubismMotion.prototype.getDuration = function () {\r\n            return -1.0;\r\n        };\r\n        ACubismMotion.prototype.getLoopDuration = function () {\r\n            return -1.0;\r\n        };\r\n        ACubismMotion.prototype.setOffsetTime = function (offsetSeconds) {\r\n            this._offsetSeconds = offsetSeconds;\r\n        };\r\n        ACubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {\r\n            return this._firedEventValues;\r\n        };\r\n        return ACubismMotion;\r\n    }());\r\n    Live2DCubismFramework.ACubismMotion = ACubismMotion;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/acubismmotion.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismexpressionmotion.ts":
/*!********************************************************!*\
  !*** ./Framework/src/motion/cubismexpressionmotion.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\");\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ExpressionKeyFadeIn = 'FadeInTime';\r\n    var ExpressionKeyFadeOut = 'FadeOutTime';\r\n    var ExpressionKeyParameters = 'Parameters';\r\n    var ExpressionKeyId = 'Id';\r\n    var ExpressionKeyValue = 'Value';\r\n    var ExpressionKeyBlend = 'Blend';\r\n    var BlendValueAdd = 'Add';\r\n    var BlendValueMultiply = 'Multiply';\r\n    var BlendValueOverwrite = 'Overwrite';\r\n    var DefaultFadeTime = 1.0;\r\n    var CubismExpressionMotion = (function (_super) {\r\n        __extends(CubismExpressionMotion, _super);\r\n        function CubismExpressionMotion() {\r\n            var _this = _super.call(this) || this;\r\n            _this._parameters = new csmVector();\r\n            return _this;\r\n        }\r\n        CubismExpressionMotion.create = function (buffer, size) {\r\n            var expression = new CubismExpressionMotion();\r\n            var json = CubismJson.create(buffer, size);\r\n            var root = json.getRoot();\r\n            expression.setFadeInTime(root.getValueByString(ExpressionKeyFadeIn).toFloat(DefaultFadeTime));\r\n            expression.setFadeOutTime(root.getValueByString(ExpressionKeyFadeOut).toFloat(DefaultFadeTime));\r\n            var parameterCount = root\r\n                .getValueByString(ExpressionKeyParameters)\r\n                .getSize();\r\n            expression._parameters.prepareCapacity(parameterCount);\r\n            for (var i = 0; i < parameterCount; ++i) {\r\n                var param = root\r\n                    .getValueByString(ExpressionKeyParameters)\r\n                    .getValueByIndex(i);\r\n                var parameterId = CubismFramework.getIdManager().getId(param.getValueByString(ExpressionKeyId).getRawString());\r\n                var value = param\r\n                    .getValueByString(ExpressionKeyValue)\r\n                    .toFloat();\r\n                var blendType = void 0;\r\n                if (param.getValueByString(ExpressionKeyBlend).isNull() ||\r\n                    param.getValueByString(ExpressionKeyBlend).getString() ==\r\n                        BlendValueAdd) {\r\n                    blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n                }\r\n                else if (param.getValueByString(ExpressionKeyBlend).getString() ==\r\n                    BlendValueMultiply) {\r\n                    blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\r\n                }\r\n                else if (param.getValueByString(ExpressionKeyBlend).getString() ==\r\n                    BlendValueOverwrite) {\r\n                    blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\r\n                }\r\n                else {\r\n                    blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n                }\r\n                var item = new ExpressionParameter();\r\n                item.parameterId = parameterId;\r\n                item.blendType = blendType;\r\n                item.value = value;\r\n                expression._parameters.pushBack(item);\r\n            }\r\n            CubismJson.delete(json);\r\n            return expression;\r\n        };\r\n        CubismExpressionMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, weight, motionQueueEntry) {\r\n            for (var i = 0; i < this._parameters.getSize(); ++i) {\r\n                var parameter = this._parameters.at(i);\r\n                switch (parameter.blendType) {\r\n                    case ExpressionBlendType.ExpressionBlendType_Add: {\r\n                        model.addParameterValueById(parameter.parameterId, parameter.value, weight);\r\n                        break;\r\n                    }\r\n                    case ExpressionBlendType.ExpressionBlendType_Multiply: {\r\n                        model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);\r\n                        break;\r\n                    }\r\n                    case ExpressionBlendType.ExpressionBlendType_Overwrite: {\r\n                        model.setParameterValueById(parameter.parameterId, parameter.value, weight);\r\n                        break;\r\n                    }\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        return CubismExpressionMotion;\r\n    }(ACubismMotion));\r\n    Live2DCubismFramework.CubismExpressionMotion = CubismExpressionMotion;\r\n    var ExpressionBlendType;\r\n    (function (ExpressionBlendType) {\r\n        ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Add\"] = 0] = \"ExpressionBlendType_Add\";\r\n        ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Multiply\"] = 1] = \"ExpressionBlendType_Multiply\";\r\n        ExpressionBlendType[ExpressionBlendType[\"ExpressionBlendType_Overwrite\"] = 2] = \"ExpressionBlendType_Overwrite\";\r\n    })(ExpressionBlendType = Live2DCubismFramework.ExpressionBlendType || (Live2DCubismFramework.ExpressionBlendType = {}));\r\n    var ExpressionParameter = (function () {\r\n        function ExpressionParameter() {\r\n        }\r\n        return ExpressionParameter;\r\n    }());\r\n    Live2DCubismFramework.ExpressionParameter = ExpressionParameter;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismexpressionmotion.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotion.ts":
/*!**********************************************!*\
  !*** ./Framework/src/motion/cubismmotion.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmotionjson_1 = __webpack_require__(/*! ./cubismmotionjson */ \"./Framework/src/motion/cubismmotionjson.ts\");\r\nvar cubismmotioninternal_1 = __webpack_require__(/*! ./cubismmotioninternal */ \"./Framework/src/motion/cubismmotioninternal.ts\");\r\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"./Framework/src/math/cubismmath.ts\");\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar CubismMotionData = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionData;\r\nvar CubismMotionSegment = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionSegment;\r\nvar CubismMotionPoint = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionPoint;\r\nvar CubismMotionEvent = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionEvent;\r\nvar CubismMotionSegmentType = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionSegmentType;\r\nvar CubismMotionCurve = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionCurve;\r\nvar CubismMotionCurveTarget = cubismmotioninternal_1.Live2DCubismFramework.CubismMotionCurveTarget;\r\nvar CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\r\nvar CubismMotionJson = cubismmotionjson_1.Live2DCubismFramework.CubismMotionJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var EffectNameEyeBlink = 'EyeBlink';\r\n    var EffectNameLipSync = 'LipSync';\r\n    var TargetNameModel = 'Model';\r\n    var TargetNameParameter = 'Parameter';\r\n    var TargetNamePartOpacity = 'PartOpacity';\r\n    function lerpPoints(a, b, t) {\r\n        var result = new CubismMotionPoint();\r\n        result.time = a.time + (b.time - a.time) * t;\r\n        result.value = a.value + (b.value - a.value) * t;\r\n        return result;\r\n    }\r\n    function linearEvaluate(points, time) {\r\n        var t;\r\n        if (points[0] && points[0].time != 0) {\r\n            t = (time - points[0].time) / (points[1].time - points[0].time);\r\n        }\r\n        else if (points[2] && points[2].time) {\r\n            t = (time - points[1].time) / (points[2].time - points[1].time);\r\n        }\r\n        else if (points.length > 0) {\r\n            t = (time - points[0].time) / (points[1].time - points[0].time);\r\n        }\r\n        if (t < 0.0) {\r\n            t = 0.0;\r\n        }\r\n        return points[0].value + (points[1].value - points[0].value) * t;\r\n    }\r\n    function bezierEvaluate(points, time) {\r\n        var t = (time - points[0].time) / (points[3].time - points[0].time);\r\n        if (t < 0.0) {\r\n            t = 0.0;\r\n        }\r\n        var p01 = lerpPoints(points[0], points[1], t);\r\n        var p12 = lerpPoints(points[1], points[2], t);\r\n        var p23 = lerpPoints(points[2], points[3], t);\r\n        var p012 = lerpPoints(p01, p12, t);\r\n        var p123 = lerpPoints(p12, p23, t);\r\n        return lerpPoints(p012, p123, t).value;\r\n    }\r\n    function steppedEvaluate(points, time) {\r\n        return points[0].value;\r\n    }\r\n    function inverseSteppedEvaluate(points, time) {\r\n        return points[1].value;\r\n    }\r\n    function evaluateCurve(motionData, index, time) {\r\n        var curve = motionData.curves.at(index);\r\n        var target = -1;\r\n        var totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;\r\n        var pointPosition = 0;\r\n        for (var i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\r\n            pointPosition = motionData.segments.at(i).basePointIndex + (motionData.segments.at(i).segmentType == CubismMotionSegmentType.CubismMotionSegmentType_Bezier ? 3 : 1);\r\n            if (pointPosition >= motionData.points._size) {\r\n                pointPosition = motionData.points._size - 3;\r\n            }\r\n            if (motionData.points.at(pointPosition).time > time) {\r\n                target = i;\r\n                break;\r\n            }\r\n        }\r\n        if (target == -1) {\r\n            return motionData.points.at(pointPosition).value;\r\n        }\r\n        var segment = motionData.segments.at(target);\r\n        return segment.evaluate(motionData.points.get(segment.basePointIndex), time);\r\n    }\r\n    var CubismMotion = (function (_super) {\r\n        __extends(CubismMotion, _super);\r\n        function CubismMotion() {\r\n            var _this = _super.call(this) || this;\r\n            _this._sourceFrameRate = 30.0;\r\n            _this._loopDurationSeconds = -1.0;\r\n            _this._isLoop = false;\r\n            _this._isLoopFadeIn = true;\r\n            _this._lastWeight = 0.0;\r\n            _this._motionData = null;\r\n            _this._modelCurveIdEyeBlink = null;\r\n            _this._modelCurveIdLipSync = null;\r\n            _this._eyeBlinkParameterIds = null;\r\n            _this._lipSyncParameterIds = null;\r\n            return _this;\r\n        }\r\n        CubismMotion.create = function (buffer, size, onFinishedMotionHandler) {\r\n            var ret = new CubismMotion();\r\n            ret.parse(buffer, size);\r\n            ret._sourceFrameRate = ret._motionData.fps;\r\n            ret._loopDurationSeconds = ret._motionData.duration;\r\n            ret._onFinishedMotion = onFinishedMotionHandler;\r\n            return ret;\r\n        };\r\n        CubismMotion.prototype.doUpdateParameters = function (model, userTimeSeconds, fadeWeight, motionQueueEntry) {\r\n            if (this._modelCurveIdEyeBlink == null) {\r\n                this._modelCurveIdEyeBlink = CubismFramework.getIdManager().getId(EffectNameEyeBlink);\r\n            }\r\n            if (this._modelCurveIdLipSync == null) {\r\n                this._modelCurveIdLipSync = CubismFramework.getIdManager().getId(EffectNameLipSync);\r\n            }\r\n            var timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();\r\n            if (timeOffsetSeconds < 0.0) {\r\n                timeOffsetSeconds = 0.0;\r\n            }\r\n            var lipSyncValue = Number.MAX_VALUE;\r\n            var eyeBlinkValue = Number.MAX_VALUE;\r\n            var MaxTargetSize = 64;\r\n            var lipSyncFlags = 0;\r\n            var eyeBlinkFlags = 0;\r\n            if (this._eyeBlinkParameterIds.getSize() > MaxTargetSize) {\r\n                cubismdebug_1.CubismLogDebug('too many eye blink targets : {0}', this._eyeBlinkParameterIds.getSize());\r\n            }\r\n            if (this._lipSyncParameterIds.getSize() > MaxTargetSize) {\r\n                cubismdebug_1.CubismLogDebug('too many lip sync targets : {0}', this._lipSyncParameterIds.getSize());\r\n            }\r\n            var tmpFadeIn = this._fadeInSeconds <= 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                    this._fadeInSeconds);\r\n            var tmpFadeOut = this._fadeOutSeconds <= 0.0 || motionQueueEntry.getEndTime() < 0.0\r\n                ? 1.0\r\n                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                    this._fadeOutSeconds);\r\n            var value;\r\n            var c, parameterIndex;\r\n            var time = timeOffsetSeconds;\r\n            if (this._isLoop) {\r\n                while (time > this._motionData.duration) {\r\n                    time -= this._motionData.duration;\r\n                }\r\n            }\r\n            var curves = this._motionData.curves;\r\n            for (c = 0; c < this._motionData.curveCount &&\r\n                curves.at(c).type ==\r\n                    CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {\r\n                value = evaluateCurve(this._motionData, c, time);\r\n                if (curves.at(c).id == this._modelCurveIdEyeBlink) {\r\n                    eyeBlinkValue = value;\r\n                }\r\n                else if (curves.at(c).id == this._modelCurveIdLipSync) {\r\n                    lipSyncValue = value;\r\n                }\r\n            }\r\n            var parameterMotionCurveCount = 0;\r\n            for (; c < this._motionData.curveCount &&\r\n                curves.at(c).type ==\r\n                    CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {\r\n                parameterMotionCurveCount++;\r\n                parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n                if (parameterIndex == -1) {\r\n                    continue;\r\n                }\r\n                var sourceValue = model.getParameterValueByIndex(parameterIndex);\r\n                value = evaluateCurve(this._motionData, c, time);\r\n                if (eyeBlinkValue != Number.MAX_VALUE) {\r\n                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {\r\n                        if (this._eyeBlinkParameterIds.at(i) == curves.at(c).id) {\r\n                            value *= eyeBlinkValue;\r\n                            eyeBlinkFlags |= 1 << i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (lipSyncValue != Number.MAX_VALUE) {\r\n                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {\r\n                        if (this._lipSyncParameterIds.at(i) == curves.at(c).id) {\r\n                            value += lipSyncValue;\r\n                            lipSyncFlags |= 1 << i;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                var v = void 0;\r\n                if (curves.at(c).fadeInTime < 0.0 && curves.at(c).fadeOutTime < 0.0) {\r\n                    v = sourceValue + (value - sourceValue) * fadeWeight;\r\n                }\r\n                else {\r\n                    var fin = void 0;\r\n                    var fout = void 0;\r\n                    if (curves.at(c).fadeInTime < 0.0) {\r\n                        fin = tmpFadeIn;\r\n                    }\r\n                    else {\r\n                        fin =\r\n                            curves.at(c).fadeInTime == 0.0\r\n                                ? 1.0\r\n                                : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) /\r\n                                    curves.at(c).fadeInTime);\r\n                    }\r\n                    if (curves.at(c).fadeOutTime < 0.0) {\r\n                        fout = tmpFadeOut;\r\n                    }\r\n                    else {\r\n                        fout =\r\n                            curves.at(c).fadeOutTime == 0.0 ||\r\n                                motionQueueEntry.getEndTime() < 0.0\r\n                                ? 1.0\r\n                                : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) /\r\n                                    curves.at(c).fadeOutTime);\r\n                    }\r\n                    var paramWeight = this._weight * fin * fout;\r\n                    v = sourceValue + (value - sourceValue) * paramWeight;\r\n                }\r\n                model.setParameterValueByIndex(parameterIndex, v, 1.0);\r\n            }\r\n            {\r\n                if (eyeBlinkValue != Number.MAX_VALUE) {\r\n                    for (var i = 0; i < this._eyeBlinkParameterIds.getSize() && i < MaxTargetSize; ++i) {\r\n                        var sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds.at(i));\r\n                        if ((eyeBlinkFlags >> i) & 0x01) {\r\n                            continue;\r\n                        }\r\n                        var v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\r\n                        model.setParameterValueById(this._eyeBlinkParameterIds.at(i), v);\r\n                    }\r\n                }\r\n                if (lipSyncValue != Number.MAX_VALUE) {\r\n                    for (var i = 0; i < this._lipSyncParameterIds.getSize() && i < MaxTargetSize; ++i) {\r\n                        var sourceValue = model.getParameterValueById(this._lipSyncParameterIds.at(i));\r\n                        if ((lipSyncFlags >> i) & 0x01) {\r\n                            continue;\r\n                        }\r\n                        var v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\r\n                        model.setParameterValueById(this._lipSyncParameterIds.at(i), v);\r\n                    }\r\n                }\r\n            }\r\n            for (; c < this._motionData.curveCount &&\r\n                curves.at(c).type ==\r\n                    CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {\r\n                parameterIndex = model.getParameterIndex(curves.at(c).id);\r\n                if (parameterIndex == -1) {\r\n                    continue;\r\n                }\r\n                value = evaluateCurve(this._motionData, c, time);\r\n                model.setParameterValueByIndex(parameterIndex, value);\r\n            }\r\n            if (timeOffsetSeconds >= this._motionData.duration) {\r\n                if (this._isLoop) {\r\n                    motionQueueEntry.setStartTime(userTimeSeconds);\r\n                    if (this._isLoopFadeIn) {\r\n                        motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n                    }\r\n                }\r\n                else {\r\n                    if (this._onFinishedMotion) {\r\n                        this._onFinishedMotion(this);\r\n                    }\r\n                    motionQueueEntry.setIsFinished(true);\r\n                }\r\n            }\r\n            this._lastWeight = fadeWeight;\r\n        };\r\n        CubismMotion.prototype.setIsLoop = function (loop) {\r\n            this._isLoop = loop;\r\n        };\r\n        CubismMotion.prototype.isLoop = function () {\r\n            return this._isLoop;\r\n        };\r\n        CubismMotion.prototype.setIsLoopFadeIn = function (loopFadeIn) {\r\n            this._isLoopFadeIn = loopFadeIn;\r\n        };\r\n        CubismMotion.prototype.isLoopFadeIn = function () {\r\n            return this._isLoopFadeIn;\r\n        };\r\n        CubismMotion.prototype.getDuration = function () {\r\n            return this._isLoop ? -1.0 : this._loopDurationSeconds;\r\n        };\r\n        CubismMotion.prototype.getLoopDuration = function () {\r\n            return this._loopDurationSeconds;\r\n        };\r\n        CubismMotion.prototype.setParameterFadeInTime = function (parameterId, value) {\r\n            var curves = this._motionData.curves;\r\n            for (var i = 0; i < this._motionData.curveCount; ++i) {\r\n                if (parameterId == curves.at(i).id) {\r\n                    curves.at(i).fadeInTime = value;\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        CubismMotion.prototype.setParameterFadeOutTime = function (parameterId, value) {\r\n            var curves = this._motionData.curves;\r\n            for (var i = 0; i < this._motionData.curveCount; ++i) {\r\n                if (parameterId == curves.at(i).id) {\r\n                    curves.at(i).fadeOutTime = value;\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        CubismMotion.prototype.getParameterFadeInTime = function (parameterId) {\r\n            var curves = this._motionData.curves;\r\n            for (var i = 0; i < this._motionData.curveCount; ++i) {\r\n                if (parameterId == curves.at(i).id) {\r\n                    return curves.at(i).fadeInTime;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n        CubismMotion.prototype.getParameterFadeOutTime = function (parameterId) {\r\n            var curves = this._motionData.curves;\r\n            for (var i = 0; i < this._motionData.curveCount; ++i) {\r\n                if (parameterId == curves.at(i).id) {\r\n                    return curves.at(i).fadeOutTime;\r\n                }\r\n            }\r\n            return -1;\r\n        };\r\n        CubismMotion.prototype.setEffectIds = function (eyeBlinkParameterIds, lipSyncParameterIds) {\r\n            this._eyeBlinkParameterIds = eyeBlinkParameterIds;\r\n            this._lipSyncParameterIds = lipSyncParameterIds;\r\n        };\r\n        CubismMotion.prototype.release = function () {\r\n            this._motionData = void 0;\r\n            this._motionData = null;\r\n        };\r\n        CubismMotion.prototype.parse = function (motionJson, size) {\r\n            this._motionData = new CubismMotionData();\r\n            var json = new CubismMotionJson(motionJson, size);\r\n            this._motionData.duration = json.getMotionDuration();\r\n            this._motionData.loop = json.isMotionLoop();\r\n            this._motionData.curveCount = json.getMotionCurveCount();\r\n            this._motionData.fps = json.getMotionFps();\r\n            this._motionData.eventCount = json.getEventCount();\r\n            if (json.isExistMotionFadeInTime()) {\r\n                this._fadeInSeconds =\r\n                    json.getMotionFadeInTime() < 0.0 ? 1.0 : json.getMotionFadeInTime();\r\n            }\r\n            else {\r\n                this._fadeInSeconds = 1.0;\r\n            }\r\n            if (json.isExistMotionFadeOutTime()) {\r\n                this._fadeOutSeconds =\r\n                    json.getMotionFadeOutTime() < 0.0 ? 1.0 : json.getMotionFadeOutTime();\r\n            }\r\n            else {\r\n                this._fadeOutSeconds = 1.0;\r\n            }\r\n            this._motionData.curves.updateSize(this._motionData.curveCount, CubismMotionCurve, true);\r\n            this._motionData.segments.updateSize(json.getMotionTotalSegmentCount(), CubismMotionSegment, true);\r\n            this._motionData.points.updateSize(json.getMotionTotalPointCount(), CubismMotionPoint, true);\r\n            this._motionData.events.updateSize(this._motionData.eventCount, CubismMotionEvent, true);\r\n            var totalPointCount = 0;\r\n            var totalSegmentCount = 0;\r\n            for (var curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {\r\n                if (json.getMotionCurveTarget(curveCount) == TargetNameModel) {\r\n                    this._motionData.curves.at(curveCount).type =\r\n                        CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n                }\r\n                else if (json.getMotionCurveTarget(curveCount) == TargetNameParameter) {\r\n                    this._motionData.curves.at(curveCount).type =\r\n                        CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n                }\r\n                else if (json.getMotionCurveTarget(curveCount) == TargetNamePartOpacity) {\r\n                    this._motionData.curves.at(curveCount).type =\r\n                        CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n                }\r\n                this._motionData.curves.at(curveCount).id = json.getMotionCurveId(curveCount);\r\n                this._motionData.curves.at(curveCount).baseSegmentIndex = totalSegmentCount;\r\n                this._motionData.curves.at(curveCount).fadeInTime = json.isExistMotionCurveFadeInTime(curveCount)\r\n                    ? json.getMotionCurveFadeInTime(curveCount)\r\n                    : -1.0;\r\n                this._motionData.curves.at(curveCount).fadeOutTime = json.isExistMotionCurveFadeOutTime(curveCount)\r\n                    ? json.getMotionCurveFadeOutTime(curveCount)\r\n                    : -1.0;\r\n                for (var segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount);) {\r\n                    if (segmentPosition == 0) {\r\n                        this._motionData.segments.at(totalSegmentCount).basePointIndex = totalPointCount;\r\n                        if (this._motionData.points.at(totalPointCount)) {\r\n                            this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition);\r\n                            this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                        }\r\n                        totalPointCount += 1;\r\n                        segmentPosition += 2;\r\n                    }\r\n                    else {\r\n                        this._motionData.segments.at(totalSegmentCount).basePointIndex =\r\n                            totalPointCount - 1;\r\n                    }\r\n                    var segment = json.getMotionCurveSegment(curveCount, segmentPosition);\r\n                    switch (segment) {\r\n                        case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\r\n                            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                                CubismMotionSegmentType.CubismMotionSegmentType_Linear;\r\n                            this._motionData.segments.at(totalSegmentCount).evaluate = linearEvaluate;\r\n                            if (this._motionData.points.at(totalPointCount)) {\r\n                                this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                                this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n                            }\r\n                            totalPointCount += 1;\r\n                            segmentPosition += 3;\r\n                            break;\r\n                        }\r\n                        case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\r\n                            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                                CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\r\n                            this._motionData.segments.at(totalSegmentCount).evaluate = bezierEvaluate;\r\n                            if (this._motionData.points.at(totalPointCount)) {\r\n                                this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                                this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n                            }\r\n                            if (this._motionData.points.at(totalPointCount + 1)) {\r\n                                this._motionData.points.at(totalPointCount + 1).time = json.getMotionCurveSegment(curveCount, segmentPosition + 3);\r\n                                this._motionData.points.at(totalPointCount + 1).value = json.getMotionCurveSegment(curveCount, segmentPosition + 4);\r\n                            }\r\n                            if (this._motionData.points.at(totalPointCount + 2)) {\r\n                                this._motionData.points.at(totalPointCount + 2).time = json.getMotionCurveSegment(curveCount, segmentPosition + 5);\r\n                                this._motionData.points.at(totalPointCount + 2).value = json.getMotionCurveSegment(curveCount, segmentPosition + 6);\r\n                            }\r\n                            totalPointCount += 3;\r\n                            segmentPosition += 7;\r\n                            break;\r\n                        }\r\n                        case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\r\n                            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                                CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\r\n                            this._motionData.segments.at(totalSegmentCount).evaluate = steppedEvaluate;\r\n                            if (this._motionData.points.at(totalPointCount)) {\r\n                                this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                                this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n                            }\r\n                            totalPointCount += 1;\r\n                            segmentPosition += 3;\r\n                            break;\r\n                        }\r\n                        case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\r\n                            this._motionData.segments.at(totalSegmentCount).segmentType =\r\n                                CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\r\n                            this._motionData.segments.at(totalSegmentCount).evaluate = inverseSteppedEvaluate;\r\n                            if (this._motionData.points.at(totalPointCount)) {\r\n                                this._motionData.points.at(totalPointCount).time = json.getMotionCurveSegment(curveCount, segmentPosition + 1);\r\n                                this._motionData.points.at(totalPointCount).value = json.getMotionCurveSegment(curveCount, segmentPosition + 2);\r\n                            }\r\n                            totalPointCount += 1;\r\n                            segmentPosition += 3;\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            cubismdebug_1.CSM_ASSERT(0);\r\n                            break;\r\n                        }\r\n                    }\r\n                    ++this._motionData.curves.at(curveCount).segmentCount;\r\n                    ++totalSegmentCount;\r\n                }\r\n            }\r\n            for (var userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {\r\n                this._motionData.events.at(userdatacount).fireTime = json.getEventTime(userdatacount);\r\n                this._motionData.events.at(userdatacount).value = json.getEventValue(userdatacount);\r\n            }\r\n            json.release();\r\n            json = void 0;\r\n            json = null;\r\n        };\r\n        CubismMotion.prototype.getFiredEvent = function (beforeCheckTimeSeconds, motionTimeSeconds) {\r\n            this._firedEventValues.updateSize(0);\r\n            for (var u = 0; u < this._motionData.eventCount; ++u) {\r\n                if (this._motionData.events.at(u).fireTime > beforeCheckTimeSeconds &&\r\n                    this._motionData.events.at(u).fireTime <= motionTimeSeconds) {\r\n                    this._firedEventValues.pushBack(new csmString(this._motionData.events.at(u).value.s));\r\n                }\r\n            }\r\n            return this._firedEventValues;\r\n        };\r\n        return CubismMotion;\r\n    }(ACubismMotion));\r\n    Live2DCubismFramework.CubismMotion = CubismMotion;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb24udHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb24udHM/ZmFmZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21tb3Rpb25qc29uIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25qc29uJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbmludGVybmFsIH0gZnJvbSAnLi9jdWJpc21tb3Rpb25pbnRlcm5hbCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBhY3ViaXNtbW90aW9uIH0gZnJvbSAnLi9hY3ViaXNtbW90aW9uJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY3ViaXNtbW9kZWwnO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtZnJhbWV3b3JrIH0gZnJvbSAnLi4vbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkgfSBmcm9tICcuL2N1YmlzbW1vdGlvbnF1ZXVlZW50cnknO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbWF0aCB9IGZyb20gJy4uL21hdGgvY3ViaXNtbWF0aCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjdWJpc21pZCB9IGZyb20gJy4uL2lkL2N1YmlzbWlkJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGNzbXN0cmluZyB9IGZyb20gJy4uL3R5cGUvY3Ntc3RyaW5nJztcclxuaW1wb3J0IHsgQ3ViaXNtTG9nRGVidWcsIENTTV9BU1NFUlQgfSBmcm9tICcuLi91dGlscy9jdWJpc21kZWJ1Zyc7XHJcbmltcG9ydCBjc21TdHJpbmcgPSBjc21zdHJpbmcuY3NtU3RyaW5nO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uRGF0YSA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvbkRhdGE7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25TZWdtZW50ID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uU2VnbWVudDtcclxuaW1wb3J0IEN1YmlzbU1vdGlvblBvaW50ID0gY3ViaXNtbW90aW9uaW50ZXJuYWwuQ3ViaXNtTW90aW9uUG9pbnQ7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25FdmVudCA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvbkV2ZW50O1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZTtcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25DdXJ2ZSA9IGN1YmlzbW1vdGlvbmludGVybmFsLkN1YmlzbU1vdGlvbkN1cnZlO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQgPSBjdWJpc21tb3Rpb25pbnRlcm5hbC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldDtcclxuaW1wb3J0IGNzbVZlY3RvciA9IGNzbXZlY3Rvci5jc21WZWN0b3I7XHJcbmltcG9ydCBDdWJpc21NYXRoID0gY3ViaXNtbWF0aC5DdWJpc21NYXRoO1xyXG5pbXBvcnQgQ3ViaXNtTW90aW9uUXVldWVFbnRyeSA9IGN1YmlzbW1vdGlvbnF1ZXVlZW50cnkuQ3ViaXNtTW90aW9uUXVldWVFbnRyeTtcclxuaW1wb3J0IEN1YmlzbUZyYW1ld29yayA9IGN1YmlzbWZyYW1ld29yay5DdWJpc21GcmFtZXdvcms7XHJcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xyXG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcclxuaW1wb3J0IEZpbmlzaGVkTW90aW9uQ2FsbGJhY2sgPSBhY3ViaXNtbW90aW9uLkZpbmlzaGVkTW90aW9uQ2FsbGJhY2s7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25Kc29uID0gY3ViaXNtbW90aW9uanNvbi5DdWJpc21Nb3Rpb25Kc29uO1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIGNvbnN0IEVmZmVjdE5hbWVFeWVCbGluayA9ICdFeWVCbGluayc7XHJcbiAgY29uc3QgRWZmZWN0TmFtZUxpcFN5bmMgPSAnTGlwU3luYyc7XHJcbiAgY29uc3QgVGFyZ2V0TmFtZU1vZGVsID0gJ01vZGVsJztcclxuICBjb25zdCBUYXJnZXROYW1lUGFyYW1ldGVyID0gJ1BhcmFtZXRlcic7XHJcbiAgY29uc3QgVGFyZ2V0TmFtZVBhcnRPcGFjaXR5ID0gJ1BhcnRPcGFjaXR5JztcclxuXHJcbiAgZnVuY3Rpb24gbGVycFBvaW50cyhcclxuICAgIGE6IEN1YmlzbU1vdGlvblBvaW50LFxyXG4gICAgYjogQ3ViaXNtTW90aW9uUG9pbnQsXHJcbiAgICB0OiBudW1iZXJcclxuICApOiBDdWJpc21Nb3Rpb25Qb2ludCB7XHJcbiAgICBjb25zdCByZXN1bHQ6IEN1YmlzbU1vdGlvblBvaW50ID0gbmV3IEN1YmlzbU1vdGlvblBvaW50KCk7XHJcblxyXG4gICAgcmVzdWx0LnRpbWUgPSBhLnRpbWUgKyAoYi50aW1lIC0gYS50aW1lKSAqIHQ7XHJcbiAgICByZXN1bHQudmFsdWUgPSBhLnZhbHVlICsgKGIudmFsdWUgLSBhLnZhbHVlKSAqIHQ7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxpbmVhckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdsaW5lYXJFdmFsdWF0ZScscG9pbnRzKVxyXG4gICAgLy8gbGV0IHQ6IG51bWJlciA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1sxXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xyXG4gICAgbGV0IHQ6IG51bWJlcjtcclxuICAgIGlmKHBvaW50c1swXSAmJiBwb2ludHNbMF0udGltZSAhPSAwKXtcclxuICAgICAgdCA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1sxXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xyXG4gICAgfWVsc2UgaWYocG9pbnRzWzJdICYmIHBvaW50c1syXS50aW1lKXtcclxuICAgICAgdCA9ICh0aW1lIC0gcG9pbnRzWzFdLnRpbWUpIC8gKHBvaW50c1syXS50aW1lIC0gcG9pbnRzWzFdLnRpbWUpO1xyXG4gICAgfWVsc2UgaWYocG9pbnRzLmxlbmd0aD4wKXtcclxuICAgICAgdCA9ICh0aW1lIC0gcG9pbnRzWzBdLnRpbWUpIC8gKHBvaW50c1sxXS50aW1lIC0gcG9pbnRzWzBdLnRpbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0IDwgMC4wKSB7XHJcbiAgICAgIHQgPSAwLjA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBvaW50c1swXS52YWx1ZSArIChwb2ludHNbMV0udmFsdWUgLSBwb2ludHNbMF0udmFsdWUpICogdDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGJlemllckV2YWx1YXRlKHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSwgdGltZTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIGxldCB0OiBudW1iZXIgPSAodGltZSAtIHBvaW50c1swXS50aW1lKSAvIChwb2ludHNbM10udGltZSAtIHBvaW50c1swXS50aW1lKTtcclxuXHJcbiAgICBpZiAodCA8IDAuMCkge1xyXG4gICAgICB0ID0gMC4wO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHAwMTogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1swXSwgcG9pbnRzWzFdLCB0KTtcclxuICAgIGNvbnN0IHAxMjogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1sxXSwgcG9pbnRzWzJdLCB0KTtcclxuICAgIGNvbnN0IHAyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHBvaW50c1syXSwgcG9pbnRzWzNdLCB0KTtcclxuXHJcbiAgICBjb25zdCBwMDEyOiBDdWJpc21Nb3Rpb25Qb2ludCA9IGxlcnBQb2ludHMocDAxLCBwMTIsIHQpO1xyXG4gICAgY29uc3QgcDEyMzogQ3ViaXNtTW90aW9uUG9pbnQgPSBsZXJwUG9pbnRzKHAxMiwgcDIzLCB0KTtcclxuXHJcbiAgICByZXR1cm4gbGVycFBvaW50cyhwMDEyLCBwMTIzLCB0KS52YWx1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0ZXBwZWRFdmFsdWF0ZShwb2ludHM6IEN1YmlzbU1vdGlvblBvaW50W10sIHRpbWU6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcG9pbnRzWzBdLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZShcclxuICAgIHBvaW50czogQ3ViaXNtTW90aW9uUG9pbnRbXSxcclxuICAgIHRpbWU6IG51bWJlclxyXG4gICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcG9pbnRzWzFdLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZXZhbHVhdGVDdXJ2ZShcclxuICAgIG1vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGEsXHJcbiAgICBpbmRleDogbnVtYmVyLFxyXG4gICAgdGltZTogbnVtYmVyXHJcbiAgKTogbnVtYmVyIHtcclxuICAgIC8vIEZpbmQgc2VnbWVudCB0byBldmFsdWF0ZS5cclxuICAgIGNvbnN0IGN1cnZlOiBDdWJpc21Nb3Rpb25DdXJ2ZSA9IG1vdGlvbkRhdGEuY3VydmVzLmF0KGluZGV4KTtcclxuXHJcbiAgICBsZXQgdGFyZ2V0ID0gLTE7XHJcbiAgICBjb25zdCB0b3RhbFNlZ21lbnRDb3VudDogbnVtYmVyID1cclxuICAgICAgY3VydmUuYmFzZVNlZ21lbnRJbmRleCArIGN1cnZlLnNlZ21lbnRDb3VudDtcclxuICAgIGxldCBwb2ludFBvc2l0aW9uID0gMDtcclxuICAgIGZvciAobGV0IGk6IG51bWJlciA9IGN1cnZlLmJhc2VTZWdtZW50SW5kZXg7IGkgPCB0b3RhbFNlZ21lbnRDb3VudDsgKytpKSB7XHJcbiAgICAgIC8vIEdldCBmaXJzdCBwb2ludCBvZiBuZXh0IHNlZ21lbnQuXHJcbiAgICAgIC8vIOiOt+WPluS4i+S4queCue+8jOWmguaenOaYr+i0nei1m+WwlOabsue6vyDliJnnm7TmjqXliqDkuIoz5L2/5YW25rWB55WF77yM5ZCm5YiZ5YqgMVxyXG4gICAgICBwb2ludFBvc2l0aW9uID0gbW90aW9uRGF0YS5zZWdtZW50cy5hdChpKS5iYXNlUG9pbnRJbmRleCArIChtb3Rpb25EYXRhLnNlZ21lbnRzLmF0KGkpLnNlZ21lbnRUeXBlID09IEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0JlemllciA/IDMgOiAxKTtcclxuXHJcbiAgICAgIC8vIOmDqOWIhuaooeWei+eCueS9jei2heWHuuacgOWkp+WAvFxyXG4gICAgICBpZihwb2ludFBvc2l0aW9uPj1tb3Rpb25EYXRhLnBvaW50cy5fc2l6ZSl7XHJcbiAgICAgICAgcG9pbnRQb3NpdGlvbiA9IG1vdGlvbkRhdGEucG9pbnRzLl9zaXplIC0gM1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBjb25zb2xlLndhcm4oJ3RpbWUnLHRpbWUpXHJcblxyXG4gICAgICAvLyBCcmVhayBpZiB0aW1lIGxpZXMgd2l0aGluIGN1cnJlbnQgc2VnbWVudC5cclxuXHJcbiAgICAgIGlmIChtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS50aW1lID4gdGltZSkge1xyXG4gICAgICAgIHRhcmdldCA9IGk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGFyZ2V0ID09IC0xKSB7XHJcbiAgICAgIHJldHVybiBtb3Rpb25EYXRhLnBvaW50cy5hdChwb2ludFBvc2l0aW9uKS52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZWdtZW50OiBDdWJpc21Nb3Rpb25TZWdtZW50ID0gbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0YXJnZXQpO1xyXG5cclxuICAgIHJldHVybiBzZWdtZW50LmV2YWx1YXRlKFxyXG4gICAgICBtb3Rpb25EYXRhLnBvaW50cy5nZXQoc2VnbWVudC5iYXNlUG9pbnRJbmRleCksXHJcbiAgICAgIHRpbWVcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgq/jg6njgrlcclxuICAgKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OBruOCr+ODqeOCueOAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb24gZXh0ZW5kcyBBQ3ViaXNtTW90aW9uIHtcclxuICAgIC8qKlxyXG4gICAgICog5Yib5bu65a6e5L6LXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGJ1ZmZlciBtb3Rpb24zLmpzb27lt7Lor7vlj5bnmoTnvJPlhrLlrZjlgqjlmahcclxuICAgICAqIEBwYXJhbSBzaXplIOe8k+WGsuWMuuWkp+Wwj1xyXG4gICAgICogQHBhcmFtIG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyIOWKqOS9nOWGjeeUn+e7k+adn+aXtuiwg+eUqOeahOWbnuiwg+WHveaVsFxyXG4gICAgICogQHJldHVybiDkvZzmiJDjgZXjgozjgZ/jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoXHJcbiAgICAgIGJ1ZmZlcjogQXJyYXlCdWZmZXIsXHJcbiAgICAgIHNpemU6IG51bWJlcixcclxuICAgICAgb25GaW5pc2hlZE1vdGlvbkhhbmRsZXI/OiBGaW5pc2hlZE1vdGlvbkNhbGxiYWNrXHJcbiAgICApOiBDdWJpc21Nb3Rpb24ge1xyXG4gICAgICBjb25zdCByZXQgPSBuZXcgQ3ViaXNtTW90aW9uKCk7XHJcblxyXG4gICAgICByZXQucGFyc2UoYnVmZmVyLCBzaXplKTtcclxuICAgICAgcmV0Ll9zb3VyY2VGcmFtZVJhdGUgPSByZXQuX21vdGlvbkRhdGEuZnBzO1xyXG4gICAgICByZXQuX2xvb3BEdXJhdGlvblNlY29uZHMgPSByZXQuX21vdGlvbkRhdGEuZHVyYXRpb247XHJcbiAgICAgIHJldC5fb25GaW5pc2hlZE1vdGlvbiA9IG9uRmluaXNoZWRNb3Rpb25IYW5kbGVyO1xyXG5cclxuICAgICAgLy8gTk9URTogRWRpdG9y44Gn44Gv44Or44O844OX44GC44KK44Gu44Oi44O844K344On44Oz5pu444GN5Ye644GX44Gv6Z2e5a++5b+cXHJcbiAgICAgIC8vIHJldC0+X2xvb3AgPSAocmV0LT5fbW90aW9uRGF0YS0+TG9vcCA+IDApO1xyXG4gICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omn6KGM5qih5Z6L5Y+C5pWw5pu05pawXHJcbiAgICAgKiBAcGFyYW0gbW9kZWwgICAgICAgICAgICAg5a+56LGh55qE5qih5Z6LXHJcbiAgICAgKiBAcGFyYW0gdXNlclRpbWVTZWNvbmRzICAg5b2T5YmN5pe26Ze0W+enkl1cclxuICAgICAqIEBwYXJhbSBmYWRlV2VpZ2h0ICAgICAgICDliqjkvZznmoTph43ph49cclxuICAgICAqIEBwYXJhbSBtb3Rpb25RdWV1ZUVudHJ5ICBDdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXLnrqHnkIbnmoTliqjkvZxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRvVXBkYXRlUGFyYW1ldGVycyhcclxuICAgICAgbW9kZWw6IEN1YmlzbU1vZGVsLFxyXG4gICAgICB1c2VyVGltZVNlY29uZHM6IG51bWJlcixcclxuICAgICAgZmFkZVdlaWdodDogbnVtYmVyLFxyXG4gICAgICBtb3Rpb25RdWV1ZUVudHJ5OiBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5XHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgaWYgKHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rID09IG51bGwpIHtcclxuICAgICAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9IEN1YmlzbUZyYW1ld29yay5nZXRJZE1hbmFnZXIoKS5nZXRJZChcclxuICAgICAgICAgIEVmZmVjdE5hbWVFeWVCbGlua1xyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID09IG51bGwpIHtcclxuICAgICAgICB0aGlzLl9tb2RlbEN1cnZlSWRMaXBTeW5jID0gQ3ViaXNtRnJhbWV3b3JrLmdldElkTWFuYWdlcigpLmdldElkKFxyXG4gICAgICAgICAgRWZmZWN0TmFtZUxpcFN5bmNcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgdGltZU9mZnNldFNlY29uZHM6IG51bWJlciA9XHJcbiAgICAgICAgdXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRTdGFydFRpbWUoKTtcclxuXHJcbiAgICAgIGlmICh0aW1lT2Zmc2V0U2Vjb25kcyA8IDAuMCkge1xyXG4gICAgICAgIHRpbWVPZmZzZXRTZWNvbmRzID0gMC4wOyAvLyDjgqjjg6njg7zlm57pgb9cclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGxpcFN5bmNWYWx1ZTogbnVtYmVyID0gTnVtYmVyLk1BWF9WQUxVRTtcclxuICAgICAgbGV0IGV5ZUJsaW5rVmFsdWU6IG51bWJlciA9IE51bWJlci5NQVhfVkFMVUU7XHJcblxyXG4gICAgICAvL+OBvuOBsOOBn+OBjeOAgeODquODg+ODl+OCt+ODs+OCr+OBruOBhuOBoeODouODvOOCt+ODp+ODs+OBrumBqeeUqOOCkuaknOWHuuOBmeOCi+OBn+OCgeOBruODk+ODg+ODiO+8iG1heEZsYWdDb3VudOWAi+OBvuOBp1xyXG4gICAgICBjb25zdCBNYXhUYXJnZXRTaXplID0gNjQ7XHJcbiAgICAgIGxldCBsaXBTeW5jRmxhZ3MgPSAwO1xyXG4gICAgICBsZXQgZXllQmxpbmtGbGFncyA9IDA7XHJcblxyXG4gICAgICAvL+eerOOBjeOAgeODquODg+ODl+OCt+ODs+OCr+OBruOCv+ODvOOCsuODg+ODiOaVsOOBjOS4iumZkOOCkui2heOBiOOBpuOBhOOCi+WgtOWQiFxyXG4gICAgICBpZiAodGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSkge1xyXG4gICAgICAgIEN1YmlzbUxvZ0RlYnVnKFxyXG4gICAgICAgICAgJ3RvbyBtYW55IGV5ZSBibGluayB0YXJnZXRzIDogezB9JyxcclxuICAgICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpID4gTWF4VGFyZ2V0U2l6ZSkge1xyXG4gICAgICAgIEN1YmlzbUxvZ0RlYnVnKFxyXG4gICAgICAgICAgJ3RvbyBtYW55IGxpcCBzeW5jIHRhcmdldHMgOiB7MH0nLFxyXG4gICAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKClcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB0bXBGYWRlSW46IG51bWJlciA9XHJcbiAgICAgICAgdGhpcy5fZmFkZUluU2Vjb25kcyA8PSAwLjBcclxuICAgICAgICAgID8gMS4wXHJcbiAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcclxuICAgICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFkZUluU2Vjb25kc1xyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgY29uc3QgdG1wRmFkZU91dDogbnVtYmVyID1cclxuICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA8PSAwLjAgfHwgbW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgPCAwLjBcclxuICAgICAgICAgID8gMS4wXHJcbiAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcclxuICAgICAgICAgICAgICAobW90aW9uUXVldWVFbnRyeS5nZXRFbmRUaW1lKCkgLSB1c2VyVGltZVNlY29uZHMpIC9cclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgIGxldCB2YWx1ZTogbnVtYmVyO1xyXG4gICAgICBsZXQgYzogbnVtYmVyLCBwYXJhbWV0ZXJJbmRleDogbnVtYmVyO1xyXG5cclxuICAgICAgLy8gJ1JlcGVhdCcgdGltZSBhcyBuZWNlc3NhcnkuXHJcbiAgICAgIGxldCB0aW1lOiBudW1iZXIgPSB0aW1lT2Zmc2V0U2Vjb25kcztcclxuXHJcbiAgICAgIGlmICh0aGlzLl9pc0xvb3ApIHtcclxuICAgICAgICB3aGlsZSAodGltZSA+IHRoaXMuX21vdGlvbkRhdGEuZHVyYXRpb24pIHtcclxuICAgICAgICAgIHRpbWUgLT0gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xyXG5cclxuICAgICAgLy8gRXZhbHVhdGUgbW9kZWwgY3VydmVzLlxyXG4gICAgICBmb3IgKFxyXG4gICAgICAgIGMgPSAwO1xyXG4gICAgICAgIGMgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQgJiZcclxuICAgICAgICBjdXJ2ZXMuYXQoYykudHlwZSA9PVxyXG4gICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWw7XHJcbiAgICAgICAgKytjXHJcbiAgICAgICkge1xyXG4gICAgICAgIC8vIEV2YWx1YXRlIGN1cnZlIGFuZCBjYWxsIGhhbmRsZXIuXHJcbiAgICAgICAgLy8gY29uc29sZS53YXJuKCdldmFsdWF0ZUN1cnZlMSxFdmFsdWF0ZSBjdXJ2ZSBhbmQgY2FsbCBoYW5kbGVyLicpXHJcbiAgICAgICAgdmFsdWUgPSBldmFsdWF0ZUN1cnZlKHRoaXMuX21vdGlvbkRhdGEsIGMsIHRpbWUpO1xyXG5cclxuICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmlkID09IHRoaXMuX21vZGVsQ3VydmVJZEV5ZUJsaW5rKSB7XHJcbiAgICAgICAgICBleWVCbGlua1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjdXJ2ZXMuYXQoYykuaWQgPT0gdGhpcy5fbW9kZWxDdXJ2ZUlkTGlwU3luYykge1xyXG4gICAgICAgICAgbGlwU3luY1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCA9IDA7XHJcblxyXG4gICAgICBmb3IgKFxyXG4gICAgICAgIDtcclxuICAgICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXHJcbiAgICAgICAgY3VydmVzLmF0KGMpLnR5cGUgPT1cclxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcmFtZXRlcjtcclxuICAgICAgICArK2NcclxuICAgICAgKSB7XHJcbiAgICAgICAgcGFyYW1ldGVyTW90aW9uQ3VydmVDb3VudCsrO1xyXG5cclxuICAgICAgICAvLyBGaW5kIHBhcmFtZXRlciBpbmRleC5cclxuICAgICAgICBwYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KGN1cnZlcy5hdChjKS5pZCk7XHJcblxyXG4gICAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZTogbnVtYmVyID0gbW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KFxyXG4gICAgICAgICAgcGFyYW1ldGVySW5kZXhcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuXHJcbiAgICAgICAgLy8gY29uc29sZS53YXJuKCdldmFsdWF0ZUN1cnZlMixFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuJylcclxuICAgICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XHJcblxyXG4gICAgICAgIGlmIChleWVCbGlua1ZhbHVlICE9IE51bWJlci5NQVhfVkFMVUUpIHtcclxuICAgICAgICAgIGZvciAoXHJcbiAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgaSA8IHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmdldFNpemUoKSAmJiBpIDwgTWF4VGFyZ2V0U2l6ZTtcclxuICAgICAgICAgICAgKytpXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpID09IGN1cnZlcy5hdChjKS5pZCkge1xyXG4gICAgICAgICAgICAgIHZhbHVlICo9IGV5ZUJsaW5rVmFsdWU7XHJcbiAgICAgICAgICAgICAgZXllQmxpbmtGbGFncyB8PSAxIDw8IGk7XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsaXBTeW5jVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xyXG4gICAgICAgICAgZm9yIChcclxuICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICBpIDwgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XHJcbiAgICAgICAgICAgICsraVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzLmF0KGkpID09IGN1cnZlcy5hdChjKS5pZCkge1xyXG4gICAgICAgICAgICAgIHZhbHVlICs9IGxpcFN5bmNWYWx1ZTtcclxuICAgICAgICAgICAgICBsaXBTeW5jRmxhZ3MgfD0gMSA8PCBpO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdjogbnVtYmVyO1xyXG5cclxuICAgICAgICAvLyDlkITlj4LmlbDnmoTmt6HlhaXmt6Hlh7pcclxuICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPCAwLjAgJiYgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lIDwgMC4wKSB7XHJcbiAgICAgICAgICAvLyDlupTnlKjliqjkvZzmt6HlhaXmt6Hlh7pcclxuICAgICAgICAgIHYgPSBzb3VyY2VWYWx1ZSArICh2YWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIOWvueS6juWPguaVsOiuvuWumuS4uua3oeWFpea3oeWHuuaIlua3oeWHuuaXtu+8jOmAgueUqOivpeWPguaVsFxyXG4gICAgICAgICAgbGV0IGZpbjogbnVtYmVyO1xyXG4gICAgICAgICAgbGV0IGZvdXQ6IG51bWJlcjtcclxuXHJcbiAgICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVJblRpbWUgPCAwLjApIHtcclxuICAgICAgICAgICAgZmluID0gdG1wRmFkZUluO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZmluID1cclxuICAgICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZUluVGltZSA9PSAwLjBcclxuICAgICAgICAgICAgICAgID8gMS4wXHJcbiAgICAgICAgICAgICAgICA6IEN1YmlzbU1hdGguZ2V0RWFzaW5nU2luZShcclxuICAgICAgICAgICAgICAgICAgICAodXNlclRpbWVTZWNvbmRzIC0gbW90aW9uUXVldWVFbnRyeS5nZXRGYWRlSW5TdGFydFRpbWUoKSkgL1xyXG4gICAgICAgICAgICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVJblRpbWVcclxuICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lIDwgMC4wKSB7XHJcbiAgICAgICAgICAgIGZvdXQgPSB0bXBGYWRlT3V0O1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZm91dCA9XHJcbiAgICAgICAgICAgICAgY3VydmVzLmF0KGMpLmZhZGVPdXRUaW1lID09IDAuMCB8fFxyXG4gICAgICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIDwgMC4wXHJcbiAgICAgICAgICAgICAgICA/IDEuMFxyXG4gICAgICAgICAgICAgICAgOiBDdWJpc21NYXRoLmdldEVhc2luZ1NpbmUoXHJcbiAgICAgICAgICAgICAgICAgICAgKG1vdGlvblF1ZXVlRW50cnkuZ2V0RW5kVGltZSgpIC0gdXNlclRpbWVTZWNvbmRzKSAvXHJcbiAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZXMuYXQoYykuZmFkZU91dFRpbWVcclxuICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBwYXJhbVdlaWdodDogbnVtYmVyID0gdGhpcy5fd2VpZ2h0ICogZmluICogZm91dDtcclxuXHJcbiAgICAgICAgICAvLyDlupTnlKjmr4/kuKrlj4LmlbDnmoTmt6HlhaXmt6Hlh7pcclxuICAgICAgICAgIHYgPSBzb3VyY2VWYWx1ZSArICh2YWx1ZSAtIHNvdXJjZVZhbHVlKSAqIHBhcmFtV2VpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUluZGV4KHBhcmFtZXRlckluZGV4LCB2LCAxLjApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKGV5ZUJsaW5rVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xyXG4gICAgICAgICAgZm9yIChcclxuICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICBpIDwgdGhpcy5fZXllQmxpbmtQYXJhbWV0ZXJJZHMuZ2V0U2l6ZSgpICYmIGkgPCBNYXhUYXJnZXRTaXplO1xyXG4gICAgICAgICAgICArK2lcclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VWYWx1ZTogbnVtYmVyID0gbW9kZWwuZ2V0UGFyYW1ldGVyVmFsdWVCeUlkKFxyXG4gICAgICAgICAgICAgIHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyDlnKjliqjkvZzopobnm5bml7bkuI3kvb/nlKjnnKjnnLxcclxuICAgICAgICAgICAgaWYgKChleWVCbGlua0ZsYWdzID4+IGkpICYgMHgwMSkge1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB2OiBudW1iZXIgPVxyXG4gICAgICAgICAgICAgIHNvdXJjZVZhbHVlICsgKGV5ZUJsaW5rVmFsdWUgLSBzb3VyY2VWYWx1ZSkgKiBmYWRlV2VpZ2h0O1xyXG5cclxuICAgICAgICAgICAgbW9kZWwuc2V0UGFyYW1ldGVyVmFsdWVCeUlkKHRoaXMuX2V5ZUJsaW5rUGFyYW1ldGVySWRzLmF0KGkpLCB2KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsaXBTeW5jVmFsdWUgIT0gTnVtYmVyLk1BWF9WQUxVRSkge1xyXG4gICAgICAgICAgZm9yIChcclxuICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICBpIDwgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5nZXRTaXplKCkgJiYgaSA8IE1heFRhcmdldFNpemU7XHJcbiAgICAgICAgICAgICsraVxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZVZhbHVlOiBudW1iZXIgPSBtb2RlbC5nZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQoXHJcbiAgICAgICAgICAgICAgdGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8g44Oi44O844K344On44Oz44Gn44Gu5LiK5pu444GN44GM44GC44Gj44Gf5pmC44Gr44Gv44Oq44OD44OX44K344Oz44Kv44Gv6YGp55So44GX44Gq44GEXHJcbiAgICAgICAgICAgIGlmICgobGlwU3luY0ZsYWdzID4+IGkpICYgMHgwMSkge1xyXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB2OiBudW1iZXIgPVxyXG4gICAgICAgICAgICAgIHNvdXJjZVZhbHVlICsgKGxpcFN5bmNWYWx1ZSAtIHNvdXJjZVZhbHVlKSAqIGZhZGVXZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBtb2RlbC5zZXRQYXJhbWV0ZXJWYWx1ZUJ5SWQodGhpcy5fbGlwU3luY1BhcmFtZXRlcklkcy5hdChpKSwgdik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKFxyXG4gICAgICAgIDtcclxuICAgICAgICBjIDwgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50ICYmXHJcbiAgICAgICAgY3VydmVzLmF0KGMpLnR5cGUgPT1cclxuICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5O1xyXG4gICAgICAgICsrY1xyXG4gICAgICApIHtcclxuICAgICAgICAvLyBGaW5kIHBhcmFtZXRlciBpbmRleC5cclxuICAgICAgICBwYXJhbWV0ZXJJbmRleCA9IG1vZGVsLmdldFBhcmFtZXRlckluZGV4KGN1cnZlcy5hdChjKS5pZCk7XHJcblxyXG4gICAgICAgIC8vIFNraXAgY3VydmUgZXZhbHVhdGlvbiBpZiBubyB2YWx1ZSBpbiBzaW5rLlxyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJJbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuXHJcbiAgICAgICAgLy8gY29uc29sZS53YXJuKCdldmFsdWF0ZUN1cnZlMyxFdmFsdWF0ZSBjdXJ2ZSBhbmQgYXBwbHkgdmFsdWUuJylcclxuICAgICAgICB2YWx1ZSA9IGV2YWx1YXRlQ3VydmUodGhpcy5fbW90aW9uRGF0YSwgYywgdGltZSk7XHJcblxyXG4gICAgICAgIG1vZGVsLnNldFBhcmFtZXRlclZhbHVlQnlJbmRleChwYXJhbWV0ZXJJbmRleCwgdmFsdWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGltZU9mZnNldFNlY29uZHMgPj0gdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbikge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0xvb3ApIHtcclxuICAgICAgICAgIG1vdGlvblF1ZXVlRW50cnkuc2V0U3RhcnRUaW1lKHVzZXJUaW1lU2Vjb25kcyk7IC8vIOacgOWIneOBrueKtuaFi+OBuFxyXG4gICAgICAgICAgaWYgKHRoaXMuX2lzTG9vcEZhZGVJbikge1xyXG4gICAgICAgICAgICAvLyDlvqrnjq/mt6HlhaXml7bvvIzor7fph43mlrDmt6HlhaXmt6HlhaXmt6Hlh7pcclxuICAgICAgICAgICAgbW90aW9uUXVldWVFbnRyeS5zZXRGYWRlSW5TdGFydFRpbWUodXNlclRpbWVTZWNvbmRzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKHRoaXMuX29uRmluaXNoZWRNb3Rpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5fb25GaW5pc2hlZE1vdGlvbih0aGlzKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBtb3Rpb25RdWV1ZUVudHJ5LnNldElzRmluaXNoZWQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX2xhc3RXZWlnaHQgPSBmYWRlV2VpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44Or44O844OX5oOF5aCx44Gu6Kit5a6aXHJcbiAgICAgKiBAcGFyYW0gbG9vcCDjg6vjg7zjg5fmg4XloLFcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldElzTG9vcChsb29wOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX2lzTG9vcCA9IGxvb3A7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6vjg7zjg5fmg4XloLHjga7lj5blvpdcclxuICAgICAqIEByZXR1cm4gdHJ1ZSDjg6vjg7zjg5fjgZnjgotcclxuICAgICAqIEByZXR1cm4gZmFsc2Ug44Or44O844OX44GX44Gq44GEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0xvb3AoKTogYm9vbGVhbiB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9pc0xvb3A7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLHjga7oqK3lrppcclxuICAgICAqIEBwYXJhbSBsb29wRmFkZUluICDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLFcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldElzTG9vcEZhZGVJbihsb29wRmFkZUluOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgIHRoaXMuX2lzTG9vcEZhZGVJbiA9IGxvb3BGYWRlSW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6vjg7zjg5fmmYLjga7jg5Xjgqfjg7zjg4njgqTjg7Pmg4XloLHjga7lj5blvpdcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuICB0cnVlICAgIOOBmeOCi1xyXG4gICAgICogQHJldHVybiAgZmFsc2UgICDjgZfjgarjgYRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzTG9vcEZhZGVJbigpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2lzTG9vcEZhZGVJbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODvOOCt+ODp+ODs+OBrumVt+OBleOCkuWPluW+l+OBmeOCi+OAglxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXREdXJhdGlvbigpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5faXNMb29wID8gLTEuMCA6IHRoaXMuX2xvb3BEdXJhdGlvblNlY29uZHM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fmmYLjga7plbfjgZXjgpLlj5blvpfjgZnjgovjgIJcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuICDjg6Ljg7zjgrfjg6fjg7Pjga7jg6vjg7zjg5fmmYLjga7plbfjgZVb56eSXVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TG9vcER1cmF0aW9uKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9sb29wRHVyYXRpb25TZWNvbmRzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5Y+C5pWw55qE5reh5YWl5pe26Ze044CCXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqTjg7PjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0UGFyYW1ldGVyRmFkZUluVGltZShcclxuICAgICAgcGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlLFxyXG4gICAgICB2YWx1ZTogbnVtYmVyXHJcbiAgICApOiB2b2lkIHtcclxuICAgICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xyXG4gICAgICAgICAgY3VydmVzLmF0KGkpLmZhZGVJblRpbWUgPSB2YWx1ZTtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruWPguaVsOeahOa3oeWHuuaXtumXtFxyXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcklkICAgICDjg5Hjg6njg6Hjg7zjgr9JRFxyXG4gICAgICogQHBhcmFtIHZhbHVlICAgICAgICAgICDjg5Xjgqfjg7zjg4njgqLjgqbjg4jjgavjgYvjgYvjgovmmYLplpNb56eSXVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0UGFyYW1ldGVyRmFkZU91dFRpbWUoXHJcbiAgICAgIHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSxcclxuICAgICAgdmFsdWU6IG51bWJlclxyXG4gICAgKTogdm9pZCB7XHJcbiAgICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcclxuICAgICAgICAgIGN1cnZlcy5hdChpKS5mYWRlT3V0VGltZSA9IHZhbHVlO1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5Y+C5pWw55qE5reh5YWl5pe26Ze0XHJcbiAgICAgKiBAcGFyYW0gICAgcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXHJcbiAgICAgKiBAcmV0dXJuICAg44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFBhcmFtZXRlckZhZGVJblRpbWUocGFyYW1ldGVySWQ6IEN1YmlzbUlkSGFuZGxlKTogbnVtYmVyIHtcclxuICAgICAgY29uc3QgY3VydmVzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+ID0gdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXM7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudDsgKytpKSB7XHJcbiAgICAgICAgaWYgKHBhcmFtZXRlcklkID09IGN1cnZlcy5hdChpKS5pZCkge1xyXG4gICAgICAgICAgcmV0dXJuIGN1cnZlcy5hdChpKS5mYWRlSW5UaW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5Y+C5pWw55qE5reh5Ye65pe26Ze0XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtICAgcGFyYW1ldGVySWQgICAgIOODkeODqeODoeODvOOCv0lEXHJcbiAgICAgKiBAcmV0dXJuICAg44OV44Kn44O844OJ44Ki44Km44OI44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFBhcmFtZXRlckZhZGVPdXRUaW1lKHBhcmFtZXRlcklkOiBDdWJpc21JZEhhbmRsZSk6IG51bWJlciB7XHJcbiAgICAgIGNvbnN0IGN1cnZlczogY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkN1cnZlPiA9IHRoaXMuX21vdGlvbkRhdGEuY3VydmVzO1xyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7ICsraSkge1xyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJJZCA9PSBjdXJ2ZXMuYXQoaSkuaWQpIHtcclxuICAgICAgICAgIHJldHVybiBjdXJ2ZXMuYXQoaSkuZmFkZU91dFRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDoh6rli5Xjgqjjg5Xjgqfjgq/jg4jjgYzjgYvjgYvjgaPjgabjgYTjgovjg5Hjg6njg6Hjg7zjgr9JROODquOCueODiOOBruioreWumlxyXG4gICAgICogQHBhcmFtIGV5ZUJsaW5rUGFyYW1ldGVySWRzICAgIOiHquWLleOBvuOBsOOBn+OBjeOBjOOBi+OBi+OBo+OBpuOBhOOCi+ODkeODqeODoeODvOOCv0lE44Gu44Oq44K544OIXHJcbiAgICAgKiBAcGFyYW0gbGlwU3luY1BhcmFtZXRlcklkcyAgICAg44Oq44OD44OX44K344Oz44Kv44GM44GL44GL44Gj44Gm44GE44KL44OR44Op44Oh44O844K/SUTjga7jg6rjgrnjg4hcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldEVmZmVjdElkcyhcclxuICAgICAgZXllQmxpbmtQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT4sXHJcbiAgICAgIGxpcFN5bmNQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT5cclxuICAgICk6IHZvaWQge1xyXG4gICAgICB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcyA9IGV5ZUJsaW5rUGFyYW1ldGVySWRzO1xyXG4gICAgICB0aGlzLl9saXBTeW5jUGFyYW1ldGVySWRzID0gbGlwU3luY1BhcmFtZXRlcklkcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIHN1cGVyKCk7XHJcbiAgICAgIHRoaXMuX3NvdXJjZUZyYW1lUmF0ZSA9IDMwLjA7XHJcbiAgICAgIHRoaXMuX2xvb3BEdXJhdGlvblNlY29uZHMgPSAtMS4wO1xyXG4gICAgICB0aGlzLl9pc0xvb3AgPSBmYWxzZTsgLy8gdHJ1ZeOBi+OCiSBmYWxzZSDjgbjjg4fjg5Xjgqnjg6vjg4jjgpLlpInmm7RcclxuICAgICAgdGhpcy5faXNMb29wRmFkZUluID0gdHJ1ZTsgLy8g44Or44O844OX5pmC44Gr44OV44Kn44O844OJ44Kk44Oz44GM5pyJ5Yq544GL44Gp44GG44GL44Gu44OV44Op44KwXHJcbiAgICAgIHRoaXMuX2xhc3RXZWlnaHQgPSAwLjA7XHJcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEgPSBudWxsO1xyXG4gICAgICB0aGlzLl9tb2RlbEN1cnZlSWRFeWVCbGluayA9IG51bGw7XHJcbiAgICAgIHRoaXMuX21vZGVsQ3VydmVJZExpcFN5bmMgPSBudWxsO1xyXG4gICAgICB0aGlzLl9leWVCbGlua1BhcmFtZXRlcklkcyA9IG51bGw7XHJcbiAgICAgIHRoaXMuX2xpcFN5bmNQYXJhbWV0ZXJJZHMgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OH44K544OI44Op44Kv44K/55u45b2T44Gu5Yem55CGXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWxlYXNlKCk6IHZvaWQge1xyXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhID0gdm9pZCAwO1xyXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIG1vdGlvbjMuanNvbua4hea0l+OAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBtb3Rpb25Kc29uICBtb3Rpb24zLmpzb27or7vlj5bnmoTnvJPlhrLlrZjlgqjlmahcclxuICAgICAqIEBwYXJhbSBzaXplICAgICAgICDjg5Djg4Pjg5XjgqHjga7jgrXjgqTjgrpcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcnNlKG1vdGlvbkpzb246IEFycmF5QnVmZmVyLCBzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgdGhpcy5fbW90aW9uRGF0YSA9IG5ldyBDdWJpc21Nb3Rpb25EYXRhKCk7XHJcblxyXG4gICAgICBsZXQganNvbjogQ3ViaXNtTW90aW9uSnNvbiA9IG5ldyBDdWJpc21Nb3Rpb25Kc29uKG1vdGlvbkpzb24sIHNpemUpO1xyXG5cclxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5kdXJhdGlvbiA9IGpzb24uZ2V0TW90aW9uRHVyYXRpb24oKTtcclxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5sb29wID0ganNvbi5pc01vdGlvbkxvb3AoKTtcclxuICAgICAgLy8g5puy57q/6K6h5pWwXHJcbiAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudCA9IGpzb24uZ2V0TW90aW9uQ3VydmVDb3VudCgpO1xyXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmZwcyA9IGpzb24uZ2V0TW90aW9uRnBzKCk7XHJcbiAgICAgIC8vIOS6i+S7tuiuoeaVsFxyXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50Q291bnQgPSBqc29uLmdldEV2ZW50Q291bnQoKTtcclxuXHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCd0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQnLHRoaXMuX21vdGlvbkRhdGEuY3VydmVDb3VudClcclxuICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudCcsdGhpcy5fbW90aW9uRGF0YS5ldmVudENvdW50KVxyXG5cclxuICAgICAgaWYgKGpzb24uaXNFeGlzdE1vdGlvbkZhZGVJblRpbWUoKSkge1xyXG4gICAgICAgIHRoaXMuX2ZhZGVJblNlY29uZHMgPVxyXG4gICAgICAgICAganNvbi5nZXRNb3Rpb25GYWRlSW5UaW1lKCkgPCAwLjAgPyAxLjAgOiBqc29uLmdldE1vdGlvbkZhZGVJblRpbWUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLl9mYWRlSW5TZWNvbmRzID0gMS4wO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoanNvbi5pc0V4aXN0TW90aW9uRmFkZU91dFRpbWUoKSkge1xyXG4gICAgICAgIHRoaXMuX2ZhZGVPdXRTZWNvbmRzID1cclxuICAgICAgICAgIGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKSA8IDAuMCA/IDEuMCA6IGpzb24uZ2V0TW90aW9uRmFkZU91dFRpbWUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLl9mYWRlT3V0U2Vjb25kcyA9IDEuMDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMudXBkYXRlU2l6ZShcclxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQsXHJcbiAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmUsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLnVwZGF0ZVNpemUoXHJcbiAgICAgICAganNvbi5nZXRNb3Rpb25Ub3RhbFNlZ21lbnRDb3VudCgpLFxyXG4gICAgICAgIEN1YmlzbU1vdGlvblNlZ21lbnQsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy51cGRhdGVTaXplKFxyXG4gICAgICAgIGpzb24uZ2V0TW90aW9uVG90YWxQb2ludENvdW50KCksXHJcbiAgICAgICAgQ3ViaXNtTW90aW9uUG9pbnQsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApO1xyXG4gICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy51cGRhdGVTaXplKFxyXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRDb3VudCxcclxuICAgICAgICBDdWJpc21Nb3Rpb25FdmVudCxcclxuICAgICAgICB0cnVlXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBsZXQgdG90YWxQb2ludENvdW50ID0gMDtcclxuICAgICAgbGV0IHRvdGFsU2VnbWVudENvdW50ID0gMDtcclxuXHJcbiAgICAgIC8vIEN1cnZlc1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygndGhpcy5fbW90aW9uRGF0YS5jdXJ2ZUNvdW50Jyx0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQpXHJcbiAgICAgIGZvciAoXHJcbiAgICAgICAgbGV0IGN1cnZlQ291bnQgPSAwO1xyXG4gICAgICAgIGN1cnZlQ291bnQgPCB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlQ291bnQ7XHJcbiAgICAgICAgKytjdXJ2ZUNvdW50XHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmIChqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVNb2RlbCkge1xyXG4gICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkudHlwZSA9XHJcbiAgICAgICAgICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0LkN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X01vZGVsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICBqc29uLmdldE1vdGlvbkN1cnZlVGFyZ2V0KGN1cnZlQ291bnQpID09IFRhcmdldE5hbWVQYXJhbWV0ZXJcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuY3VydmVzLmF0KGN1cnZlQ291bnQpLnR5cGUgPVxyXG4gICAgICAgICAgICBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9QYXJhbWV0ZXI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgIGpzb24uZ2V0TW90aW9uQ3VydmVUYXJnZXQoY3VydmVDb3VudCkgPT0gVGFyZ2V0TmFtZVBhcnRPcGFjaXR5XHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS50eXBlID1cclxuICAgICAgICAgICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQuQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFydE9wYWNpdHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChjdXJ2ZUNvdW50KS5pZCA9IGpzb24uZ2V0TW90aW9uQ3VydmVJZChcclxuICAgICAgICAgIGN1cnZlQ291bnRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmN1cnZlcy5hdChcclxuICAgICAgICAgIGN1cnZlQ291bnRcclxuICAgICAgICApLmJhc2VTZWdtZW50SW5kZXggPSB0b3RhbFNlZ21lbnRDb3VudDtcclxuXHJcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoXHJcbiAgICAgICAgICBjdXJ2ZUNvdW50XHJcbiAgICAgICAgKS5mYWRlSW5UaW1lID0ganNvbi5pc0V4aXN0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpXHJcbiAgICAgICAgICA/IGpzb24uZ2V0TW90aW9uQ3VydmVGYWRlSW5UaW1lKGN1cnZlQ291bnQpXHJcbiAgICAgICAgICA6IC0xLjA7XHJcbiAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoXHJcbiAgICAgICAgICBjdXJ2ZUNvdW50XHJcbiAgICAgICAgKS5mYWRlT3V0VGltZSA9IGpzb24uaXNFeGlzdE1vdGlvbkN1cnZlRmFkZU91dFRpbWUoY3VydmVDb3VudClcclxuICAgICAgICAgID8ganNvbi5nZXRNb3Rpb25DdXJ2ZUZhZGVPdXRUaW1lKGN1cnZlQ291bnQpXHJcbiAgICAgICAgICA6IC0xLjA7XHJcblxyXG4gICAgICAgIC8vIFNlZ21lbnRzXHJcbiAgICAgICAgZm9yIChcclxuICAgICAgICAgIGxldCBzZWdtZW50UG9zaXRpb24gPSAwO1xyXG4gICAgICAgICAgc2VnbWVudFBvc2l0aW9uIDwganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnRDb3VudChjdXJ2ZUNvdW50KTtcclxuXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBpZiAoc2VnbWVudFBvc2l0aW9uID09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcclxuICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxyXG4gICAgICAgICAgICApLmJhc2VQb2ludEluZGV4ID0gdG90YWxQb2ludENvdW50O1xyXG4gICAgICAgICAgICBpZih0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpKXtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxyXG4gICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KGN1cnZlQ291bnQsIHNlZ21lbnRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXHJcbiAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcclxuICAgICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxyXG4gICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xyXG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQodG90YWxTZWdtZW50Q291bnQpLmJhc2VQb2ludEluZGV4ID1cclxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgLSAxO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHNlZ21lbnQ6IG51bWJlciA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICBzZWdtZW50UG9zaXRpb25cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBzd2l0Y2ggKHNlZ21lbnQpIHtcclxuICAgICAgICAgICAgY2FzZSBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXI6IHtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9MaW5lYXI7XHJcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdChcclxuICAgICAgICAgICAgICAgIHRvdGFsU2VnbWVudENvdW50XHJcbiAgICAgICAgICAgICAgKS5ldmFsdWF0ZSA9IGxpbmVhckV2YWx1YXRlO1xyXG5cclxuICAgICAgICAgICAgICAvLyDkv67mlLnmnIDlkI7ngrlcclxuICAgICAgICAgICAgICBpZih0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcclxuICAgICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAxXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXHJcbiAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxyXG4gICAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAyXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDE7XHJcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDM7XHJcblxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyOiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5zZWdtZW50cy5hdCh0b3RhbFNlZ21lbnRDb3VudCkuc2VnbWVudFR5cGUgPVxyXG4gICAgICAgICAgICAgICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfQmV6aWVyO1xyXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQoXHJcbiAgICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxyXG4gICAgICAgICAgICAgICkuZXZhbHVhdGUgPSBiZXppZXJFdmFsdWF0ZTtcclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAvLyDkv67mlLnmnIDlkI7ngrlcclxuICAgICAgICAgICAgICBpZih0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQpKXtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcclxuICAgICAgICAgICAgICAgICkudGltZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAxXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXHJcbiAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxyXG4gICAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyAyXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAvLyDkv67mlLnmnIDlkI7ngrlcclxuICAgICAgICAgICAgICBpZih0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQgKyAxKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICsgMVxyXG4gICAgICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDNcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICsgMVxyXG4gICAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyA0XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAvLyDkv67mlLnmnIDlkI7ngrlcclxuICAgICAgICAgICAgICBpZih0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdCh0b3RhbFBvaW50Q291bnQgKyAyKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICsgMlxyXG4gICAgICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDVcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICsgMlxyXG4gICAgICAgICAgICAgICAgKS52YWx1ZSA9IGpzb24uZ2V0TW90aW9uQ3VydmVTZWdtZW50KFxyXG4gICAgICAgICAgICAgICAgICBjdXJ2ZUNvdW50LFxyXG4gICAgICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKyA2XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50ICs9IDM7XHJcbiAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICs9IDc7XHJcblxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXNlIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlLkN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX1N0ZXBwZWQ6IHtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9TdGVwcGVkO1xyXG4gICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuc2VnbWVudHMuYXQoXHJcbiAgICAgICAgICAgICAgICB0b3RhbFNlZ21lbnRDb3VudFxyXG4gICAgICAgICAgICAgICkuZXZhbHVhdGUgPSBzdGVwcGVkRXZhbHVhdGU7XHJcblxyXG4gICAgICAgICAgICAgIC8vIOS/ruaUueacgOWQjueCuVxyXG4gICAgICAgICAgICAgIGlmKHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KHRvdGFsUG9pbnRDb3VudCkpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQoXHJcbiAgICAgICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudFxyXG4gICAgICAgICAgICAgICAgKS50aW1lID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDFcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XHJcbiAgICAgICAgICAgICAgICApLnZhbHVlID0ganNvbi5nZXRNb3Rpb25DdXJ2ZVNlZ21lbnQoXHJcbiAgICAgICAgICAgICAgICAgIGN1cnZlQ291bnQsXHJcbiAgICAgICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArIDJcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnQgKz0gMTtcclxuICAgICAgICAgICAgICBzZWdtZW50UG9zaXRpb24gKz0gMztcclxuXHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUuQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfSW52ZXJzZVN0ZXBwZWQ6IHtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KHRvdGFsU2VnbWVudENvdW50KS5zZWdtZW50VHlwZSA9XHJcbiAgICAgICAgICAgICAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZS5DdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9JbnZlcnNlU3RlcHBlZDtcclxuICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnNlZ21lbnRzLmF0KFxyXG4gICAgICAgICAgICAgICAgdG90YWxTZWdtZW50Q291bnRcclxuICAgICAgICAgICAgICApLmV2YWx1YXRlID0gaW52ZXJzZVN0ZXBwZWRFdmFsdWF0ZTtcclxuXHJcbiAgICAgICAgICAgICAgLy8g5L+u5pS55pyA5ZCO54K5XHJcbiAgICAgICAgICAgICAgaWYodGhpcy5fbW90aW9uRGF0YS5wb2ludHMuYXQodG90YWxQb2ludENvdW50KSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLnBvaW50cy5hdChcclxuICAgICAgICAgICAgICAgICAgdG90YWxQb2ludENvdW50XHJcbiAgICAgICAgICAgICAgICApLnRpbWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcclxuICAgICAgICAgICAgICAgICAgY3VydmVDb3VudCxcclxuICAgICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEucG9pbnRzLmF0KFxyXG4gICAgICAgICAgICAgICAgICB0b3RhbFBvaW50Q291bnRcclxuICAgICAgICAgICAgICAgICkudmFsdWUgPSBqc29uLmdldE1vdGlvbkN1cnZlU2VnbWVudChcclxuICAgICAgICAgICAgICAgICAgY3VydmVDb3VudCxcclxuICAgICAgICAgICAgICAgICAgc2VnbWVudFBvc2l0aW9uICsgMlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIHRvdGFsUG9pbnRDb3VudCArPSAxO1xyXG4gICAgICAgICAgICAgIHNlZ21lbnRQb3NpdGlvbiArPSAzO1xyXG5cclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgQ1NNX0FTU0VSVCgwKTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICsrdGhpcy5fbW90aW9uRGF0YS5jdXJ2ZXMuYXQoY3VydmVDb3VudCkuc2VnbWVudENvdW50O1xyXG4gICAgICAgICAgKyt0b3RhbFNlZ21lbnRDb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgLy8gY29uc29sZS5sb2coJ2pzb24uZ2V0RXZlbnRDb3VudCgpJyxqc29uLmdldEV2ZW50Q291bnQoKSlcclxuICAgICAgZm9yIChcclxuICAgICAgICBsZXQgdXNlcmRhdGFjb3VudCA9IDA7XHJcbiAgICAgICAgdXNlcmRhdGFjb3VudCA8IGpzb24uZ2V0RXZlbnRDb3VudCgpO1xyXG4gICAgICAgICsrdXNlcmRhdGFjb3VudFxyXG4gICAgICApIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygndXNlcmRhdGFjb3VudCA8IGpzb24uZ2V0RXZlbnRDb3VudCgpJyx1c2VyZGF0YWNvdW50LGpzb24uZ2V0RXZlbnRDb3VudCgpKVxyXG4gICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHVzZXJkYXRhY291bnQpLmZpcmVUaW1lID0ganNvbi5nZXRFdmVudFRpbWUoXHJcbiAgICAgICAgICB1c2VyZGF0YWNvdW50XHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50cy5hdCh1c2VyZGF0YWNvdW50KS52YWx1ZSA9IGpzb24uZ2V0RXZlbnRWYWx1ZShcclxuICAgICAgICAgIHVzZXJkYXRhY291bnRcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBqc29uLnJlbGVhc2UoKTtcclxuICAgICAganNvbiA9IHZvaWQgMDtcclxuICAgICAganNvbiA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg4fjg6vjga7jg5Hjg6njg6Hjg7zjgr/mm7TmlrBcclxuICAgICAqXHJcbiAgICAgKiDjgqTjg5njg7Pjg4jnmbrngavjga7jg4Hjgqfjg4Pjgq/jgIJcclxuICAgICAqIOWFpeWKm+OBmeOCi+aZgumWk+OBr+WRvOOBsOOCjOOCi+ODouODvOOCt+ODp+ODs+OCv+OCpOODn+ODs+OCsOOCku+8kOOBqOOBl+OBn+enkuaVsOOBp+ihjOOBhuOAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBiZWZvcmVDaGVja1RpbWVTZWNvbmRzICAg5YmN5Zue44Gu44Kk44OZ44Oz44OI44OB44Kn44OD44Kv5pmC6ZaTW+enkl1cclxuICAgICAqIEBwYXJhbSBtb3Rpb25UaW1lU2Vjb25kcyAgICAgICAg5LuK5Zue44Gu5YaN55Sf5pmC6ZaTW+enkl1cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEZpcmVkRXZlbnQoXHJcbiAgICAgIGJlZm9yZUNoZWNrVGltZVNlY29uZHM6IG51bWJlcixcclxuICAgICAgbW90aW9uVGltZVNlY29uZHM6IG51bWJlclxyXG4gICAgKTogY3NtVmVjdG9yPGNzbVN0cmluZz4ge1xyXG4gICAgICB0aGlzLl9maXJlZEV2ZW50VmFsdWVzLnVwZGF0ZVNpemUoMCk7XHJcblxyXG4gICAgICAvLyDjgqTjg5njg7Pjg4jjga7nmbrngavjg4Hjgqfjg4Pjgq9cclxuICAgICAgZm9yIChsZXQgdSA9IDA7IHUgPCB0aGlzLl9tb3Rpb25EYXRhLmV2ZW50Q291bnQ7ICsrdSkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHRoaXMuX21vdGlvbkRhdGEuZXZlbnRzLmF0KHUpLmZpcmVUaW1lID4gYmVmb3JlQ2hlY2tUaW1lU2Vjb25kcyAmJlxyXG4gICAgICAgICAgdGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodSkuZmlyZVRpbWUgPD0gbW90aW9uVGltZVNlY29uZHNcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHRoaXMuX2ZpcmVkRXZlbnRWYWx1ZXMucHVzaEJhY2soXHJcbiAgICAgICAgICAgIG5ldyBjc21TdHJpbmcodGhpcy5fbW90aW9uRGF0YS5ldmVudHMuYXQodSkudmFsdWUucylcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5fZmlyZWRFdmVudFZhbHVlcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgX3NvdXJjZUZyYW1lUmF0ZTogbnVtYmVyOyAvLyDjg63jg7zjg4njgZfjgZ/jg5XjgqHjgqTjg6vjga5GUFPjgILoqJjov7DjgYznhKHjgZHjgozjgbDjg4fjg5Xjgqnjg6vjg4jlgKQxNWZwc+OBqOOBquOCi1xyXG4gICAgcHVibGljIF9sb29wRHVyYXRpb25TZWNvbmRzOiBudW1iZXI7IC8vIG10buODleOCoeOCpOODq+OBp+Wumue+qeOBleOCjOOCi+S4gOmAo+OBruODouODvOOCt+ODp+ODs+OBrumVt+OBlVxyXG4gICAgcHVibGljIF9pc0xvb3A6IGJvb2xlYW47IC8vIOODq+ODvOODl+OBmeOCi+OBiz9cclxuICAgIHB1YmxpYyBfaXNMb29wRmFkZUluOiBib29sZWFuOyAvLyDjg6vjg7zjg5fmmYLjgavjg5Xjgqfjg7zjg4njgqTjg7PjgYzmnInlirnjgYvjganjgYbjgYvjga7jg5Xjg6njgrDjgILliJ3mnJ/lgKTjgafjga/mnInlirnjgIJcclxuICAgIHB1YmxpYyBfbGFzdFdlaWdodDogbnVtYmVyOyAvLyDmnIDlvozjgavoqK3lrprjgZXjgozjgZ/ph43jgb9cclxuXHJcbiAgICBwdWJsaWMgX21vdGlvbkRhdGE6IEN1YmlzbU1vdGlvbkRhdGE7IC8vIOWunumZheeahOWKqOS9nOaVsOaNruS4u+S9k1xyXG5cclxuXHJcbiAgICBwdWJsaWMgX2V5ZUJsaW5rUGFyYW1ldGVySWRzOiBjc21WZWN0b3I8Q3ViaXNtSWRIYW5kbGU+OyAvLyDoh6rli5Xjgb7jgbDjgZ/jgY3jgpLpgannlKjjgZnjgovjg5Hjg6njg6Hjg7zjgr9JROODj+ODs+ODieODq+OBruODquOCueODiOOAgiAg44Oi44OH44Or77yI44Oi44OH44Or44K744OD44OG44Kj44Oz44Kw77yJ44Go44OR44Op44Oh44O844K/44KS5a++5b+c5LuY44GR44KL44CCXHJcbiAgICBwdWJsaWMgX2xpcFN5bmNQYXJhbWV0ZXJJZHM6IGNzbVZlY3RvcjxDdWJpc21JZEhhbmRsZT47IC8vIOODquODg+ODl+OCt+ODs+OCr+OCkumBqeeUqOOBmeOCi+ODkeODqeODoeODvOOCv0lE44OP44Oz44OJ44Or44Gu44Oq44K544OI44CCICDjg6Ljg4fjg6vvvIjjg6Ljg4fjg6vjgrvjg4Pjg4bjgqPjg7PjgrDvvInjgajjg5Hjg6njg6Hjg7zjgr/jgpLlr77lv5zku5jjgZHjgovjgIJcclxuXHJcbiAgICBwdWJsaWMgX21vZGVsQ3VydmVJZEV5ZUJsaW5rOiBDdWJpc21JZEhhbmRsZTsgLy8g44Oi44OH44Or44GM5oyB44Gk6Ieq5YuV44G+44Gw44Gf44GN55So44OR44Op44Oh44O844K/SUTjga7jg4/jg7Pjg4njg6vjgIIgIOODouODh+ODq+OBqOODouODvOOCt+ODp+ODs+OCkuWvvuW/nOS7mOOBkeOCi+OAglxyXG4gICAgcHVibGljIF9tb2RlbEN1cnZlSWRMaXBTeW5jOiBDdWJpc21JZEhhbmRsZTsgLy8g44Oi44OH44Or44GM5oyB44Gk44Oq44OD44OX44K344Oz44Kv55So44OR44Op44Oh44O844K/SUTjga7jg4/jg7Pjg4njg6vjgIIgIOODouODh+ODq+OBqOODouODvOOCt+ODp+ODs+OCkuWvvuW/nOS7mOOBkeOCi+OAglxyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFFQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBQ0E7QUFFQTtBQU1BO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBSUE7QUFPQTtBQUFBO0FBeWNBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQTVjQTtBQUtBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBU0E7QUFNQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBR0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBSUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFHQTtBQUNBO0FBS0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFHQTtBQUNBO0FBR0E7QUFHQTtBQUdBO0FBQ0E7QUFDQTtBQUVBO0FBTUE7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBRUE7QUFDQTtBQUFBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFLQTtBQUtBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBS0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUlBO0FBR0E7QUFDQTtBQUNBO0FBSUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFRQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFRQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFPQTtBQUlBO0FBQ0E7QUFDQTtBQXNCQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFLQTtBQUtBO0FBS0E7QUFNQTtBQUNBO0FBSUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFFQTtBQUlBO0FBSUE7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFLQTtBQUNBO0FBR0E7QUFDQTtBQUdBO0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFNQTtBQU1BO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFNQTtBQU1BO0FBR0E7QUFDQTtBQU1BO0FBTUE7QUFHQTtBQUNBO0FBTUE7QUFNQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBTUE7QUFNQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBTUE7QUFNQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFNQTtBQUdBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQVdBO0FBSUE7QUFHQTtBQUNBO0FBRUE7QUFFQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBZ0JBO0FBQUE7QUFuMEJBO0FBbzBCQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotion.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotioninternal.ts":
/*!******************************************************!*\
  !*** ./Framework/src/motion/cubismmotioninternal.ts ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMotionCurveTarget;\r\n    (function (CubismMotionCurveTarget) {\r\n        CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_Model\"] = 0] = \"CubismMotionCurveTarget_Model\";\r\n        CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_Parameter\"] = 1] = \"CubismMotionCurveTarget_Parameter\";\r\n        CubismMotionCurveTarget[CubismMotionCurveTarget[\"CubismMotionCurveTarget_PartOpacity\"] = 2] = \"CubismMotionCurveTarget_PartOpacity\";\r\n    })(CubismMotionCurveTarget = Live2DCubismFramework.CubismMotionCurveTarget || (Live2DCubismFramework.CubismMotionCurveTarget = {}));\r\n    var CubismMotionSegmentType;\r\n    (function (CubismMotionSegmentType) {\r\n        CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Linear\"] = 0] = \"CubismMotionSegmentType_Linear\";\r\n        CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Bezier\"] = 1] = \"CubismMotionSegmentType_Bezier\";\r\n        CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_Stepped\"] = 2] = \"CubismMotionSegmentType_Stepped\";\r\n        CubismMotionSegmentType[CubismMotionSegmentType[\"CubismMotionSegmentType_InverseStepped\"] = 3] = \"CubismMotionSegmentType_InverseStepped\";\r\n    })(CubismMotionSegmentType = Live2DCubismFramework.CubismMotionSegmentType || (Live2DCubismFramework.CubismMotionSegmentType = {}));\r\n    var CubismMotionPoint = (function () {\r\n        function CubismMotionPoint() {\r\n            this.time = 0.0;\r\n            this.value = 0.0;\r\n        }\r\n        return CubismMotionPoint;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionPoint = CubismMotionPoint;\r\n    var CubismMotionSegment = (function () {\r\n        function CubismMotionSegment() {\r\n            this.evaluate = null;\r\n            this.basePointIndex = 0;\r\n            this.segmentType = 0;\r\n        }\r\n        return CubismMotionSegment;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionSegment = CubismMotionSegment;\r\n    var CubismMotionCurve = (function () {\r\n        function CubismMotionCurve() {\r\n            this.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n            this.segmentCount = 0;\r\n            this.baseSegmentIndex = 0;\r\n            this.fadeInTime = 0.0;\r\n            this.fadeOutTime = 0.0;\r\n        }\r\n        return CubismMotionCurve;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionCurve = CubismMotionCurve;\r\n    var CubismMotionEvent = (function () {\r\n        function CubismMotionEvent() {\r\n            this.fireTime = 0.0;\r\n        }\r\n        return CubismMotionEvent;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionEvent = CubismMotionEvent;\r\n    var CubismMotionData = (function () {\r\n        function CubismMotionData() {\r\n            this.duration = 0.0;\r\n            this.loop = false;\r\n            this.curveCount = 0;\r\n            this.eventCount = 0;\r\n            this.fps = 0.0;\r\n            this.curves = new csmVector();\r\n            this.segments = new csmVector();\r\n            this.points = new csmVector();\r\n            this.events = new csmVector();\r\n        }\r\n        return CubismMotionData;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionData = CubismMotionData;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25pbnRlcm5hbC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL0ZyYW1ld29yay9zcmMvbW90aW9uL2N1YmlzbW1vdGlvbmludGVybmFsLnRzP2U2ZGUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtaWQgfSBmcm9tICcuLi9pZC9jdWJpc21pZCc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc21zdHJpbmcgfSBmcm9tICcuLi90eXBlL2NzbXN0cmluZyc7XHJcbmltcG9ydCB7IExpdmUyREN1YmlzbUZyYW1ld29yayBhcyBjc212ZWN0b3IgfSBmcm9tICcuLi90eXBlL2NzbXZlY3Rvcic7XHJcbmltcG9ydCBjc21WZWN0b3IgPSBjc212ZWN0b3IuY3NtVmVjdG9yO1xyXG5pbXBvcnQgY3NtU3RyaW5nID0gY3Ntc3RyaW5nLmNzbVN0cmluZztcclxuaW1wb3J0IEN1YmlzbUlkSGFuZGxlID0gY3ViaXNtaWQuQ3ViaXNtSWRIYW5kbGU7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLyoqXHJcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBrueorumhnlxyXG4gICAqXHJcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu56iu6aGe44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQge1xyXG4gICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfTW9kZWwsIC8vIOODouODh+ODq+OBq+WvvuOBl+OBplxyXG4gICAgQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXRfUGFyYW1ldGVyLCAvLyDjg5Hjg6njg6Hjg7zjgr/jgavlr77jgZfjgaZcclxuICAgIEN1YmlzbU1vdGlvbkN1cnZlVGFyZ2V0X1BhcnRPcGFjaXR5IC8vIOODkeODvOODhOOBruS4jemAj+aYjuW6puOBq+WvvuOBl+OBplxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruOCu+OCsOODoeODs+ODiOOBrueorumhnlxyXG4gICAqXHJcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu56iu6aGe44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGVudW0gQ3ViaXNtTW90aW9uU2VnbWVudFR5cGUge1xyXG4gICAgQ3ViaXNtTW90aW9uU2VnbWVudFR5cGVfTGluZWFyID0gMCwgLy8g44Oq44OL44KiXHJcbiAgICBDdWJpc21Nb3Rpb25TZWdtZW50VHlwZV9CZXppZXIgPSAxLCAvLyDjg5njgrjjgqfmm7Lnt5pcclxuICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX1N0ZXBwZWQgPSAyLCAvLyDjgrnjg4bjg4Pjg5dcclxuICAgIEN1YmlzbU1vdGlvblNlZ21lbnRUeXBlX0ludmVyc2VTdGVwcGVkID0gMyAvLyDjgqTjg7Pjg5Djg7zjgrnjgrnjg4bjg4Pjg5dcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBicmllZiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrlcclxuICAgKlxyXG4gICAqIOODouODvOOCt+ODp+ODs+OCq+ODvOODluOBruWItuW+oeeCueOAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBDdWJpc21Nb3Rpb25Qb2ludCB7XHJcbiAgICB0aW1lID0gMC4wOyAvLyDmmYLplpNb56eSXVxyXG4gICAgdmFsdWUgPSAwLjA7IC8vIOWApFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OI44Gu6KmV5L6h6Zai5pWwXHJcbiAgICpcclxuICAgKiBAcGFyYW0gICBwb2ludHMgICAgICDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7liLblvqHngrnjg6rjgrnjg4hcclxuICAgKiBAcGFyYW0gICB0aW1lICAgICAgICDoqZXkvqHjgZnjgovmmYLplpNb56eSXVxyXG4gICAqL1xyXG4gIGV4cG9ydCBpbnRlcmZhY2UgY3NtTW90aW9uU2VnbWVudEV2YWx1YXRpb25GdW5jdGlvbiB7XHJcbiAgICAocG9pbnRzOiBDdWJpc21Nb3Rpb25Qb2ludFtdLCB0aW1lOiBudW1iZXIpOiBudW1iZXI7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OW44Gu44K744Kw44Oh44Oz44OIXHJcbiAgICpcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjga7jgrvjgrDjg6Hjg7Pjg4jjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uU2VnbWVudCB7XHJcbiAgICAvKipcclxuICAgICAqIEBicmllZiDjgrPjg7Pjgrnjg4jjg6njgq/jgr9cclxuICAgICAqXHJcbiAgICAgKiDjgrPjg7Pjgrnjg4jjg6njgq/jgr/jgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLmV2YWx1YXRlID0gbnVsbDtcclxuICAgICAgdGhpcy5iYXNlUG9pbnRJbmRleCA9IDA7XHJcbiAgICAgIHRoaXMuc2VnbWVudFR5cGUgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGV2YWx1YXRlOiBjc21Nb3Rpb25TZWdtZW50RXZhbHVhdGlvbkZ1bmN0aW9uOyAvLyDkvb/nlKjjgZnjgovoqZXkvqHplqLmlbBcclxuICAgIGJhc2VQb2ludEluZGV4OiBudW1iZXI7IC8vIOacgOWIneOBruOCu+OCsOODoeODs+ODiOOBuOOBruOCpOODs+ODh+ODg+OCr+OCuVxyXG4gICAgc2VnbWVudFR5cGU6IG51bWJlcjsgLy8g44K744Kw44Oh44Oz44OI44Gu56iu6aGeXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAYnJpZWYg44Oi44O844K344On44Oz44Kr44O844OWXHJcbiAgICpcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjgqvjg7zjg5bjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uQ3VydmUge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLnR5cGUgPSBDdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldC5DdWJpc21Nb3Rpb25DdXJ2ZVRhcmdldF9Nb2RlbDtcclxuICAgICAgdGhpcy5zZWdtZW50Q291bnQgPSAwO1xyXG4gICAgICB0aGlzLmJhc2VTZWdtZW50SW5kZXggPSAwO1xyXG4gICAgICB0aGlzLmZhZGVJblRpbWUgPSAwLjA7XHJcbiAgICAgIHRoaXMuZmFkZU91dFRpbWUgPSAwLjA7XHJcbiAgICB9XHJcblxyXG4gICAgdHlwZTogQ3ViaXNtTW90aW9uQ3VydmVUYXJnZXQ7IC8vIOOCq+ODvOODluOBrueorumhnlxyXG4gICAgaWQ6IEN1YmlzbUlkSGFuZGxlOyAvLyDjgqvjg7zjg5bjga5JRFxyXG4gICAgc2VnbWVudENvdW50OiBudW1iZXI7IC8vIOOCu+OCsOODoeODs+ODiOOBruWAi+aVsFxyXG4gICAgYmFzZVNlZ21lbnRJbmRleDogbnVtYmVyOyAvLyDmnIDliJ3jga7jgrvjgrDjg6Hjg7Pjg4jjga7jgqTjg7Pjg4fjg4Pjgq/jgrlcclxuICAgIGZhZGVJblRpbWU6IG51bWJlcjsgLy8g44OV44Kn44O844OJ44Kk44Oz44Gr44GL44GL44KL5pmC6ZaTW+enkl1cclxuICAgIGZhZGVPdXRUaW1lOiBudW1iZXI7IC8vIOODleOCp+ODvOODieOCouOCpuODiOOBq+OBi+OBi+OCi+aZgumWk1vnp5JdXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjgqTjg5njg7Pjg4jjgIJcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uRXZlbnQge1xyXG4gICAgZmlyZVRpbWUgPSAwLjA7XHJcbiAgICB2YWx1ZTogY3NtU3RyaW5nO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQGJyaWVmIOODouODvOOCt+ODp+ODs+ODh+ODvOOCv1xyXG4gICAqXHJcbiAgICog44Oi44O844K344On44Oz44OH44O844K/44CCXHJcbiAgICovXHJcbiAgZXhwb3J0IGNsYXNzIEN1YmlzbU1vdGlvbkRhdGEge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICB0aGlzLmR1cmF0aW9uID0gMC4wO1xyXG4gICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcclxuICAgICAgdGhpcy5jdXJ2ZUNvdW50ID0gMDtcclxuICAgICAgdGhpcy5ldmVudENvdW50ID0gMDtcclxuICAgICAgdGhpcy5mcHMgPSAwLjA7XHJcblxyXG4gICAgICB0aGlzLmN1cnZlcyA9IG5ldyBjc21WZWN0b3I8Q3ViaXNtTW90aW9uQ3VydmU+KCk7XHJcbiAgICAgIHRoaXMuc2VnbWVudHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvblNlZ21lbnQ+KCk7XHJcbiAgICAgIHRoaXMucG9pbnRzID0gbmV3IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25Qb2ludD4oKTtcclxuICAgICAgdGhpcy5ldmVudHMgPSBuZXcgY3NtVmVjdG9yPEN1YmlzbU1vdGlvbkV2ZW50PigpO1xyXG4gICAgfVxyXG5cclxuICAgIGR1cmF0aW9uOiBudW1iZXI7IC8vIOODouODvOOCt+ODp+ODs+OBrumVt+OBlVvnp5JdXHJcbiAgICBsb29wOiBib29sZWFuOyAvLyDjg6vjg7zjg5fjgZnjgovjgYvjganjgYbjgYtcclxuICAgIGN1cnZlQ291bnQ6IG51bWJlcjsgLy8g44Kr44O844OW44Gu5YCL5pWwXHJcbiAgICBldmVudENvdW50OiBudW1iZXI7IC8vIFVzZXJEYXRh44Gu5YCL5pWwXHJcbiAgICBmcHM6IG51bWJlcjsgLy8g44OV44Os44O844Og44Os44O844OIXHJcbiAgICBjdXJ2ZXM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25DdXJ2ZT47IC8vIOOCq+ODvOODluOBruODquOCueODiFxyXG4gICAgc2VnbWVudHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25TZWdtZW50PjsgLy8g44K744Kw44Oh44Oz44OI44Gu44Oq44K544OIXHJcbiAgICBwb2ludHM6IGNzbVZlY3RvcjxDdWJpc21Nb3Rpb25Qb2ludD47IC8vIOODneOCpOODs+ODiOOBruODquOCueODiFxyXG4gICAgZXZlbnRzOiBjc21WZWN0b3I8Q3ViaXNtTW90aW9uRXZlbnQ+OyAvLyDjgqTjg5njg7Pjg4jjga7jg6rjgrnjg4hcclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7QUFTQTtBQUNBO0FBSUE7QUFBQTtBQU1BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFIQTtBQW9CQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUFBO0FBZkE7QUFzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQUE7QUFmQTtBQW9CQTtBQUFBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFIQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdBO0FBQUE7QUF2QkE7QUF3QkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotioninternal.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotionjson.ts":
/*!**************************************************!*\
  !*** ./Framework/src/motion/cubismmotionjson.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Meta = 'Meta';\r\n    var Duration = 'Duration';\r\n    var Loop = 'Loop';\r\n    var CurveCount = 'CurveCount';\r\n    var Fps = 'Fps';\r\n    var TotalSegmentCount = 'TotalSegmentCount';\r\n    var TotalPointCount = 'TotalPointCount';\r\n    var Curves = 'Curves';\r\n    var Target = 'Target';\r\n    var Id = 'Id';\r\n    var FadeInTime = 'FadeInTime';\r\n    var FadeOutTime = 'FadeOutTime';\r\n    var Segments = 'Segments';\r\n    var UserData = 'UserData';\r\n    var UserDataCount = 'UserDataCount';\r\n    var TotalUserDataSize = 'TotalUserDataSize';\r\n    var Time = 'Time';\r\n    var Value = 'Value';\r\n    var CubismMotionJson = (function () {\r\n        function CubismMotionJson(buffer, size) {\r\n            this._json = CubismJson.create(buffer, size);\r\n        }\r\n        CubismMotionJson.prototype.release = function () {\r\n            CubismJson.delete(this._json);\r\n        };\r\n        CubismMotionJson.prototype.getMotionDuration = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(Duration)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.isMotionLoop = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(Loop)\r\n                .toBoolean();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(CurveCount)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getMotionFps = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(Fps)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionTotalSegmentCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalSegmentCount)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getMotionTotalPointCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalPointCount)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.isExistMotionFadeInTime = function () {\r\n            return !this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(FadeInTime)\r\n                .isNull();\r\n        };\r\n        CubismMotionJson.prototype.isExistMotionFadeOutTime = function () {\r\n            return !this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(FadeOutTime)\r\n                .isNull();\r\n        };\r\n        CubismMotionJson.prototype.getMotionFadeInTime = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(FadeInTime)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionFadeOutTime = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(FadeOutTime)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveTarget = function (curveIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(Target)\r\n                .getRawString();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveId = function (curveIndex) {\r\n            return CubismFramework.getIdManager().getId(this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismMotionJson.prototype.isExistMotionCurveFadeInTime = function (curveIndex) {\r\n            return !this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(FadeInTime)\r\n                .isNull();\r\n        };\r\n        CubismMotionJson.prototype.isExistMotionCurveFadeOutTime = function (curveIndex) {\r\n            return !this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(FadeOutTime)\r\n                .isNull();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveFadeInTime = function (curveIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(FadeInTime)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveFadeOutTime = function (curveIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(FadeOutTime)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveSegmentCount = function (curveIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(Segments)\r\n                .getVector()\r\n                .getSize();\r\n        };\r\n        CubismMotionJson.prototype.getMotionCurveSegment = function (curveIndex, segmentIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Curves)\r\n                .getValueByIndex(curveIndex)\r\n                .getValueByString(Segments)\r\n                .getValueByIndex(segmentIndex)\r\n                .toFloat();\r\n        };\r\n        CubismMotionJson.prototype.getEventCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(UserDataCount)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getTotalEventValueSize = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalUserDataSize)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getEventTime = function (userDataIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(userDataIndex)\r\n                .getValueByString(Time)\r\n                .toInt();\r\n        };\r\n        CubismMotionJson.prototype.getEventValue = function (userDataIndex) {\r\n            return new csmString(this._json\r\n                .getRoot()\r\n                .getValueByString(UserData)\r\n                .getValueByIndex(userDataIndex)\r\n                .getValueByString(Value)\r\n                .getRawString());\r\n        };\r\n        return CubismMotionJson;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionJson = CubismMotionJson;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotionjson.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotionmanager.ts":
/*!*****************************************************!*\
  !*** ./Framework/src/motion/cubismmotionmanager.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmotionqueuemanager_1 = __webpack_require__(/*! ./cubismmotionqueuemanager */ \"./Framework/src/motion/cubismmotionqueuemanager.ts\");\r\nvar CubismMotionQueueManager = cubismmotionqueuemanager_1.Live2DCubismFramework.CubismMotionQueueManager;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMotionManager = (function (_super) {\r\n        __extends(CubismMotionManager, _super);\r\n        function CubismMotionManager() {\r\n            var _this = _super.call(this) || this;\r\n            _this._currentPriority = 0;\r\n            _this._reservePriority = 0;\r\n            return _this;\r\n        }\r\n        CubismMotionManager.prototype.getCurrentPriority = function () {\r\n            return this._currentPriority;\r\n        };\r\n        CubismMotionManager.prototype.getReservePriority = function () {\r\n            return this._reservePriority;\r\n        };\r\n        CubismMotionManager.prototype.setReservePriority = function (val) {\r\n            this._reservePriority = val;\r\n        };\r\n        CubismMotionManager.prototype.startMotionPriority = function (motion, autoDelete, priority) {\r\n            if (priority == this._reservePriority) {\r\n                this._reservePriority = 0;\r\n            }\r\n            this._currentPriority = priority;\r\n            return _super.prototype.startMotion.call(this, motion, autoDelete, this._userTimeSeconds);\r\n        };\r\n        CubismMotionManager.prototype.updateMotion = function (model, deltaTimeSeconds) {\r\n            this._userTimeSeconds += deltaTimeSeconds;\r\n            var updated = _super.prototype.doUpdateMotion.call(this, model, this._userTimeSeconds);\r\n            if (this.isFinished()) {\r\n                this._currentPriority = 0;\r\n            }\r\n            return updated;\r\n        };\r\n        CubismMotionManager.prototype.reserveMotion = function (priority) {\r\n            if (priority <= this._reservePriority ||\r\n                priority <= this._currentPriority) {\r\n                return false;\r\n            }\r\n            this._reservePriority = priority;\r\n            return true;\r\n        };\r\n        return CubismMotionManager;\r\n    }(CubismMotionQueueManager));\r\n    Live2DCubismFramework.CubismMotionManager = CubismMotionManager;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL21vdGlvbi9jdWJpc21tb3Rpb25tYW5hZ2VyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy9tb3Rpb24vY3ViaXNtbW90aW9ubWFuYWdlci50cz81ZmE2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlciB9IGZyb20gJy4vY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyJztcclxuaW1wb3J0IHsgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIGFzIGFjdWJpc21tb3Rpb24gfSBmcm9tICcuL2FjdWJpc21tb3Rpb24nO1xyXG5pbXBvcnQgeyBMaXZlMkRDdWJpc21GcmFtZXdvcmsgYXMgY3ViaXNtbW9kZWwgfSBmcm9tICcuLi9tb2RlbC9jdWJpc21tb2RlbCc7XHJcbmltcG9ydCBDdWJpc21Nb3Rpb25RdWV1ZUVudHJ5SGFuZGxlID0gY3ViaXNtbW90aW9ucXVldWVtYW5hZ2VyLkN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGU7XHJcbmltcG9ydCBDdWJpc21Nb2RlbCA9IGN1YmlzbW1vZGVsLkN1YmlzbU1vZGVsO1xyXG5pbXBvcnQgQUN1YmlzbU1vdGlvbiA9IGFjdWJpc21tb3Rpb24uQUN1YmlzbU1vdGlvbjtcclxuaW1wb3J0IEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciA9IGN1YmlzbW1vdGlvbnF1ZXVlbWFuYWdlci5DdWJpc21Nb3Rpb25RdWV1ZU1hbmFnZXI7XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIExpdmUyREN1YmlzbUZyYW1ld29yayB7XHJcbiAgLyoqXHJcbiAgICog44Oi44O844K344On44Oz44Gu566h55CGXHJcbiAgICpcclxuICAgKiDjg6Ljg7zjgrfjg6fjg7Pjga7nrqHnkIbjgpLooYzjgYbjgq/jg6njgrlcclxuICAgKi9cclxuICBleHBvcnQgY2xhc3MgQ3ViaXNtTW90aW9uTWFuYWdlciBleHRlbmRzIEN1YmlzbU1vdGlvblF1ZXVlTWFuYWdlciB7XHJcbiAgICAvKipcclxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgIHN1cGVyKCk7XHJcbiAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7XHJcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjga7lj5blvpdcclxuICAgICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q3VycmVudFByaW9yaXR5KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50UHJpb3JpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLlj5blvpfjgZnjgovjgIJcclxuICAgICAqIEByZXR1cm4gIOODouODvOOCt+ODp+ODs+OBruWEquWFiOW6plxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UmVzZXJ2ZVByaW9yaXR5KCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9yZXNlcnZlUHJpb3JpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuojntITkuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrprjgZnjgovjgIJcclxuICAgICAqIEBwYXJhbSAgIHZhbCAgICAg5YSq5YWI5bqmXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRSZXNlcnZlUHJpb3JpdHkodmFsOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+5a6a5LyY5YWI57qn5ZCO5byA5aeL5Yqo5L2c44CCXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG1vdGlvbiAgICAgICAgICDliqjkvZxcclxuICAgICAqIEBwYXJhbSBhdXRvRGVsZXRlICAgICAg5YaN55Sf44GM54up54yf44GX44Gf44Oi44O844K344On44Oz44Gu44Kk44Oz44K544K/44Oz44K544KS5YmK6Zmk44GZ44KL44Gq44KJdHJ1ZVxyXG4gICAgICogQHBhcmFtIHByaW9yaXR5ICAgICAgICDlhKrlhYjluqZcclxuICAgICAqIEByZXR1cm4gICAgICAgICAgICAgICAg6L+U5Zue5byA5aeL55qE5Yqo5L2c55qE6K+G5Yir5Y+356CB44CC55So5LqO5Yik5a6a5Liq5Yir5Yqo5L2c5piv5ZCm57uT5p2f55qESXNGaW5pc2hlZO+8iO+8ieWPguaVsOOAguaXoOazleW8gOWni+aXtuS4uuKAnC0x4oCdXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGFydE1vdGlvblByaW9yaXR5KFxyXG4gICAgICBtb3Rpb246IEFDdWJpc21Nb3Rpb24sXHJcbiAgICAgIGF1dG9EZWxldGU6IGJvb2xlYW4sXHJcbiAgICAgIHByaW9yaXR5OiBudW1iZXJcclxuICAgICk6IEN1YmlzbU1vdGlvblF1ZXVlRW50cnlIYW5kbGUge1xyXG4gICAgICBpZiAocHJpb3JpdHkgPT0gdGhpcy5fcmVzZXJ2ZVByaW9yaXR5KSB7XHJcbiAgICAgICAgdGhpcy5fcmVzZXJ2ZVByaW9yaXR5ID0gMDsgLy8g5LqI57SE44KS6Kej6ZmkXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IHByaW9yaXR5OyAvLyDlho3nlJ/kuK3jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqbjgpLoqK3lrppcclxuXHJcbiAgICAgIHJldHVybiBzdXBlci5zdGFydE1vdGlvbihtb3Rpb24sIGF1dG9EZWxldGUsIHRoaXMuX3VzZXJUaW1lU2Vjb25kcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrDjgZfjgabjgIHjg6Ljg4fjg6vjgavjg5Hjg6njg6Hjg7zjgr/lgKTjgpLlj43mmKDjgZnjgovjgIJcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbW9kZWwgICDlr77osaHjga7jg6Ljg4fjg6tcclxuICAgICAqIEBwYXJhbSBkZWx0YVRpbWVTZWNvbmRzICAgIOODh+ODq+OCv+aZgumWk1vnp5JdXHJcbiAgICAgKiBAcmV0dXJuICB0cnVlICAgIOabtOaWsOOBleOCjOOBpuOBhOOCi1xyXG4gICAgICogQHJldHVybiAgZmFsc2UgICDmm7TmlrDjgZXjgozjgabjgYTjgarjgYRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHVwZGF0ZU1vdGlvbihtb2RlbDogQ3ViaXNtTW9kZWwsIGRlbHRhVGltZVNlY29uZHM6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICB0aGlzLl91c2VyVGltZVNlY29uZHMgKz0gZGVsdGFUaW1lU2Vjb25kcztcclxuXHJcbiAgICAgIGNvbnN0IHVwZGF0ZWQ6IGJvb2xlYW4gPSBzdXBlci5kb1VwZGF0ZU1vdGlvbihcclxuICAgICAgICBtb2RlbCxcclxuICAgICAgICB0aGlzLl91c2VyVGltZVNlY29uZHNcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmICh0aGlzLmlzRmluaXNoZWQoKSkge1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRQcmlvcml0eSA9IDA7IC8vIOWGjeeUn+S4reOBruODouODvOOCt+ODp+ODs+OBruWEquWFiOW6puOCkuino+mZpFxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdXBkYXRlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODouODvOOCt+ODp+ODs+OCkuS6iOe0hOOBmeOCi+OAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAgIHByaW9yaXR5ICAgIOWEquWFiOW6plxyXG4gICAgICogQHJldHVybiAgdHJ1ZSAgICDkuojntITjgafjgY3jgZ9cclxuICAgICAqIEByZXR1cm4gIGZhbHNlICAg5LqI57SE44Gn44GN44Gq44GL44Gj44GfXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZXNlcnZlTW90aW9uKHByaW9yaXR5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHByaW9yaXR5IDw9IHRoaXMuX3Jlc2VydmVQcmlvcml0eSB8fFxyXG4gICAgICAgIHByaW9yaXR5IDw9IHRoaXMuX2N1cnJlbnRQcmlvcml0eVxyXG4gICAgICApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuX3Jlc2VydmVQcmlvcml0eSA9IHByaW9yaXR5O1xyXG5cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgX2N1cnJlbnRQcmlvcml0eTogbnVtYmVyOyAvLyDnj77lnKjlho3nlJ/kuK3jga7jg6Ljg7zjgrfjg6fjg7Pjga7lhKrlhYjluqZcclxuICAgIF9yZXNlcnZlUHJpb3JpdHk6IG51bWJlcjsgLy8g5YaN55Sf5LqI5a6a44Gu44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm44CC5YaN55Sf5Lit44GvMOOBq+OBquOCi+OAguODouODvOOCt+ODp+ODs+ODleOCoeOCpOODq+OCkuWIpeOCueODrOODg+ODieOBp+iqreOBv+i+vOOCgOOBqOOBjeOBruapn+iDveOAglxyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQTtBQU1BO0FBRUE7QUFBQTtBQU1BO0FBQUE7QUFJQTtBQUFBO0FBRUE7QUFDQTs7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQVVBO0FBS0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBVUE7QUFDQTtBQUVBO0FBS0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFJQTtBQUFBO0FBckdBO0FBc0dBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotionmanager.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotionqueueentry.ts":
/*!********************************************************!*\
  !*** ./Framework/src/motion/cubismmotionqueueentry.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar acubismmotion_1 = __webpack_require__(/*! ./acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\");\r\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMotionQueueEntry = (function () {\r\n        function CubismMotionQueueEntry() {\r\n            this._autoDelete = false;\r\n            this._motion = null;\r\n            this._available = true;\r\n            this._finished = false;\r\n            this._started = false;\r\n            this._startTimeSeconds = -1.0;\r\n            this._fadeInStartTimeSeconds = 0.0;\r\n            this._endTimeSeconds = -1.0;\r\n            this._stateTimeSeconds = 0.0;\r\n            this._stateWeight = 0.0;\r\n            this._lastEventCheckSeconds = 0.0;\r\n            this._motionQueueEntryHandle = this;\r\n        }\r\n        CubismMotionQueueEntry.prototype.release = function () {\r\n            if (this._autoDelete && this._motion) {\r\n                ACubismMotion.delete(this._motion);\r\n            }\r\n        };\r\n        CubismMotionQueueEntry.prototype.startFadeout = function (fadeoutSeconds, userTimeSeconds) {\r\n            var newEndTimeSeconds = userTimeSeconds + fadeoutSeconds;\r\n            if (this._endTimeSeconds < 0.0 ||\r\n                newEndTimeSeconds < this._endTimeSeconds) {\r\n                this._endTimeSeconds = newEndTimeSeconds;\r\n            }\r\n        };\r\n        CubismMotionQueueEntry.prototype.isFinished = function () {\r\n            return this._finished;\r\n        };\r\n        CubismMotionQueueEntry.prototype.isStarted = function () {\r\n            return this._started;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getStartTime = function () {\r\n            return this._startTimeSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getFadeInStartTime = function () {\r\n            return this._fadeInStartTimeSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getEndTime = function () {\r\n            return this._endTimeSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setStartTime = function (startTime) {\r\n            this._startTimeSeconds = startTime;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setFadeInStartTime = function (startTime) {\r\n            this._fadeInStartTimeSeconds = startTime;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setEndTime = function (endTime) {\r\n            this._endTimeSeconds = endTime;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setIsFinished = function (f) {\r\n            this._finished = f;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setIsStarted = function (f) {\r\n            this._started = f;\r\n        };\r\n        CubismMotionQueueEntry.prototype.isAvailable = function () {\r\n            return this._available;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setIsAvailable = function (v) {\r\n            this._available = v;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setState = function (timeSeconds, weight) {\r\n            this._stateTimeSeconds = timeSeconds;\r\n            this._stateWeight = weight;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getStateTime = function () {\r\n            return this._stateTimeSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getStateWeight = function () {\r\n            return this._stateWeight;\r\n        };\r\n        CubismMotionQueueEntry.prototype.getLastCheckEventTime = function () {\r\n            return this._lastEventCheckSeconds;\r\n        };\r\n        CubismMotionQueueEntry.prototype.setLastCheckEventTime = function (checkTime) {\r\n            this._lastEventCheckSeconds = checkTime;\r\n        };\r\n        return CubismMotionQueueEntry;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionQueueEntry = CubismMotionQueueEntry;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotionqueueentry.ts\n");

/***/ }),

/***/ "./Framework/src/motion/cubismmotionqueuemanager.ts":
/*!**********************************************************!*\
  !*** ./Framework/src/motion/cubismmotionqueuemanager.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmotionqueueentry_1 = __webpack_require__(/*! ./cubismmotionqueueentry */ \"./Framework/src/motion/cubismmotionqueueentry.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismMotionQueueEntry = cubismmotionqueueentry_1.Live2DCubismFramework.CubismMotionQueueEntry;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismMotionQueueManager = (function () {\r\n        function CubismMotionQueueManager() {\r\n            this._userTimeSeconds = 0.0;\r\n            this._eventCallBack = null;\r\n            this._eventCustomData = null;\r\n            this._motions = new csmVector();\r\n        }\r\n        CubismMotionQueueManager.prototype.release = function () {\r\n            for (var i = 0; i < this._motions.getSize(); ++i) {\r\n                if (this._motions.at(i)) {\r\n                    this._motions.at(i).release();\r\n                    this._motions.set(i, void 0);\r\n                    this._motions.set(i, null);\r\n                }\r\n            }\r\n            this._motions = null;\r\n        };\r\n        CubismMotionQueueManager.prototype.startMotion = function (motion, autoDelete, userTimeSeconds) {\r\n            var _a;\r\n            if (motion == null) {\r\n                return Live2DCubismFramework.InvalidMotionQueueEntryHandleValue;\r\n            }\r\n            var motionQueueEntry = null;\r\n            for (var i = 0; i < this._motions.getSize(); ++i) {\r\n                motionQueueEntry = this._motions.at(i);\r\n                if (motionQueueEntry == null) {\r\n                    continue;\r\n                }\r\n                motionQueueEntry.startFadeout(motionQueueEntry._motion.getFadeOutTime(), userTimeSeconds);\r\n            }\r\n            motionQueueEntry = new CubismMotionQueueEntry();\r\n            motionQueueEntry._autoDelete = autoDelete;\r\n            motionQueueEntry._motion = motion;\r\n            if (((_a = motion === null || motion === void 0 ? void 0 : motion['_motionData']) === null || _a === void 0 ? void 0 : _a['curveCount']) < 100) {\r\n                this._motions.pushBack(motionQueueEntry);\r\n            }\r\n            return motionQueueEntry._motionQueueEntryHandle;\r\n        };\r\n        CubismMotionQueueManager.prototype.isFinished = function () {\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                var motion = motionQueueEntry._motion;\r\n                if (motion == null) {\r\n                    motionQueueEntry.release();\r\n                    motionQueueEntry = void 0;\r\n                    motionQueueEntry = null;\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                if (!motionQueueEntry.isFinished()) {\r\n                    return false;\r\n                }\r\n                else {\r\n                    ite.preIncrement();\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        CubismMotionQueueManager.prototype.isFinishedByHandle = function (motionQueueEntryNumber) {\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.increment()) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    continue;\r\n                }\r\n                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber &&\r\n                    !motionQueueEntry.isFinished()) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n        CubismMotionQueueManager.prototype.stopAllMotions = function () {\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                motionQueueEntry.release();\r\n                motionQueueEntry = void 0;\r\n                motionQueueEntry = null;\r\n                ite = this._motions.erase(ite);\r\n            }\r\n        };\r\n        CubismMotionQueueManager.prototype.getCubismMotionQueueEntry = function (motionQueueEntryNumber) {\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end()); ite.preIncrement()) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    continue;\r\n                }\r\n                if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber) {\r\n                    return motionQueueEntry;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        CubismMotionQueueManager.prototype.setEventCallback = function (callback, customData) {\r\n            if (customData === void 0) { customData = null; }\r\n            this._eventCallBack = callback;\r\n            this._eventCustomData = customData;\r\n        };\r\n        CubismMotionQueueManager.prototype.doUpdateMotion = function (model, userTimeSeconds) {\r\n            var updated = false;\r\n            for (var ite = this._motions.begin(); ite.notEqual(this._motions.end());) {\r\n                var motionQueueEntry = ite.ptr();\r\n                if (motionQueueEntry == null) {\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                var motion = motionQueueEntry._motion;\r\n                if (motion == null) {\r\n                    motionQueueEntry.release();\r\n                    motionQueueEntry = void 0;\r\n                    motionQueueEntry = null;\r\n                    ite = this._motions.erase(ite);\r\n                    continue;\r\n                }\r\n                motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\r\n                updated = true;\r\n                var firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventTime() -\r\n                    motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());\r\n                for (var i = 0; i < firedList.getSize(); ++i) {\r\n                    this._eventCallBack(this, firedList.at(i), this._eventCustomData);\r\n                }\r\n                motionQueueEntry.setLastCheckEventTime(userTimeSeconds);\r\n                if (motionQueueEntry.isFinished()) {\r\n                    motionQueueEntry.release();\r\n                    motionQueueEntry = void 0;\r\n                    motionQueueEntry = null;\r\n                    ite = this._motions.erase(ite);\r\n                }\r\n                else {\r\n                    ite.preIncrement();\r\n                }\r\n            }\r\n            return updated;\r\n        };\r\n        return CubismMotionQueueManager;\r\n    }());\r\n    Live2DCubismFramework.CubismMotionQueueManager = CubismMotionQueueManager;\r\n    Live2DCubismFramework.InvalidMotionQueueEntryHandleValue = -1;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/motion/cubismmotionqueuemanager.ts\n");

/***/ }),

/***/ "./Framework/src/physics/cubismphysics.ts":
/*!************************************************!*\
  !*** ./Framework/src/physics/cubismphysics.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismphysicsinternal_1 = __webpack_require__(/*! ./cubismphysicsinternal */ \"./Framework/src/physics/cubismphysicsinternal.ts\");\r\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\");\r\nvar cubismmath_1 = __webpack_require__(/*! ../math/cubismmath */ \"./Framework/src/math/cubismmath.ts\");\r\nvar cubismphysicsjson_1 = __webpack_require__(/*! ./cubismphysicsjson */ \"./Framework/src/physics/cubismphysicsjson.ts\");\r\nvar CubismPhysicsJson = cubismphysicsjson_1.Live2DCubismFramework.CubismPhysicsJson;\r\nvar CubismMath = cubismmath_1.Live2DCubismFramework.CubismMath;\r\nvar CubismPhysicsRig = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsRig;\r\nvar CubismPhysicsSubRig = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsSubRig;\r\nvar CubismPhysicsInput = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsInput;\r\nvar CubismPhysicsOutput = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsOutput;\r\nvar CubismPhysicsParticle = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsParticle;\r\nvar CubismPhysicsSource = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsSource;\r\nvar CubismPhysicsTargetType = cubismphysicsinternal_1.Live2DCubismFramework.CubismPhysicsTargetType;\r\nvar CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var PhysicsTypeTagX = 'X';\r\n    var PhysicsTypeTagY = 'Y';\r\n    var PhysicsTypeTagAngle = 'Angle';\r\n    var AirResistance = 5.0;\r\n    var MaximumWeight = 100.0;\r\n    var MovementThreshold = 0.001;\r\n    var CubismPhysics = (function () {\r\n        function CubismPhysics() {\r\n            this._physicsRig = null;\r\n            this._options = new Options();\r\n            this._options.gravity.y = -1.0;\r\n            this._options.gravity.x = 0;\r\n            this._options.wind.x = 0;\r\n            this._options.wind.y = 0;\r\n        }\r\n        CubismPhysics.create = function (buffer, size) {\r\n            var ret = new CubismPhysics();\r\n            ret.parse(buffer, size);\r\n            ret._physicsRig.gravity.y = 0;\r\n            return ret;\r\n        };\r\n        CubismPhysics.delete = function (physics) {\r\n            if (physics != null) {\r\n                physics.release();\r\n                physics = null;\r\n            }\r\n        };\r\n        CubismPhysics.prototype.evaluate = function (model, deltaTimeSeconds) {\r\n            var totalAngle;\r\n            var weight;\r\n            var radAngle;\r\n            var outputValue;\r\n            var totalTranslation = new CubismVector2();\r\n            var currentSetting;\r\n            var currentInput;\r\n            var currentOutput;\r\n            var currentParticles;\r\n            var parameterValue;\r\n            var parameterMaximumValue;\r\n            var parameterMinimumValue;\r\n            var parameterDefaultValue;\r\n            parameterValue = model.getModel().parameters.values;\r\n            parameterMaximumValue = model.getModel().parameters.maximumValues;\r\n            parameterMinimumValue = model.getModel().parameters.minimumValues;\r\n            parameterDefaultValue = model.getModel().parameters.defaultValues;\r\n            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\r\n                totalAngle = { angle: 0.0 };\r\n                totalTranslation.x = 0.0;\r\n                totalTranslation.y = 0.0;\r\n                currentSetting = this._physicsRig.settings.at(settingIndex);\r\n                currentInput = this._physicsRig.inputs.get(currentSetting.baseInputIndex);\r\n                currentOutput = this._physicsRig.outputs.get(currentSetting.baseOutputIndex);\r\n                currentParticles = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\r\n                for (var i = 0; i < currentSetting.inputCount; ++i) {\r\n                    weight = currentInput[i].weight / MaximumWeight;\r\n                    if (currentInput[i].sourceParameterIndex == -1) {\r\n                        currentInput[i].sourceParameterIndex = model.getParameterIndex(currentInput[i].source.id);\r\n                    }\r\n                    currentInput[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValue[currentInput[i].sourceParameterIndex], parameterMinimumValue[currentInput[i].sourceParameterIndex], parameterMaximumValue[currentInput[i].sourceParameterIndex], parameterDefaultValue[currentInput[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInput[0].reflect, weight);\r\n                }\r\n                radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\r\n                totalTranslation.x =\r\n                    totalTranslation.x * CubismMath.cos(radAngle) -\r\n                        totalTranslation.y * CubismMath.sin(radAngle);\r\n                totalTranslation.y =\r\n                    totalTranslation.x * CubismMath.sin(radAngle) +\r\n                        totalTranslation.y * CubismMath.cos(radAngle);\r\n                updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, deltaTimeSeconds, AirResistance);\r\n                for (var i = 0; i < currentSetting.outputCount; ++i) {\r\n                    var particleIndex = currentOutput[i].vertexIndex;\r\n                    if (particleIndex < 1 ||\r\n                        particleIndex >= currentSetting.particleCount) {\r\n                        break;\r\n                    }\r\n                    if (currentOutput[i].destinationParameterIndex == -1) {\r\n                        currentOutput[i].destinationParameterIndex = model.getParameterIndex(currentOutput[i].destination.id);\r\n                    }\r\n                    var translation = new CubismVector2();\r\n                    translation.x =\r\n                        currentParticles[particleIndex].position.x -\r\n                            currentParticles[particleIndex - 1].position.x;\r\n                    translation.y =\r\n                        currentParticles[particleIndex].position.y -\r\n                            currentParticles[particleIndex - 1].position.y;\r\n                    outputValue = currentOutput[i].getValue(translation, currentParticles, particleIndex, currentOutput[i].reflect, this._options.gravity);\r\n                    var destinationParameterIndex = currentOutput[i].destinationParameterIndex;\r\n                    var outParameterValue = !Float32Array.prototype.slice &&\r\n                        'subarray' in Float32Array.prototype\r\n                        ? JSON.parse(JSON.stringify(parameterValue.subarray(destinationParameterIndex)))\r\n                        : parameterValue.slice(destinationParameterIndex);\r\n                    updateOutputParameterValue(outParameterValue, parameterMinimumValue[destinationParameterIndex], parameterMaximumValue[destinationParameterIndex], outputValue, currentOutput[i]);\r\n                    for (var offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValue.length; offset++, outParamIndex++) {\r\n                        parameterValue[offset] = outParameterValue[outParamIndex];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        CubismPhysics.prototype.setOptions = function (options) {\r\n            this._options = options;\r\n        };\r\n        CubismPhysics.prototype.getOption = function () {\r\n            return this._options;\r\n        };\r\n        CubismPhysics.prototype.release = function () {\r\n            this._physicsRig = void 0;\r\n            this._physicsRig = null;\r\n        };\r\n        CubismPhysics.prototype.parse = function (physicsJson, size) {\r\n            this._physicsRig = new CubismPhysicsRig();\r\n            var json = new CubismPhysicsJson(physicsJson, size);\r\n            this._physicsRig.gravity = json.getGravity();\r\n            this._physicsRig.wind = json.getWind();\r\n            this._physicsRig.subRigCount = json.getSubRigCount();\r\n            this._physicsRig.settings.updateSize(this._physicsRig.subRigCount, CubismPhysicsSubRig, true);\r\n            this._physicsRig.inputs.updateSize(json.getTotalInputCount(), CubismPhysicsInput, true);\r\n            this._physicsRig.outputs.updateSize(json.getTotalOutputCount(), CubismPhysicsOutput, true);\r\n            this._physicsRig.particles.updateSize(json.getVertexCount(), CubismPhysicsParticle, true);\r\n            var inputIndex = 0, outputIndex = 0, particleIndex = 0;\r\n            for (var i = 0; i < this._physicsRig.settings.getSize(); ++i) {\r\n                this._physicsRig.settings.at(i).normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);\r\n                this._physicsRig.settings.at(i).normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);\r\n                this._physicsRig.settings.at(i).normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);\r\n                this._physicsRig.settings.at(i).normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);\r\n                this._physicsRig.settings.at(i).normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);\r\n                this._physicsRig.settings.at(i).normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);\r\n                this._physicsRig.settings.at(i).inputCount = json.getInputCount(i);\r\n                this._physicsRig.settings.at(i).baseInputIndex = inputIndex;\r\n                for (var j = 0; j < this._physicsRig.settings.at(i).inputCount; ++j) {\r\n                    this._physicsRig.inputs.at(inputIndex + j).sourceParameterIndex = -1;\r\n                    this._physicsRig.inputs.at(inputIndex + j).weight = json.getInputWeight(i, j);\r\n                    this._physicsRig.inputs.at(inputIndex + j).reflect = json.getInputReflect(i, j);\r\n                    if (json.getInputType(i, j) == PhysicsTypeTagX) {\r\n                        this._physicsRig.inputs.at(inputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_X;\r\n                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;\r\n                    }\r\n                    else if (json.getInputType(i, j) == PhysicsTypeTagY) {\r\n                        this._physicsRig.inputs.at(inputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_Y;\r\n                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;\r\n                    }\r\n                    else if (json.getInputType(i, j) == PhysicsTypeTagAngle) {\r\n                        this._physicsRig.inputs.at(inputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n                        this._physicsRig.inputs.at(inputIndex + j).getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;\r\n                    }\r\n                    this._physicsRig.inputs.at(inputIndex + j).source.targetType =\r\n                        CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n                    this._physicsRig.inputs.at(inputIndex + j).source.id = json.getInputSourceId(i, j);\r\n                }\r\n                inputIndex += this._physicsRig.settings.at(i).inputCount;\r\n                this._physicsRig.settings.at(i).outputCount = json.getOutputCount(i);\r\n                this._physicsRig.settings.at(i).baseOutputIndex = outputIndex;\r\n                for (var j = 0; j < this._physicsRig.settings.at(i).outputCount; ++j) {\r\n                    this._physicsRig.outputs.at(outputIndex + j).destinationParameterIndex = -1;\r\n                    this._physicsRig.outputs.at(outputIndex + j).vertexIndex = json.getOutputVertexIndex(i, j);\r\n                    this._physicsRig.outputs.at(outputIndex + j).angleScale = json.getOutputAngleScale(i, j);\r\n                    this._physicsRig.outputs.at(outputIndex + j).weight = json.getOutputWeight(i, j);\r\n                    this._physicsRig.outputs.at(outputIndex + j).destination.targetType =\r\n                        CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n                    this._physicsRig.outputs.at(outputIndex + j).destination.id = json.getOutputDestinationId(i, j);\r\n                    if (json.getOutputType(i, j) == PhysicsTypeTagX) {\r\n                        this._physicsRig.outputs.at(outputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_X;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationX;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationX;\r\n                    }\r\n                    else if (json.getOutputType(i, j) == PhysicsTypeTagY) {\r\n                        this._physicsRig.outputs.at(outputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_Y;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputTranslationY;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleTranslationY;\r\n                    }\r\n                    else if (json.getOutputType(i, j) == PhysicsTypeTagAngle) {\r\n                        this._physicsRig.outputs.at(outputIndex + j).type =\r\n                            CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getValue = getOutputAngle;\r\n                        this._physicsRig.outputs.at(outputIndex + j).getScale = getOutputScaleAngle;\r\n                    }\r\n                    this._physicsRig.outputs.at(outputIndex + j).reflect = json.getOutputReflect(i, j);\r\n                }\r\n                outputIndex += this._physicsRig.settings.at(i).outputCount;\r\n                this._physicsRig.settings.at(i).particleCount = json.getParticleCount(i);\r\n                this._physicsRig.settings.at(i).baseParticleIndex = particleIndex;\r\n                for (var j = 0; j < this._physicsRig.settings.at(i).particleCount; ++j) {\r\n                    this._physicsRig.particles.at(particleIndex + j).mobility = json.getParticleMobility(i, j);\r\n                    this._physicsRig.particles.at(particleIndex + j).delay = json.getParticleDelay(i, j);\r\n                    this._physicsRig.particles.at(particleIndex + j).acceleration = json.getParticleAcceleration(i, j);\r\n                    this._physicsRig.particles.at(particleIndex + j).radius = json.getParticleRadius(i, j);\r\n                    this._physicsRig.particles.at(particleIndex + j).position = json.getParticlePosition(i, j);\r\n                }\r\n                particleIndex += this._physicsRig.settings.at(i).particleCount;\r\n            }\r\n            this.initialize();\r\n            json.release();\r\n            json = void 0;\r\n            json = null;\r\n        };\r\n        CubismPhysics.prototype.initialize = function () {\r\n            var strand;\r\n            var currentSetting;\r\n            var radius;\r\n            for (var settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\r\n                currentSetting = this._physicsRig.settings.at(settingIndex);\r\n                strand = this._physicsRig.particles.get(currentSetting.baseParticleIndex);\r\n                strand[0].initialPosition = new CubismVector2(0.0, 0.0);\r\n                strand[0].lastPosition = new CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);\r\n                strand[0].lastGravity = new CubismVector2(0.0, -1.0);\r\n                strand[0].lastGravity.y *= -1.0;\r\n                strand[0].velocity = new CubismVector2(0.0, 0.0);\r\n                strand[0].force = new CubismVector2(0.0, 0.0);\r\n                for (var i = 1; i < currentSetting.particleCount; ++i) {\r\n                    radius = new CubismVector2(0.0, 0.0);\r\n                    radius.y = strand[i].radius;\r\n                    strand[i].initialPosition = new CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);\r\n                    strand[i].position = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\r\n                    strand[i].lastPosition = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\r\n                    strand[i].lastGravity = new CubismVector2(0.0, -1.0);\r\n                    strand[i].lastGravity.y *= -1.0;\r\n                    strand[i].velocity = new CubismVector2(0.0, 0.0);\r\n                    strand[i].force = new CubismVector2(0.0, 0.0);\r\n                }\r\n            }\r\n        };\r\n        return CubismPhysics;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysics = CubismPhysics;\r\n    var Options = (function () {\r\n        function Options() {\r\n            this.gravity = new CubismVector2(0, 0);\r\n            this.wind = new CubismVector2(0, 0);\r\n        }\r\n        return Options;\r\n    }());\r\n    Live2DCubismFramework.Options = Options;\r\n    function sign(value) {\r\n        var ret = 0;\r\n        if (value > 0.0) {\r\n            ret = 1;\r\n        }\r\n        else if (value < 0.0) {\r\n            ret = -1;\r\n        }\r\n        return ret;\r\n    }\r\n    function getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\r\n        targetTranslation.x +=\r\n            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\r\n    }\r\n    function getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\r\n        targetTranslation.y +=\r\n            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\r\n    }\r\n    function getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {\r\n        targetAngle.angle +=\r\n            normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;\r\n    }\r\n    function getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {\r\n        var outputValue = translation.x;\r\n        if (isInverted) {\r\n            outputValue *= -1.0;\r\n        }\r\n        return outputValue;\r\n    }\r\n    function getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {\r\n        var outputValue = translation.y;\r\n        if (isInverted) {\r\n            outputValue *= -1.0;\r\n        }\r\n        return outputValue;\r\n    }\r\n    function getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {\r\n        var outputValue;\r\n        if (particleIndex >= 2) {\r\n            parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);\r\n        }\r\n        else {\r\n            parentGravity = parentGravity.multiplyByScaler(-1.0);\r\n        }\r\n        outputValue = CubismMath.directionToRadian(parentGravity, translation);\r\n        if (isInverted) {\r\n            outputValue *= -1.0;\r\n        }\r\n        return outputValue;\r\n    }\r\n    function getRangeValue(min, max) {\r\n        var maxValue = CubismMath.max(min, max);\r\n        var minValue = CubismMath.min(min, max);\r\n        return CubismMath.abs(maxValue - minValue);\r\n    }\r\n    function getDefaultValue(min, max) {\r\n        var minValue = CubismMath.min(min, max);\r\n        return minValue + getRangeValue(min, max) / 2.0;\r\n    }\r\n    function getOutputScaleTranslationX(translationScale, angleScale) {\r\n        return JSON.parse(JSON.stringify(translationScale.x));\r\n    }\r\n    function getOutputScaleTranslationY(translationScale, angleScale) {\r\n        return JSON.parse(JSON.stringify(translationScale.y));\r\n    }\r\n    function getOutputScaleAngle(translationScale, angleScale) {\r\n        return JSON.parse(JSON.stringify(angleScale));\r\n    }\r\n    function updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {\r\n        var totalRadian;\r\n        var delay;\r\n        var radian;\r\n        var currentGravity;\r\n        var direction = new CubismVector2(0.0, 0.0);\r\n        var velocity = new CubismVector2(0.0, 0.0);\r\n        var force = new CubismVector2(0.0, 0.0);\r\n        var newDirection = new CubismVector2(0.0, 0.0);\r\n        strand[0].position = new CubismVector2(totalTranslation.x, totalTranslation.y);\r\n        totalRadian = CubismMath.degreesToRadian(totalAngle);\r\n        currentGravity = CubismMath.radianToDirection(totalRadian);\r\n        currentGravity.normalize();\r\n        for (var i = 1; i < strandCount; ++i) {\r\n            strand[i].force = currentGravity\r\n                .multiplyByScaler(strand[i].acceleration)\r\n                .add(windDirection);\r\n            strand[i].lastPosition = new CubismVector2(strand[i].position.x, strand[i].position.y);\r\n            delay = strand[i].delay * deltaTimeSeconds * 30.0;\r\n            direction = strand[i].position.substract(strand[i - 1].position);\r\n            radian =\r\n                CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) /\r\n                    airResistance;\r\n            direction.x =\r\n                CubismMath.cos(radian) * direction.x -\r\n                    direction.y * CubismMath.sin(radian);\r\n            direction.y =\r\n                CubismMath.sin(radian) * direction.x +\r\n                    direction.y * CubismMath.cos(radian);\r\n            strand[i].position = strand[i - 1].position.add(direction);\r\n            velocity = strand[i].velocity.multiplyByScaler(delay);\r\n            force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\r\n            strand[i].position = strand[i].position.add(velocity).add(force);\r\n            newDirection = strand[i].position.substract(strand[i - 1].position);\r\n            newDirection.normalize();\r\n            strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));\r\n            if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\r\n                strand[i].position.x = 0.0;\r\n            }\r\n            if (delay != 0.0) {\r\n                strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\r\n                strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\r\n                strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);\r\n            }\r\n            strand[i].force = new CubismVector2(0.0, 0.0);\r\n            strand[i].lastGravity = new CubismVector2(currentGravity.x, currentGravity.y);\r\n        }\r\n    }\r\n    function updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {\r\n        var outputScale;\r\n        var value;\r\n        var weight;\r\n        outputScale = output.getScale(output.translationScale, output.angleScale);\r\n        value = translation * outputScale;\r\n        if (value < parameterValueMinimum) {\r\n            if (value < output.valueBelowMinimum) {\r\n                output.valueBelowMinimum = value;\r\n            }\r\n            value = parameterValueMinimum;\r\n        }\r\n        else if (value > parameterValueMaximum) {\r\n            if (value > output.valueExceededMaximum) {\r\n                output.valueExceededMaximum = value;\r\n            }\r\n            value = parameterValueMaximum;\r\n        }\r\n        weight = output.weight / MaximumWeight;\r\n        if (weight >= 1.0) {\r\n            parameterValue[0] = value;\r\n        }\r\n        else {\r\n            value = parameterValue[0] * (1.0 - weight) + value * weight;\r\n            parameterValue[0] = value;\r\n        }\r\n    }\r\n    function normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {\r\n        var result = 0.0;\r\n        var maxValue = CubismMath.max(parameterMaximum, parameterMinimum);\r\n        if (maxValue < value) {\r\n            value = maxValue;\r\n        }\r\n        var minValue = CubismMath.min(parameterMaximum, parameterMinimum);\r\n        if (minValue > value) {\r\n            value = minValue;\r\n        }\r\n        var minNormValue = CubismMath.min(normalizedMinimum, normalizedMaximum);\r\n        var maxNormValue = CubismMath.max(normalizedMinimum, normalizedMaximum);\r\n        var middleNormValue = normalizedDefault;\r\n        var middleValue = getDefaultValue(minValue, maxValue);\r\n        var paramValue = value - middleValue;\r\n        switch (sign(paramValue)) {\r\n            case 1: {\r\n                var nLength = maxNormValue - middleNormValue;\r\n                var pLength = maxValue - middleValue;\r\n                if (pLength != 0.0) {\r\n                    result = paramValue * (nLength / pLength);\r\n                    result += middleNormValue;\r\n                }\r\n                break;\r\n            }\r\n            case -1: {\r\n                var nLength = minNormValue - middleNormValue;\r\n                var pLength = minValue - middleValue;\r\n                if (pLength != 0.0) {\r\n                    result = paramValue * (nLength / pLength);\r\n                    result += middleNormValue;\r\n                }\r\n                break;\r\n            }\r\n            case 0: {\r\n                result = middleNormValue;\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n        return isInverted ? result : result * -1.0;\r\n    }\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/physics/cubismphysics.ts\n");

/***/ }),

/***/ "./Framework/src/physics/cubismphysicsinternal.ts":
/*!********************************************************!*\
  !*** ./Framework/src/physics/cubismphysicsinternal.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismPhysicsTargetType;\r\n    (function (CubismPhysicsTargetType) {\r\n        CubismPhysicsTargetType[CubismPhysicsTargetType[\"CubismPhysicsTargetType_Parameter\"] = 0] = \"CubismPhysicsTargetType_Parameter\";\r\n    })(CubismPhysicsTargetType = Live2DCubismFramework.CubismPhysicsTargetType || (Live2DCubismFramework.CubismPhysicsTargetType = {}));\r\n    var CubismPhysicsSource;\r\n    (function (CubismPhysicsSource) {\r\n        CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_X\"] = 0] = \"CubismPhysicsSource_X\";\r\n        CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Y\"] = 1] = \"CubismPhysicsSource_Y\";\r\n        CubismPhysicsSource[CubismPhysicsSource[\"CubismPhysicsSource_Angle\"] = 2] = \"CubismPhysicsSource_Angle\";\r\n    })(CubismPhysicsSource = Live2DCubismFramework.CubismPhysicsSource || (Live2DCubismFramework.CubismPhysicsSource = {}));\r\n    var PhysicsJsonEffectiveForces = (function () {\r\n        function PhysicsJsonEffectiveForces() {\r\n            this.gravity = new CubismVector2(0, 0);\r\n            this.wind = new CubismVector2(0, 0);\r\n        }\r\n        return PhysicsJsonEffectiveForces;\r\n    }());\r\n    Live2DCubismFramework.PhysicsJsonEffectiveForces = PhysicsJsonEffectiveForces;\r\n    var CubismPhysicsParameter = (function () {\r\n        function CubismPhysicsParameter() {\r\n        }\r\n        return CubismPhysicsParameter;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsParameter = CubismPhysicsParameter;\r\n    var CubismPhysicsNormalization = (function () {\r\n        function CubismPhysicsNormalization() {\r\n        }\r\n        return CubismPhysicsNormalization;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsNormalization = CubismPhysicsNormalization;\r\n    var CubismPhysicsParticle = (function () {\r\n        function CubismPhysicsParticle() {\r\n            this.initialPosition = new CubismVector2(0, 0);\r\n            this.position = new CubismVector2(0, 0);\r\n            this.lastPosition = new CubismVector2(0, 0);\r\n            this.lastGravity = new CubismVector2(0, 0);\r\n            this.force = new CubismVector2(0, 0);\r\n            this.velocity = new CubismVector2(0, 0);\r\n        }\r\n        return CubismPhysicsParticle;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsParticle = CubismPhysicsParticle;\r\n    var CubismPhysicsSubRig = (function () {\r\n        function CubismPhysicsSubRig() {\r\n            this.normalizationPosition = new CubismPhysicsNormalization();\r\n            this.normalizationAngle = new CubismPhysicsNormalization();\r\n        }\r\n        return CubismPhysicsSubRig;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsSubRig = CubismPhysicsSubRig;\r\n    var CubismPhysicsInput = (function () {\r\n        function CubismPhysicsInput() {\r\n            this.source = new CubismPhysicsParameter();\r\n        }\r\n        return CubismPhysicsInput;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsInput = CubismPhysicsInput;\r\n    var CubismPhysicsOutput = (function () {\r\n        function CubismPhysicsOutput() {\r\n            this.destination = new CubismPhysicsParameter();\r\n            this.translationScale = new CubismVector2(0, 0);\r\n        }\r\n        return CubismPhysicsOutput;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsOutput = CubismPhysicsOutput;\r\n    var CubismPhysicsRig = (function () {\r\n        function CubismPhysicsRig() {\r\n            this.settings = new csmVector();\r\n            this.inputs = new csmVector();\r\n            this.outputs = new csmVector();\r\n            this.particles = new csmVector();\r\n            this.gravity = new CubismVector2(0, 0);\r\n            this.wind = new CubismVector2(0, 0);\r\n        }\r\n        return CubismPhysicsRig;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsRig = CubismPhysicsRig;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/physics/cubismphysicsinternal.ts\n");

/***/ }),

/***/ "./Framework/src/physics/cubismphysicsjson.ts":
/*!****************************************************!*\
  !*** ./Framework/src/physics/cubismphysicsjson.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismjson_1 = __webpack_require__(/*! ../utils/cubismjson */ \"./Framework/src/utils/cubismjson.ts\");\r\nvar cubismvector2_1 = __webpack_require__(/*! ../math/cubismvector2 */ \"./Framework/src/math/cubismvector2.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismVector2 = cubismvector2_1.Live2DCubismFramework.CubismVector2;\r\nvar CubismJson = cubismjson_1.Live2DCubismFramework.CubismJson;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var Position = 'Position';\r\n    var X = 'X';\r\n    var Y = 'Y';\r\n    var Angle = 'Angle';\r\n    var Type = 'Type';\r\n    var Id = 'Id';\r\n    var Meta = 'Meta';\r\n    var EffectiveForces = 'EffectiveForces';\r\n    var TotalInputCount = 'TotalInputCount';\r\n    var TotalOutputCount = 'TotalOutputCount';\r\n    var PhysicsSettingCount = 'PhysicsSettingCount';\r\n    var Gravity = 'Gravity';\r\n    var Wind = 'Wind';\r\n    var VertexCount = 'VertexCount';\r\n    var PhysicsSettings = 'PhysicsSettings';\r\n    var Normalization = 'Normalization';\r\n    var Minimum = 'Minimum';\r\n    var Maximum = 'Maximum';\r\n    var Default = 'Default';\r\n    var Reflect = 'Reflect';\r\n    var Weight = 'Weight';\r\n    var Input = 'Input';\r\n    var Source = 'Source';\r\n    var Output = 'Output';\r\n    var Scale = 'Scale';\r\n    var VertexIndex = 'VertexIndex';\r\n    var Destination = 'Destination';\r\n    var Vertices = 'Vertices';\r\n    var Mobility = 'Mobility';\r\n    var Delay = 'Delay';\r\n    var Radius = 'Radius';\r\n    var Acceleration = 'Acceleration';\r\n    var CubismPhysicsJson = (function () {\r\n        function CubismPhysicsJson(buffer, size) {\r\n            this._json = CubismJson.create(buffer, size);\r\n        }\r\n        CubismPhysicsJson.prototype.release = function () {\r\n            CubismJson.delete(this._json);\r\n        };\r\n        CubismPhysicsJson.prototype.getGravity = function () {\r\n            var ret = new CubismVector2(0, 0);\r\n            ret.x = this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(EffectiveForces)\r\n                .getValueByString(Gravity)\r\n                .getValueByString(X)\r\n                .toFloat();\r\n            ret.y = this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(EffectiveForces)\r\n                .getValueByString(Gravity)\r\n                .getValueByString(Y)\r\n                .toFloat();\r\n            return ret;\r\n        };\r\n        CubismPhysicsJson.prototype.getWind = function () {\r\n            var ret = new CubismVector2(0, 0);\r\n            ret.x = this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(EffectiveForces)\r\n                .getValueByString(Wind)\r\n                .getValueByString(X)\r\n                .toFloat();\r\n            ret.y = this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(EffectiveForces)\r\n                .getValueByString(Wind)\r\n                .getValueByString(Y)\r\n                .toFloat();\r\n            return ret;\r\n        };\r\n        CubismPhysicsJson.prototype.getSubRigCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(PhysicsSettingCount)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getTotalInputCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalInputCount)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getTotalOutputCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(TotalOutputCount)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getVertexCount = function () {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(Meta)\r\n                .getValueByString(VertexCount)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationPositionMinimumValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Position)\r\n                .getValueByString(Minimum)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationPositionMaximumValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Position)\r\n                .getValueByString(Maximum)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationPositionDefaultValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Position)\r\n                .getValueByString(Default)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationAngleMinimumValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Angle)\r\n                .getValueByString(Minimum)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationAngleMaximumValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Angle)\r\n                .getValueByString(Maximum)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getNormalizationAngleDefaultValue = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Normalization)\r\n                .getValueByString(Angle)\r\n                .getValueByString(Default)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputCount = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getVector()\r\n                .getSize();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputWeight = function (physicsSettingIndex, inputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getValueByIndex(inputIndex)\r\n                .getValueByString(Weight)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputReflect = function (physicsSettingIndex, inputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getValueByIndex(inputIndex)\r\n                .getValueByString(Reflect)\r\n                .toBoolean();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputType = function (physicsSettingIndex, inputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getValueByIndex(inputIndex)\r\n                .getValueByString(Type)\r\n                .getRawString();\r\n        };\r\n        CubismPhysicsJson.prototype.getInputSourceId = function (physicsSettingIndex, inputIndex) {\r\n            return CubismFramework.getIdManager().getId(this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Input)\r\n                .getValueByIndex(inputIndex)\r\n                .getValueByString(Source)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputCount = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getVector()\r\n                .getSize();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputVertexIndex = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(VertexIndex)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputAngleScale = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Scale)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputWeight = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Weight)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputDestinationId = function (physicsSettingIndex, outputIndex) {\r\n            return CubismFramework.getIdManager().getId(this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Destination)\r\n                .getValueByString(Id)\r\n                .getRawString());\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputType = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Type)\r\n                .getRawString();\r\n        };\r\n        CubismPhysicsJson.prototype.getOutputReflect = function (physicsSettingIndex, outputIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Output)\r\n                .getValueByIndex(outputIndex)\r\n                .getValueByString(Reflect)\r\n                .toBoolean();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleCount = function (physicsSettingIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getVector()\r\n                .getSize();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleMobility = function (physicsSettingIndex, vertexIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Mobility)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleDelay = function (physicsSettingIndex, vertexIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Delay)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleAcceleration = function (physicsSettingIndex, vertexIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Acceleration)\r\n                .toFloat();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticleRadius = function (physicsSettingIndex, vertexIndex) {\r\n            return this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Radius)\r\n                .toInt();\r\n        };\r\n        CubismPhysicsJson.prototype.getParticlePosition = function (physicsSettingIndex, vertexIndex) {\r\n            var ret = new CubismVector2(0, 0);\r\n            ret.x = this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Position)\r\n                .getValueByString(X)\r\n                .toFloat();\r\n            ret.y = this._json\r\n                .getRoot()\r\n                .getValueByString(PhysicsSettings)\r\n                .getValueByIndex(physicsSettingIndex)\r\n                .getValueByString(Vertices)\r\n                .getValueByIndex(vertexIndex)\r\n                .getValueByString(Position)\r\n                .getValueByString(Y)\r\n                .toFloat();\r\n            return ret;\r\n        };\r\n        return CubismPhysicsJson;\r\n    }());\r\n    Live2DCubismFramework.CubismPhysicsJson = CubismPhysicsJson;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/physics/cubismphysicsjson.ts\n");

/***/ }),

/***/ "./Framework/src/rendering/cubismrenderer.ts":
/*!***************************************************!*\
  !*** ./Framework/src/rendering/cubismrenderer.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\r\nvar CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismRenderer = (function () {\r\n        function CubismRenderer() {\r\n            this._isCulling = false;\r\n            this._isPremultipliedAlpha = false;\r\n            this._anisortopy = 0.0;\r\n            this._model = null;\r\n            this._modelColor = new CubismTextureColor();\r\n            this._mvpMatrix4x4 = new CubismMatrix44();\r\n            this._mvpMatrix4x4.loadIdentity();\r\n        }\r\n        CubismRenderer.create = function () {\r\n            return null;\r\n        };\r\n        CubismRenderer.delete = function (renderer) {\r\n            renderer = null;\r\n        };\r\n        CubismRenderer.prototype.initialize = function (model) {\r\n            this._model = model;\r\n        };\r\n        CubismRenderer.prototype.drawModel = function () {\r\n            if (this.getModel() == null)\r\n                return;\r\n            this.doDrawModel();\r\n        };\r\n        CubismRenderer.prototype.setMvpMatrix = function (matrix44) {\r\n            this._mvpMatrix4x4.setMatrix(matrix44.getArray());\r\n        };\r\n        CubismRenderer.prototype.getMvpMatrix = function () {\r\n            return this._mvpMatrix4x4;\r\n        };\r\n        CubismRenderer.prototype.setModelColor = function (red, green, blue, alpha) {\r\n            if (red < 0.0) {\r\n                red = 0.0;\r\n            }\r\n            else if (red > 1.0) {\r\n                red = 1.0;\r\n            }\r\n            if (green < 0.0) {\r\n                green = 0.0;\r\n            }\r\n            else if (green > 1.0) {\r\n                green = 1.0;\r\n            }\r\n            if (blue < 0.0) {\r\n                blue = 0.0;\r\n            }\r\n            else if (blue > 1.0) {\r\n                blue = 1.0;\r\n            }\r\n            if (alpha < 0.0) {\r\n                alpha = 0.0;\r\n            }\r\n            else if (alpha > 1.0) {\r\n                alpha = 1.0;\r\n            }\r\n            this._modelColor.R = red;\r\n            this._modelColor.G = green;\r\n            this._modelColor.B = blue;\r\n            this._modelColor.A = alpha;\r\n        };\r\n        CubismRenderer.prototype.getModelColor = function () {\r\n            return JSON.parse(JSON.stringify(this._modelColor));\r\n        };\r\n        CubismRenderer.prototype.setIsPremultipliedAlpha = function (enable) {\r\n            this._isPremultipliedAlpha = enable;\r\n        };\r\n        CubismRenderer.prototype.isPremultipliedAlpha = function () {\r\n            return this._isPremultipliedAlpha;\r\n        };\r\n        CubismRenderer.prototype.setIsCulling = function (culling) {\r\n            this._isCulling = culling;\r\n        };\r\n        CubismRenderer.prototype.isCulling = function () {\r\n            return this._isCulling;\r\n        };\r\n        CubismRenderer.prototype.setAnisotropy = function (n) {\r\n            this._anisortopy = n;\r\n        };\r\n        CubismRenderer.prototype.getAnisotropy = function () {\r\n            return this._anisortopy;\r\n        };\r\n        CubismRenderer.prototype.getModel = function () {\r\n            return this._model;\r\n        };\r\n        return CubismRenderer;\r\n    }());\r\n    Live2DCubismFramework.CubismRenderer = CubismRenderer;\r\n    var CubismBlendMode;\r\n    (function (CubismBlendMode) {\r\n        CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Normal\"] = 0] = \"CubismBlendMode_Normal\";\r\n        CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Additive\"] = 1] = \"CubismBlendMode_Additive\";\r\n        CubismBlendMode[CubismBlendMode[\"CubismBlendMode_Multiplicative\"] = 2] = \"CubismBlendMode_Multiplicative\";\r\n    })(CubismBlendMode = Live2DCubismFramework.CubismBlendMode || (Live2DCubismFramework.CubismBlendMode = {}));\r\n    var CubismTextureColor = (function () {\r\n        function CubismTextureColor() {\r\n            this.R = 1.0;\r\n            this.G = 1.0;\r\n            this.B = 1.0;\r\n            this.A = 1.0;\r\n        }\r\n        return CubismTextureColor;\r\n    }());\r\n    Live2DCubismFramework.CubismTextureColor = CubismTextureColor;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/rendering/cubismrenderer.ts\n");

/***/ }),

/***/ "./Framework/src/rendering/cubismrenderer_webgl.ts":
/*!*********************************************************!*\
  !*** ./Framework/src/rendering/cubismrenderer_webgl.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar csmrectf_1 = __webpack_require__(/*! ../type/csmrectf */ \"./Framework/src/type/csmrectf.ts\");\r\nvar cubismrenderer_1 = __webpack_require__(/*! ./cubismrenderer */ \"./Framework/src/rendering/cubismrenderer.ts\");\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ../math/cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\r\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"./Framework/src/type/csmmap.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar Constant = live2dcubismframework_1.Live2DCubismFramework.Constant;\r\nvar CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar csmRect = csmrectf_1.Live2DCubismFramework.csmRect;\r\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismRenderer = cubismrenderer_1.Live2DCubismFramework.CubismRenderer;\r\nvar CubismBlendMode = cubismrenderer_1.Live2DCubismFramework.CubismBlendMode;\r\nvar CubismTextureColor = cubismrenderer_1.Live2DCubismFramework.CubismTextureColor;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var ColorChannelCount = 4;\r\n    var shaderCount = 10;\r\n    var s_instance;\r\n    var s_viewport;\r\n    var s_fbo;\r\n    var CubismClippingManager_WebGL = (function () {\r\n        function CubismClippingManager_WebGL() {\r\n            this._maskRenderTexture = null;\r\n            this._colorBuffer = null;\r\n            this._currentFrameNo = 0;\r\n            this._clippingMaskBufferSize = 256;\r\n            this._clippingContextListForMask = new csmVector();\r\n            this._clippingContextListForDraw = new csmVector();\r\n            this._channelColors = new csmVector();\r\n            this._tmpBoundsOnModel = new csmRect();\r\n            this._tmpMatrix = new CubismMatrix44();\r\n            this._tmpMatrixForMask = new CubismMatrix44();\r\n            this._tmpMatrixForDraw = new CubismMatrix44();\r\n            this._maskTexture = null;\r\n            var tmp = new CubismTextureColor();\r\n            tmp.R = 1.0;\r\n            tmp.G = 0.0;\r\n            tmp.B = 0.0;\r\n            tmp.A = 0.0;\r\n            this._channelColors.pushBack(tmp);\r\n            tmp = new CubismTextureColor();\r\n            tmp.R = 0.0;\r\n            tmp.G = 1.0;\r\n            tmp.B = 0.0;\r\n            tmp.A = 0.0;\r\n            this._channelColors.pushBack(tmp);\r\n            tmp = new CubismTextureColor();\r\n            tmp.R = 0.0;\r\n            tmp.G = 0.0;\r\n            tmp.B = 1.0;\r\n            tmp.A = 0.0;\r\n            this._channelColors.pushBack(tmp);\r\n            tmp = new CubismTextureColor();\r\n            tmp.R = 0.0;\r\n            tmp.G = 0.0;\r\n            tmp.B = 0.0;\r\n            tmp.A = 1.0;\r\n            this._channelColors.pushBack(tmp);\r\n        }\r\n        CubismClippingManager_WebGL.prototype.getChannelFlagAsColor = function (channelNo) {\r\n            return this._channelColors.at(channelNo);\r\n        };\r\n        CubismClippingManager_WebGL.prototype.getMaskRenderTexture = function () {\r\n            var ret = 0;\r\n            if (this._maskTexture && this._maskTexture.texture != 0) {\r\n                this._maskTexture.frameNo = this._currentFrameNo;\r\n                ret = this._maskTexture.texture;\r\n            }\r\n            if (ret == 0) {\r\n                var size = this._clippingMaskBufferSize;\r\n                this._colorBuffer = this.gl.createTexture();\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);\r\n                this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\r\n                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n                ret = this.gl.createFramebuffer();\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);\r\n                this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n                this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);\r\n            }\r\n            return ret;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.setGL = function (gl) {\r\n            this.gl = gl;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.calcClippedDrawTotalBounds = function (model, clippingContext) {\r\n            var clippedDrawTotalMinX = Number.MAX_VALUE;\r\n            var clippedDrawTotalMinY = Number.MAX_VALUE;\r\n            var clippedDrawTotalMaxX = Number.MIN_VALUE;\r\n            var clippedDrawTotalMaxY = Number.MIN_VALUE;\r\n            var clippedDrawCount = clippingContext._clippedDrawableIndexList.length;\r\n            for (var clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {\r\n                var drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\r\n                var drawableVertexCount = model.getDrawableVertexCount(drawableIndex);\r\n                var drawableVertexes = model.getDrawableVertices(drawableIndex);\r\n                var minX = Number.MAX_VALUE;\r\n                var minY = Number.MAX_VALUE;\r\n                var maxX = Number.MIN_VALUE;\r\n                var maxY = Number.MIN_VALUE;\r\n                var loop = drawableVertexCount * Constant.vertexStep;\r\n                for (var pi = Constant.vertexOffset; pi < loop; pi += Constant.vertexStep) {\r\n                    var x = drawableVertexes[pi];\r\n                    var y = drawableVertexes[pi + 1];\r\n                    if (x < minX) {\r\n                        minX = x;\r\n                    }\r\n                    if (x > maxX) {\r\n                        maxX = x;\r\n                    }\r\n                    if (y < minY) {\r\n                        minY = y;\r\n                    }\r\n                    if (y > maxY) {\r\n                        maxY = y;\r\n                    }\r\n                }\r\n                if (minX == Number.MAX_VALUE) {\r\n                    continue;\r\n                }\r\n                if (minX < clippedDrawTotalMinX) {\r\n                    clippedDrawTotalMinX = minX;\r\n                }\r\n                if (minY < clippedDrawTotalMinY) {\r\n                    clippedDrawTotalMinY = minY;\r\n                }\r\n                if (maxX > clippedDrawTotalMaxX) {\r\n                    clippedDrawTotalMaxX = maxX;\r\n                }\r\n                if (maxY > clippedDrawTotalMaxY) {\r\n                    clippedDrawTotalMaxY = maxY;\r\n                }\r\n                if (clippedDrawTotalMinX == Number.MAX_VALUE) {\r\n                    clippingContext._allClippedDrawRect.x = 0.0;\r\n                    clippingContext._allClippedDrawRect.y = 0.0;\r\n                    clippingContext._allClippedDrawRect.width = 0.0;\r\n                    clippingContext._allClippedDrawRect.height = 0.0;\r\n                    clippingContext._isUsing = false;\r\n                }\r\n                else {\r\n                    clippingContext._isUsing = true;\r\n                    var w = clippedDrawTotalMaxX - clippedDrawTotalMinX;\r\n                    var h = clippedDrawTotalMaxY - clippedDrawTotalMinY;\r\n                    clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\r\n                    clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\r\n                    clippingContext._allClippedDrawRect.width = w;\r\n                    clippingContext._allClippedDrawRect.height = h;\r\n                }\r\n            }\r\n        };\r\n        CubismClippingManager_WebGL.prototype.release = function () {\r\n            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n                if (this._clippingContextListForMask.at(i)) {\r\n                    this._clippingContextListForMask.at(i).release();\r\n                    this._clippingContextListForMask.set(i, void 0);\r\n                }\r\n                this._clippingContextListForMask.set(i, null);\r\n            }\r\n            this._clippingContextListForMask = null;\r\n            for (var i = 0; i < this._clippingContextListForDraw.getSize(); i++) {\r\n                this._clippingContextListForDraw.set(i, null);\r\n            }\r\n            this._clippingContextListForDraw = null;\r\n            if (this._maskTexture) {\r\n                this.gl.deleteFramebuffer(this._maskTexture.texture);\r\n                this._maskTexture = null;\r\n            }\r\n            for (var i = 0; i < this._channelColors.getSize(); i++) {\r\n                this._channelColors.set(i, null);\r\n            }\r\n            this._channelColors = null;\r\n            this.gl.deleteTexture(this._colorBuffer);\r\n            this._colorBuffer = null;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.initialize = function (model, drawableCount, drawableMasks, drawableMaskCounts) {\r\n            for (var i = 0; i < drawableCount; i++) {\r\n                if (drawableMaskCounts[i] <= 0) {\r\n                    this._clippingContextListForDraw.pushBack(null);\r\n                    continue;\r\n                }\r\n                var clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);\r\n                if (clippingContext == null) {\r\n                    clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);\r\n                    this._clippingContextListForMask.pushBack(clippingContext);\r\n                }\r\n                clippingContext.addClippedDrawable(i);\r\n                this._clippingContextListForDraw.pushBack(clippingContext);\r\n            }\r\n        };\r\n        CubismClippingManager_WebGL.prototype.setupClippingContext = function (model, renderer) {\r\n            this._currentFrameNo++;\r\n            var usingClipCount = 0;\r\n            for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {\r\n                var cc = this._clippingContextListForMask.at(clipIndex);\r\n                this.calcClippedDrawTotalBounds(model, cc);\r\n                if (cc._isUsing) {\r\n                    usingClipCount++;\r\n                }\r\n            }\r\n            if (usingClipCount > 0) {\r\n                this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);\r\n                this._maskRenderTexture = this.getMaskRenderTexture();\r\n                var modelToWorldF = renderer.getMvpMatrix();\r\n                renderer.preDraw();\r\n                this.setupLayoutBounds(usingClipCount);\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);\r\n                this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n                this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n                for (var clipIndex = 0; clipIndex < this._clippingContextListForMask.getSize(); clipIndex++) {\r\n                    var clipContext = this._clippingContextListForMask.at(clipIndex);\r\n                    var allClipedDrawRect = clipContext._allClippedDrawRect;\r\n                    var layoutBoundsOnTex01 = clipContext._layoutBounds;\r\n                    var MARGIN = 0.05;\r\n                    this._tmpBoundsOnModel.setRect(allClipedDrawRect);\r\n                    this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);\r\n                    var scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\r\n                    var scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\r\n                    {\r\n                        this._tmpMatrix.loadIdentity();\r\n                        {\r\n                            this._tmpMatrix.translateRelative(-1.0, -1.0);\r\n                            this._tmpMatrix.scaleRelative(2.0, 2.0);\r\n                        }\r\n                        {\r\n                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\r\n                            this._tmpMatrix.scaleRelative(scaleX, scaleY);\r\n                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\r\n                        }\r\n                        this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\r\n                    }\r\n                    {\r\n                        this._tmpMatrix.loadIdentity();\r\n                        {\r\n                            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\r\n                            this._tmpMatrix.scaleRelative(scaleX, scaleY);\r\n                            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\r\n                        }\r\n                        this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\r\n                    }\r\n                    clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\r\n                    clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\r\n                    var clipDrawCount = clipContext._clippingIdCount;\r\n                    for (var i = 0; i < clipDrawCount; i++) {\r\n                        var clipDrawIndex = clipContext._clippingIdList[i];\r\n                        if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {\r\n                            continue;\r\n                        }\r\n                        renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);\r\n                        renderer.setClippingContextBufferForMask(clipContext);\r\n                        renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), CubismBlendMode.CubismBlendMode_Normal, false);\r\n                    }\r\n                }\r\n                this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n                renderer.setClippingContextBufferForMask(null);\r\n                this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);\r\n            }\r\n        };\r\n        CubismClippingManager_WebGL.prototype.findSameClip = function (drawableMasks, drawableMaskCounts) {\r\n            for (var i = 0; i < this._clippingContextListForMask.getSize(); i++) {\r\n                var clippingContext = this._clippingContextListForMask.at(i);\r\n                var count = clippingContext._clippingIdCount;\r\n                if (count != drawableMaskCounts) {\r\n                    continue;\r\n                }\r\n                var sameCount = 0;\r\n                for (var j = 0; j < count; j++) {\r\n                    var clipId = clippingContext._clippingIdList[j];\r\n                    for (var k = 0; k < count; k++) {\r\n                        if (drawableMasks[k] == clipId) {\r\n                            sameCount++;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (sameCount == count) {\r\n                    return clippingContext;\r\n                }\r\n            }\r\n            return null;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.setupLayoutBounds = function (usingClipCount) {\r\n            var div = usingClipCount / ColorChannelCount;\r\n            var mod = usingClipCount % ColorChannelCount;\r\n            div = ~~div;\r\n            mod = ~~mod;\r\n            var curClipIndex = 0;\r\n            for (var channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\r\n                var layoutCount = div + (channelNo < mod ? 1 : 0);\r\n                if (layoutCount == 0) {\r\n                }\r\n                else if (layoutCount == 1) {\r\n                    var clipContext = this._clippingContextListForMask.at(curClipIndex++);\r\n                    clipContext._layoutChannelNo = channelNo;\r\n                    clipContext._layoutBounds.x = 0.0;\r\n                    clipContext._layoutBounds.y = 0.0;\r\n                    clipContext._layoutBounds.width = 1.0;\r\n                    clipContext._layoutBounds.height = 1.0;\r\n                }\r\n                else if (layoutCount == 2) {\r\n                    for (var i = 0; i < layoutCount; i++) {\r\n                        var xpos = i % 2;\r\n                        xpos = ~~xpos;\r\n                        var cc = this._clippingContextListForMask.at(curClipIndex++);\r\n                        cc._layoutChannelNo = channelNo;\r\n                        cc._layoutBounds.x = xpos * 0.5;\r\n                        cc._layoutBounds.y = 0.0;\r\n                        cc._layoutBounds.width = 0.5;\r\n                        cc._layoutBounds.height = 1.0;\r\n                    }\r\n                }\r\n                else if (layoutCount <= 4) {\r\n                    for (var i = 0; i < layoutCount; i++) {\r\n                        var xpos = i % 2;\r\n                        var ypos = i / 2;\r\n                        xpos = ~~xpos;\r\n                        ypos = ~~ypos;\r\n                        var cc = this._clippingContextListForMask.at(curClipIndex++);\r\n                        cc._layoutChannelNo = channelNo;\r\n                        cc._layoutBounds.x = xpos * 0.5;\r\n                        cc._layoutBounds.y = ypos * 0.5;\r\n                        cc._layoutBounds.width = 0.5;\r\n                        cc._layoutBounds.height = 0.5;\r\n                    }\r\n                }\r\n                else if (layoutCount <= 9) {\r\n                    for (var i = 0; i < layoutCount; i++) {\r\n                        var xpos = i % 3;\r\n                        var ypos = i / 3;\r\n                        xpos = ~~xpos;\r\n                        ypos = ~~ypos;\r\n                        var cc = this._clippingContextListForMask.at(curClipIndex++);\r\n                        cc._layoutChannelNo = channelNo;\r\n                        cc._layoutBounds.x = xpos / 3.0;\r\n                        cc._layoutBounds.y = ypos / 3.0;\r\n                        cc._layoutBounds.width = 1.0 / 3.0;\r\n                        cc._layoutBounds.height = 1.0 / 3.0;\r\n                    }\r\n                }\r\n                else {\r\n                    cubismdebug_1.CubismLogError('not supported mask count : {0}', layoutCount);\r\n                }\r\n            }\r\n        };\r\n        CubismClippingManager_WebGL.prototype.getColorBuffer = function () {\r\n            return this._colorBuffer;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.getClippingContextListForDraw = function () {\r\n            return this._clippingContextListForDraw;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.setClippingMaskBufferSize = function (size) {\r\n            this._clippingMaskBufferSize = size;\r\n        };\r\n        CubismClippingManager_WebGL.prototype.getClippingMaskBufferSize = function () {\r\n            return this._clippingMaskBufferSize;\r\n        };\r\n        return CubismClippingManager_WebGL;\r\n    }());\r\n    Live2DCubismFramework.CubismClippingManager_WebGL = CubismClippingManager_WebGL;\r\n    var CubismRenderTextureResource = (function () {\r\n        function CubismRenderTextureResource(frameNo, texture) {\r\n            this.frameNo = frameNo;\r\n            this.texture = texture;\r\n        }\r\n        return CubismRenderTextureResource;\r\n    }());\r\n    Live2DCubismFramework.CubismRenderTextureResource = CubismRenderTextureResource;\r\n    var CubismClippingContext = (function () {\r\n        function CubismClippingContext(manager, clippingDrawableIndices, clipCount) {\r\n            this._owner = manager;\r\n            this._clippingIdList = clippingDrawableIndices;\r\n            this._clippingIdCount = clipCount;\r\n            this._allClippedDrawRect = new csmRect();\r\n            this._layoutBounds = new csmRect();\r\n            this._clippedDrawableIndexList = [];\r\n            this._matrixForMask = new CubismMatrix44();\r\n            this._matrixForDraw = new CubismMatrix44();\r\n        }\r\n        CubismClippingContext.prototype.release = function () {\r\n            if (this._layoutBounds != null) {\r\n                this._layoutBounds = null;\r\n            }\r\n            if (this._allClippedDrawRect != null) {\r\n                this._allClippedDrawRect = null;\r\n            }\r\n            if (this._clippedDrawableIndexList != null) {\r\n                this._clippedDrawableIndexList = null;\r\n            }\r\n        };\r\n        CubismClippingContext.prototype.addClippedDrawable = function (drawableIndex) {\r\n            this._clippedDrawableIndexList.push(drawableIndex);\r\n        };\r\n        CubismClippingContext.prototype.getClippingManager = function () {\r\n            return this._owner;\r\n        };\r\n        CubismClippingContext.prototype.setGl = function (gl) {\r\n            this._owner.setGL(gl);\r\n        };\r\n        return CubismClippingContext;\r\n    }());\r\n    Live2DCubismFramework.CubismClippingContext = CubismClippingContext;\r\n    var CubismShader_WebGL = (function () {\r\n        function CubismShader_WebGL() {\r\n            this._shaderSets = new csmVector();\r\n        }\r\n        CubismShader_WebGL.getInstance = function () {\r\n            if (s_instance == null) {\r\n                s_instance = new CubismShader_WebGL();\r\n                return s_instance;\r\n            }\r\n            return s_instance;\r\n        };\r\n        CubismShader_WebGL.deleteInstance = function () {\r\n            if (s_instance) {\r\n                s_instance.release();\r\n                s_instance = null;\r\n            }\r\n        };\r\n        CubismShader_WebGL.prototype.release = function () {\r\n            this.releaseShaderProgram();\r\n        };\r\n        CubismShader_WebGL.prototype.setupShaderProgram = function (renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4, invertedMask) {\r\n            if (!isPremultipliedAlpha) {\r\n                cubismdebug_1.CubismLogError('NoPremultipliedAlpha is not allowed');\r\n            }\r\n            if (this._shaderSets.getSize() == 0) {\r\n                this.generateShaders();\r\n            }\r\n            var SRC_COLOR;\r\n            var DST_COLOR;\r\n            var SRC_ALPHA;\r\n            var DST_ALPHA;\r\n            if (renderer.getClippingContextBufferForMask() != null) {\r\n                var shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_SetupMask);\r\n                this.gl.useProgram(shaderSet.shaderProgram);\r\n                this.gl.activeTexture(this.gl.TEXTURE0);\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n                if (bufferData.vertex == null) {\r\n                    bufferData.vertex = this.gl.createBuffer();\r\n                }\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\r\n                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n                if (bufferData.uv == null) {\r\n                    bufferData.uv = this.gl.createBuffer();\r\n                }\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n                var channelNo = renderer.getClippingContextBufferForMask()\r\n                    ._layoutChannelNo;\r\n                var colorChannel = renderer\r\n                    .getClippingContextBufferForMask()\r\n                    .getClippingManager()\r\n                    .getChannelFlagAsColor(channelNo);\r\n                this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\r\n                this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForMask()._matrixForMask.getArray());\r\n                var rect = renderer.getClippingContextBufferForMask()\r\n                    ._layoutBounds;\r\n                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2.0 - 1.0, rect.y * 2.0 - 1.0, rect.getRight() * 2.0 - 1.0, rect.getBottom() * 2.0 - 1.0);\r\n                SRC_COLOR = this.gl.ZERO;\r\n                DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\r\n                SRC_ALPHA = this.gl.ZERO;\r\n                DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n            }\r\n            else {\r\n                var masked = renderer.getClippingContextBufferForDraw() != null;\r\n                var offset = masked ? (invertedMask ? 2 : 1) : 0;\r\n                var shaderSet = new CubismShaderSet();\r\n                switch (colorBlendMode) {\r\n                    case CubismBlendMode.CubismBlendMode_Normal:\r\n                    default:\r\n                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset);\r\n                        SRC_COLOR = this.gl.ONE;\r\n                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n                        SRC_ALPHA = this.gl.ONE;\r\n                        DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n                        break;\r\n                    case CubismBlendMode.CubismBlendMode_Additive:\r\n                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_AddPremultipliedAlpha + offset);\r\n                        SRC_COLOR = this.gl.ONE;\r\n                        DST_COLOR = this.gl.ONE;\r\n                        SRC_ALPHA = this.gl.ZERO;\r\n                        DST_ALPHA = this.gl.ONE;\r\n                        break;\r\n                    case CubismBlendMode.CubismBlendMode_Multiplicative:\r\n                        shaderSet = this._shaderSets.at(ShaderNames.ShaderNames_MultPremultipliedAlpha + offset);\r\n                        SRC_COLOR = this.gl.DST_COLOR;\r\n                        DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n                        SRC_ALPHA = this.gl.ZERO;\r\n                        DST_ALPHA = this.gl.ONE;\r\n                        break;\r\n                }\r\n                this.gl.useProgram(shaderSet.shaderProgram);\r\n                if (bufferData.vertex == null) {\r\n                    bufferData.vertex = this.gl.createBuffer();\r\n                }\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\r\n                this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n                this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n                if (bufferData.uv == null) {\r\n                    bufferData.uv = this.gl.createBuffer();\r\n                }\r\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n                this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n                this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n                if (masked) {\r\n                    this.gl.activeTexture(this.gl.TEXTURE1);\r\n                    var tex = renderer\r\n                        .getClippingContextBufferForDraw()\r\n                        .getClippingManager()\r\n                        .getColorBuffer();\r\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\r\n                    this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\r\n                    this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, renderer.getClippingContextBufferForDraw()._matrixForDraw.getArray());\r\n                    var channelNo = renderer.getClippingContextBufferForDraw()\r\n                        ._layoutChannelNo;\r\n                    var colorChannel = renderer\r\n                        .getClippingContextBufferForDraw()\r\n                        .getClippingManager()\r\n                        .getChannelFlagAsColor(channelNo);\r\n                    this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\r\n                }\r\n                this.gl.activeTexture(this.gl.TEXTURE0);\r\n                this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n                this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n                this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());\r\n                this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);\r\n            }\r\n            if (bufferData.index == null) {\r\n                bufferData.index = this.gl.createBuffer();\r\n            }\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\r\n            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);\r\n            this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\r\n        };\r\n        CubismShader_WebGL.prototype.releaseShaderProgram = function () {\r\n            for (var i = 0; i < this._shaderSets.getSize(); i++) {\r\n                this.gl.deleteProgram(this._shaderSets.at(i).shaderProgram);\r\n                this._shaderSets.at(i).shaderProgram = 0;\r\n                this._shaderSets.set(i, void 0);\r\n                this._shaderSets.set(i, null);\r\n            }\r\n        };\r\n        CubismShader_WebGL.prototype.generateShaders = function () {\r\n            for (var i = 0; i < shaderCount; i++) {\r\n                this._shaderSets.pushBack(new CubismShaderSet());\r\n            }\r\n            this._shaderSets.at(0).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcSetupMask, Live2DCubismFramework.fragmentShaderSrcsetupMask);\r\n            this._shaderSets.at(1).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrc, Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha);\r\n            this._shaderSets.at(2).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcMasked, Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha);\r\n            this._shaderSets.at(3).shaderProgram = this.loadShaderProgram(Live2DCubismFramework.vertexShaderSrcMasked, Live2DCubismFramework.fragmentShaderSrcMaskInvertedPremultipliedAlpha);\r\n            this._shaderSets.at(4).shaderProgram = this._shaderSets.at(1).shaderProgram;\r\n            this._shaderSets.at(5).shaderProgram = this._shaderSets.at(2).shaderProgram;\r\n            this._shaderSets.at(6).shaderProgram = this._shaderSets.at(3).shaderProgram;\r\n            this._shaderSets.at(7).shaderProgram = this._shaderSets.at(1).shaderProgram;\r\n            this._shaderSets.at(8).shaderProgram = this._shaderSets.at(2).shaderProgram;\r\n            this._shaderSets.at(9).shaderProgram = this._shaderSets.at(3).shaderProgram;\r\n            this._shaderSets.at(0).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_position');\r\n            this._shaderSets.at(0).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(0).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(0).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(0).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(0).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(1).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_position');\r\n            this._shaderSets.at(1).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(1).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(1).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(1).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(2).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_position');\r\n            this._shaderSets.at(2).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(2).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(2).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(2).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(2).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(2).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(2).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(3).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_position');\r\n            this._shaderSets.at(3).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(3).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(3).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(3).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(3).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(3).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(3).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(4).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_position');\r\n            this._shaderSets.at(4).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(4).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(4).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(4).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(5).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_position');\r\n            this._shaderSets.at(5).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(5).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(5).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(5).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(5).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(5).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(5).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(6).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_position');\r\n            this._shaderSets.at(6).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(6).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(6).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(6).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(6).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(6).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(6).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(7).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_position');\r\n            this._shaderSets.at(7).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(7).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(7).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(7).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(8).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_position');\r\n            this._shaderSets.at(8).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(8).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(8).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(8).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(8).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(8).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(8).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram, 'u_baseColor');\r\n            this._shaderSets.at(9).attributePositionLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_position');\r\n            this._shaderSets.at(9).attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram, 'a_texCoord');\r\n            this._shaderSets.at(9).samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture0');\r\n            this._shaderSets.at(9).samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 's_texture1');\r\n            this._shaderSets.at(9).uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_matrix');\r\n            this._shaderSets.at(9).uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_clipMatrix');\r\n            this._shaderSets.at(9).uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_channelFlag');\r\n            this._shaderSets.at(9).uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram, 'u_baseColor');\r\n        };\r\n        CubismShader_WebGL.prototype.loadShaderProgram = function (vertexShaderSource, fragmentShaderSource) {\r\n            var shaderProgram = this.gl.createProgram();\r\n            var vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);\r\n            if (!vertShader) {\r\n                cubismdebug_1.CubismLogError('Vertex shader compile error!');\r\n                return 0;\r\n            }\r\n            var fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n            if (!fragShader) {\r\n                cubismdebug_1.CubismLogError('Vertex shader compile error!');\r\n                return 0;\r\n            }\r\n            this.gl.attachShader(shaderProgram, vertShader);\r\n            this.gl.attachShader(shaderProgram, fragShader);\r\n            this.gl.linkProgram(shaderProgram);\r\n            var linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);\r\n            if (!linkStatus) {\r\n                cubismdebug_1.CubismLogError('Failed to link program: {0}', shaderProgram);\r\n                this.gl.deleteShader(vertShader);\r\n                vertShader = 0;\r\n                this.gl.deleteShader(fragShader);\r\n                fragShader = 0;\r\n                if (shaderProgram) {\r\n                    this.gl.deleteProgram(shaderProgram);\r\n                    shaderProgram = 0;\r\n                }\r\n                return 0;\r\n            }\r\n            this.gl.deleteShader(vertShader);\r\n            this.gl.deleteShader(fragShader);\r\n            return shaderProgram;\r\n        };\r\n        CubismShader_WebGL.prototype.compileShaderSource = function (shaderType, shaderSource) {\r\n            var source = shaderSource;\r\n            var shader = this.gl.createShader(shaderType);\r\n            this.gl.shaderSource(shader, source);\r\n            this.gl.compileShader(shader);\r\n            if (!shader) {\r\n                var log = this.gl.getShaderInfoLog(shader);\r\n                cubismdebug_1.CubismLogError('Shader compile log: {0} ', log);\r\n            }\r\n            var status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\r\n            if (!status) {\r\n                this.gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n            return shader;\r\n        };\r\n        CubismShader_WebGL.prototype.setGl = function (gl) {\r\n            this.gl = gl;\r\n        };\r\n        return CubismShader_WebGL;\r\n    }());\r\n    Live2DCubismFramework.CubismShader_WebGL = CubismShader_WebGL;\r\n    var CubismShaderSet = (function () {\r\n        function CubismShaderSet() {\r\n        }\r\n        return CubismShaderSet;\r\n    }());\r\n    Live2DCubismFramework.CubismShaderSet = CubismShaderSet;\r\n    var ShaderNames;\r\n    (function (ShaderNames) {\r\n        ShaderNames[ShaderNames[\"ShaderNames_SetupMask\"] = 0] = \"ShaderNames_SetupMask\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_NormalPremultipliedAlpha\"] = 1] = \"ShaderNames_NormalPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_NormalMaskedPremultipliedAlpha\"] = 2] = \"ShaderNames_NormalMaskedPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\"] = 3] = \"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_AddPremultipliedAlpha\"] = 4] = \"ShaderNames_AddPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_AddMaskedPremultipliedAlpha\"] = 5] = \"ShaderNames_AddMaskedPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_AddMaskedPremultipliedAlphaInverted\"] = 6] = \"ShaderNames_AddMaskedPremultipliedAlphaInverted\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_MultPremultipliedAlpha\"] = 7] = \"ShaderNames_MultPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_MultMaskedPremultipliedAlpha\"] = 8] = \"ShaderNames_MultMaskedPremultipliedAlpha\";\r\n        ShaderNames[ShaderNames[\"ShaderNames_MultMaskedPremultipliedAlphaInverted\"] = 9] = \"ShaderNames_MultMaskedPremultipliedAlphaInverted\";\r\n    })(ShaderNames = Live2DCubismFramework.ShaderNames || (Live2DCubismFramework.ShaderNames = {}));\r\n    Live2DCubismFramework.vertexShaderSrcSetupMask = 'attribute vec4     a_position;' +\r\n        'attribute vec2     a_texCoord;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'varying vec4       v_myPos;' +\r\n        'uniform mat4       u_clipMatrix;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   gl_Position = u_clipMatrix * a_position;' +\r\n        '   v_myPos = u_clipMatrix * a_position;' +\r\n        '   v_texCoord = a_texCoord;' +\r\n        '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n        '}';\r\n    Live2DCubismFramework.fragmentShaderSrcsetupMask = 'precision mediump float;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'varying vec4       v_myPos;' +\r\n        'uniform vec4       u_baseColor;' +\r\n        'uniform vec4       u_channelFlag;' +\r\n        'uniform sampler2D  s_texture0;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   float isInside = ' +\r\n        '       step(u_baseColor.x, v_myPos.x/v_myPos.w)' +\r\n        '       * step(u_baseColor.y, v_myPos.y/v_myPos.w)' +\r\n        '       * step(v_myPos.x/v_myPos.w, u_baseColor.z)' +\r\n        '       * step(v_myPos.y/v_myPos.w, u_baseColor.w);' +\r\n        '   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;' +\r\n        '}';\r\n    Live2DCubismFramework.vertexShaderSrc = 'attribute vec4     a_position;' +\r\n        'attribute vec2     a_texCoord;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'uniform mat4       u_matrix;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   gl_Position = u_matrix * a_position;' +\r\n        '   v_texCoord = a_texCoord;' +\r\n        '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n        '}';\r\n    Live2DCubismFramework.vertexShaderSrcMasked = 'attribute vec4     a_position;' +\r\n        'attribute vec2     a_texCoord;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'varying vec4       v_clipPos;' +\r\n        'uniform mat4       u_matrix;' +\r\n        'uniform mat4       u_clipMatrix;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   gl_Position = u_matrix * a_position;' +\r\n        '   v_clipPos = u_clipMatrix * a_position;' +\r\n        '   v_texCoord = a_texCoord;' +\r\n        '   v_texCoord.y = 1.0 - v_texCoord.y;' +\r\n        '}';\r\n    Live2DCubismFramework.fragmentShaderSrcPremultipliedAlpha = 'precision mediump float;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'uniform vec4       u_baseColor;' +\r\n        'uniform sampler2D  s_texture0;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +\r\n        '}';\r\n    Live2DCubismFramework.fragmentShaderSrcMaskPremultipliedAlpha = 'precision mediump float;' +\r\n        'varying vec2       v_texCoord;' +\r\n        'varying vec4       v_clipPos;' +\r\n        'uniform vec4       u_baseColor;' +\r\n        'uniform vec4       u_channelFlag;' +\r\n        'uniform sampler2D  s_texture0;' +\r\n        'uniform sampler2D  s_texture1;' +\r\n        'void main()' +\r\n        '{' +\r\n        '   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;' +\r\n        '   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n        '   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n        '   col_formask = col_formask * maskVal;' +\r\n        '   gl_FragColor = col_formask;' +\r\n        '}';\r\n    Live2DCubismFramework.fragmentShaderSrcMaskInvertedPremultipliedAlpha = 'precision mediump float;' +\r\n        'varying vec2 v_texCoord;' +\r\n        'varying vec4 v_clipPos;' +\r\n        'uniform sampler2D s_texture0;' +\r\n        'uniform sampler2D s_texture1;' +\r\n        'uniform vec4 u_channelFlag;' +\r\n        'uniform vec4 u_baseColor;' +\r\n        'void main()' +\r\n        '{' +\r\n        'vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;' +\r\n        'vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;' +\r\n        'float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;' +\r\n        'col_formask = col_formask * (1.0 - maskVal);' +\r\n        'gl_FragColor = col_formask;' +\r\n        '}';\r\n    var CubismRenderer_WebGL = (function (_super) {\r\n        __extends(CubismRenderer_WebGL, _super);\r\n        function CubismRenderer_WebGL() {\r\n            var _this = _super.call(this) || this;\r\n            _this._clippingContextBufferForMask = null;\r\n            _this._clippingContextBufferForDraw = null;\r\n            _this._clippingManager = new CubismClippingManager_WebGL();\r\n            _this.firstDraw = true;\r\n            _this._textures = new csmMap();\r\n            _this._sortedDrawableIndexList = new csmVector();\r\n            _this._bufferData = {\r\n                vertex: WebGLBuffer = null,\r\n                uv: WebGLBuffer = null,\r\n                index: WebGLBuffer = null\r\n            };\r\n            _this._textures.prepareCapacity(32, true);\r\n            return _this;\r\n        }\r\n        CubismRenderer_WebGL.prototype.initialize = function (model) {\r\n            if (model.isUsingMasking()) {\r\n                this._clippingManager = new CubismClippingManager_WebGL();\r\n                this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());\r\n            }\r\n            this._sortedDrawableIndexList.resize(model.getDrawableCount(), 0);\r\n            _super.prototype.initialize.call(this, model);\r\n        };\r\n        CubismRenderer_WebGL.prototype.bindTexture = function (modelTextureNo, glTexture) {\r\n            this._textures.setValue(modelTextureNo, glTexture);\r\n        };\r\n        CubismRenderer_WebGL.prototype.getBindedTextures = function () {\r\n            return this._textures;\r\n        };\r\n        CubismRenderer_WebGL.prototype.setClippingMaskBufferSize = function (size) {\r\n            this._clippingManager.release();\r\n            this._clippingManager = void 0;\r\n            this._clippingManager = null;\r\n            this._clippingManager = new CubismClippingManager_WebGL();\r\n            this._clippingManager.setClippingMaskBufferSize(size);\r\n            this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());\r\n        };\r\n        CubismRenderer_WebGL.prototype.getClippingMaskBufferSize = function () {\r\n            return this._clippingManager.getClippingMaskBufferSize();\r\n        };\r\n        CubismRenderer_WebGL.prototype.release = function () {\r\n            this._clippingManager.release();\r\n            this._clippingManager = void 0;\r\n            this._clippingManager = null;\r\n            this.gl.deleteBuffer(this._bufferData.vertex);\r\n            this._bufferData.vertex = null;\r\n            this.gl.deleteBuffer(this._bufferData.uv);\r\n            this._bufferData.uv = null;\r\n            this.gl.deleteBuffer(this._bufferData.index);\r\n            this._bufferData.index = null;\r\n            this._bufferData = null;\r\n            this._textures = null;\r\n        };\r\n        CubismRenderer_WebGL.prototype.doDrawModel = function () {\r\n            if (this._clippingManager != null) {\r\n                this.preDraw();\r\n                this._clippingManager.setupClippingContext(this.getModel(), this);\r\n            }\r\n            this.preDraw();\r\n            var drawableCount = this.getModel().getDrawableCount();\r\n            var renderOrder = this.getModel().getDrawableRenderOrders();\r\n            for (var i = 0; i < drawableCount; ++i) {\r\n                var order = renderOrder[i];\r\n                this._sortedDrawableIndexList.set(order, i);\r\n            }\r\n            for (var i = 0; i < drawableCount; ++i) {\r\n                var drawableIndex = this._sortedDrawableIndexList.at(i);\r\n                if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\r\n                    continue;\r\n                }\r\n                this.setClippingContextBufferForDraw(this._clippingManager != null\r\n                    ? this._clippingManager\r\n                        .getClippingContextListForDraw()\r\n                        .at(drawableIndex)\r\n                    : null);\r\n                this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\r\n                this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));\r\n            }\r\n        };\r\n        CubismRenderer_WebGL.prototype.drawMesh = function (textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode, invertedMask) {\r\n            if (this.isCulling()) {\r\n                this.gl.enable(this.gl.CULL_FACE);\r\n            }\r\n            else {\r\n                this.gl.disable(this.gl.CULL_FACE);\r\n            }\r\n            this.gl.frontFace(this.gl.CCW);\r\n            var modelColorRGBA = this.getModelColor();\r\n            if (this.getClippingContextBufferForMask() == null) {\r\n                modelColorRGBA.A *= opacity;\r\n                if (this.isPremultipliedAlpha()) {\r\n                    modelColorRGBA.R *= modelColorRGBA.A;\r\n                    modelColorRGBA.G *= modelColorRGBA.A;\r\n                    modelColorRGBA.B *= modelColorRGBA.A;\r\n                }\r\n            }\r\n            var drawtexture;\r\n            if (this._textures.getValue(textureNo) != null) {\r\n                drawtexture = this._textures.getValue(textureNo);\r\n            }\r\n            else {\r\n                drawtexture = null;\r\n            }\r\n            CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);\r\n            this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n            this.gl.useProgram(null);\r\n            this.setClippingContextBufferForDraw(null);\r\n            this.setClippingContextBufferForMask(null);\r\n        };\r\n        CubismRenderer_WebGL.doStaticRelease = function () {\r\n            CubismShader_WebGL.deleteInstance();\r\n        };\r\n        CubismRenderer_WebGL.prototype.setRenderState = function (fbo, viewport) {\r\n            s_fbo = fbo;\r\n            s_viewport = viewport;\r\n        };\r\n        CubismRenderer_WebGL.prototype.preDraw = function () {\r\n            if (this.firstDraw) {\r\n                this.firstDraw = false;\r\n                this._anisortopy =\r\n                    this.gl.getExtension('EXT_texture_filter_anisotropic') ||\r\n                        this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic') ||\r\n                        this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic');\r\n            }\r\n            this.gl.disable(this.gl.SCISSOR_TEST);\r\n            this.gl.disable(this.gl.STENCIL_TEST);\r\n            this.gl.disable(this.gl.DEPTH_TEST);\r\n            this.gl.frontFace(this.gl.CW);\r\n            this.gl.enable(this.gl.BLEND);\r\n            this.gl.colorMask(true, true, true, true);\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n        };\r\n        CubismRenderer_WebGL.prototype.setClippingContextBufferForMask = function (clip) {\r\n            this._clippingContextBufferForMask = clip;\r\n        };\r\n        CubismRenderer_WebGL.prototype.getClippingContextBufferForMask = function () {\r\n            return this._clippingContextBufferForMask;\r\n        };\r\n        CubismRenderer_WebGL.prototype.setClippingContextBufferForDraw = function (clip) {\r\n            this._clippingContextBufferForDraw = clip;\r\n        };\r\n        CubismRenderer_WebGL.prototype.getClippingContextBufferForDraw = function () {\r\n            return this._clippingContextBufferForDraw;\r\n        };\r\n        CubismRenderer_WebGL.prototype.startUp = function (gl) {\r\n            this.gl = gl;\r\n            this._clippingManager.setGL(gl);\r\n            CubismShader_WebGL.getInstance().setGl(gl);\r\n        };\r\n        return CubismRenderer_WebGL;\r\n    }(CubismRenderer));\r\n    Live2DCubismFramework.CubismRenderer_WebGL = CubismRenderer_WebGL;\r\n    CubismRenderer.staticRelease = function () {\r\n        CubismRenderer_WebGL.doStaticRelease();\r\n    };\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/rendering/cubismrenderer_webgl.ts\n");

/***/ }),

/***/ "./Framework/src/type/csmmap.ts":
/*!**************************************!*\
  !*** ./Framework/src/type/csmmap.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar cubismdebug_1 = __webpack_require__(/*! ../utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var csmPair = (function () {\r\n        function csmPair(key, value) {\r\n            this.first = key == undefined ? null : key;\r\n            this.second = value == undefined ? null : value;\r\n        }\r\n        return csmPair;\r\n    }());\r\n    Live2DCubismFramework.csmPair = csmPair;\r\n    var csmMap = (function () {\r\n        function csmMap(size) {\r\n            if (size != undefined) {\r\n                if (size < 1) {\r\n                    this._keyValues = [];\r\n                    this._dummyValue = null;\r\n                    this._size = 0;\r\n                }\r\n                else {\r\n                    this._keyValues = new Array(size);\r\n                    this._size = size;\r\n                }\r\n            }\r\n            else {\r\n                this._keyValues = [];\r\n                this._dummyValue = null;\r\n                this._size = 0;\r\n            }\r\n        }\r\n        csmMap.prototype.release = function () {\r\n            this.clear();\r\n        };\r\n        csmMap.prototype.appendKey = function (key) {\r\n            this.prepareCapacity(this._size + 1, false);\r\n            this._keyValues[this._size] = new csmPair(key);\r\n            this._size += 1;\r\n        };\r\n        csmMap.prototype.getValue = function (key) {\r\n            var found = -1;\r\n            for (var i = 0; i < this._size; i++) {\r\n                if (this._keyValues[i].first == key) {\r\n                    found = i;\r\n                    break;\r\n                }\r\n            }\r\n            if (found >= 0) {\r\n                return this._keyValues[found].second;\r\n            }\r\n            else {\r\n                this.appendKey(key);\r\n                return this._keyValues[this._size - 1].second;\r\n            }\r\n        };\r\n        csmMap.prototype.setValue = function (key, value) {\r\n            var found = -1;\r\n            for (var i = 0; i < this._size; i++) {\r\n                if (this._keyValues[i].first == key) {\r\n                    found = i;\r\n                    break;\r\n                }\r\n            }\r\n            if (found >= 0) {\r\n                this._keyValues[found].second = value;\r\n            }\r\n            else {\r\n                this.appendKey(key);\r\n                this._keyValues[this._size - 1].second = value;\r\n            }\r\n        };\r\n        csmMap.prototype.isExist = function (key) {\r\n            for (var i = 0; i < this._size; i++) {\r\n                if (this._keyValues[i].first == key) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        csmMap.prototype.clear = function () {\r\n            this._keyValues = void 0;\r\n            this._keyValues = null;\r\n            this._keyValues = [];\r\n            this._size = 0;\r\n        };\r\n        csmMap.prototype.getSize = function () {\r\n            return this._size;\r\n        };\r\n        csmMap.prototype.prepareCapacity = function (newSize, fitToSize) {\r\n            if (newSize > this._keyValues.length) {\r\n                if (this._keyValues.length == 0) {\r\n                    if (!fitToSize && newSize < csmMap.DefaultSize)\r\n                        newSize = csmMap.DefaultSize;\r\n                    this._keyValues.length = newSize;\r\n                }\r\n                else {\r\n                    if (!fitToSize && newSize < this._keyValues.length * 2)\r\n                        newSize = this._keyValues.length * 2;\r\n                    this._keyValues.length = newSize;\r\n                }\r\n            }\r\n        };\r\n        csmMap.prototype.begin = function () {\r\n            var ite = new iterator(this, 0);\r\n            return ite;\r\n        };\r\n        csmMap.prototype.end = function () {\r\n            var ite = new iterator(this, this._size);\r\n            return ite;\r\n        };\r\n        csmMap.prototype.erase = function (ite) {\r\n            var index = ite._index;\r\n            if (index < 0 || this._size <= index) {\r\n                return ite;\r\n            }\r\n            this._keyValues.splice(index, 1);\r\n            --this._size;\r\n            var ite2 = new iterator(this, index);\r\n            return ite2;\r\n        };\r\n        csmMap.prototype.dumpAsInt = function () {\r\n            for (var i = 0; i < this._size; i++) {\r\n                cubismdebug_1.CubismLogDebug('{0} ,', this._keyValues[i]);\r\n                cubismdebug_1.CubismLogDebug('\\n');\r\n            }\r\n        };\r\n        csmMap.DefaultSize = 10;\r\n        return csmMap;\r\n    }());\r\n    Live2DCubismFramework.csmMap = csmMap;\r\n    var iterator = (function () {\r\n        function iterator(v, idx) {\r\n            this._map = v != undefined ? v : new csmMap();\r\n            this._index = idx != undefined ? idx : 0;\r\n        }\r\n        iterator.prototype.set = function (ite) {\r\n            this._index = ite._index;\r\n            this._map = ite._map;\r\n            return this;\r\n        };\r\n        iterator.prototype.preIncrement = function () {\r\n            ++this._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.preDecrement = function () {\r\n            --this._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.increment = function () {\r\n            var iteold = new iterator(this._map, this._index++);\r\n            this._map = iteold._map;\r\n            this._index = iteold._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.decrement = function () {\r\n            var iteold = new iterator(this._map, this._index);\r\n            this._map = iteold._map;\r\n            this._index = iteold._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.ptr = function () {\r\n            return this._map._keyValues[this._index];\r\n        };\r\n        iterator.prototype.notEqual = function (ite) {\r\n            return this._index != ite._index || this._map != ite._map;\r\n        };\r\n        return iterator;\r\n    }());\r\n    Live2DCubismFramework.iterator = iterator;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/type/csmmap.ts\n");

/***/ }),

/***/ "./Framework/src/type/csmrectf.ts":
/*!****************************************!*\
  !*** ./Framework/src/type/csmrectf.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var csmRect = (function () {\r\n        function csmRect(x, y, w, h) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.width = w;\r\n            this.height = h;\r\n        }\r\n        csmRect.prototype.getCenterX = function () {\r\n            return this.x + 0.5 * this.width;\r\n        };\r\n        csmRect.prototype.getCenterY = function () {\r\n            return this.y + 0.5 * this.height;\r\n        };\r\n        csmRect.prototype.getRight = function () {\r\n            return this.x + this.width;\r\n        };\r\n        csmRect.prototype.getBottom = function () {\r\n            return this.y + this.height;\r\n        };\r\n        csmRect.prototype.setRect = function (r) {\r\n            this.x = r.x;\r\n            this.y = r.y;\r\n            this.width = r.width;\r\n            this.height = r.height;\r\n        };\r\n        csmRect.prototype.expand = function (w, h) {\r\n            this.x -= w;\r\n            this.y -= h;\r\n            this.width += w * 2.0;\r\n            this.height += h * 2.0;\r\n        };\r\n        return csmRect;\r\n    }());\r\n    Live2DCubismFramework.csmRect = csmRect;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtcmVjdGYudHMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmQvLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3NtcmVjdGYudHM/M2M5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0KGMpIExpdmUyRCBJbmMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IHRoZSBMaXZlMkQgT3BlbiBTb2Z0d2FyZSBsaWNlbnNlXHJcbiAqIHRoYXQgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmxpdmUyZC5jb20vZXVsYS9saXZlMmQtb3Blbi1zb2Z0d2FyZS1saWNlbnNlLWFncmVlbWVudF9lbi5odG1sLlxyXG4gKi9cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgTGl2ZTJEQ3ViaXNtRnJhbWV3b3JrIHtcclxuICAvKipcclxuICAgKiDnn6nlvaLlvaLnirbvvIjluqfmqJnjg7vplbfjgZXjga9mbG9hdOWApO+8ieOCkuWumue+qeOBmeOCi+OCr+ODqeOCuVxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBjc21SZWN0IHtcclxuICAgIC8qKlxyXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKiBAcGFyYW0geCDlt6bnq69Y5bqn5qiZXHJcbiAgICAgKiBAcGFyYW0geSDkuIrnq69Z5bqn5qiZXHJcbiAgICAgKiBAcGFyYW0gdyDluYVcclxuICAgICAqIEBwYXJhbSBoIOmrmOOBlVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeD86IG51bWJlciwgeT86IG51bWJlciwgdz86IG51bWJlciwgaD86IG51bWJlcikge1xyXG4gICAgICB0aGlzLnggPSB4O1xyXG4gICAgICB0aGlzLnkgPSB5O1xyXG4gICAgICB0aGlzLndpZHRoID0gdztcclxuICAgICAgdGhpcy5oZWlnaHQgPSBoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55+p5b2i5Lit5aSu44GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy54ICsgMC41ICogdGhpcy53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOefqeW9ouS4reWkruOBrlnluqfmqJnjgpLlj5blvpfjgZnjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldENlbnRlclkoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMueSArIDAuNSAqIHRoaXMuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+z5YG044GuWOW6p+aomeOCkuWPluW+l+OBmeOCi1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UmlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMueCArIHRoaXMud2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuIvnq6/jga5Z5bqn5qiZ44KS5Y+W5b6X44GZ44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRCb3R0b20oKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHRoaXMueSArIHRoaXMuaGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog55+p5b2i44Gr5YCk44KS44K744OD44OI44GZ44KLXHJcbiAgICAgKiBAcGFyYW0gciDnn6nlvaLjga7jgqTjg7Pjgrnjgr/jg7PjgrlcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldFJlY3QocjogY3NtUmVjdCk6IHZvaWQge1xyXG4gICAgICB0aGlzLnggPSByLng7XHJcbiAgICAgIHRoaXMueSA9IHIueTtcclxuICAgICAgdGhpcy53aWR0aCA9IHIud2lkdGg7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ID0gci5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnn6nlvaLkuK3lpK7jgpLou7jjgavjgZfjgabnuKbmqKrjgpLmi6HnuK7jgZnjgotcclxuICAgICAqIEBwYXJhbSB3IOW5heaWueWQkeOBq+aLoee4ruOBmeOCi+mHj1xyXG4gICAgICogQHBhcmFtIGgg6auY44GV5pa55ZCR44Gr5ouh57iu44GZ44KL6YePXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBleHBhbmQodzogbnVtYmVyLCBoOiBudW1iZXIpIHtcclxuICAgICAgdGhpcy54IC09IHc7XHJcbiAgICAgIHRoaXMueSAtPSBoO1xyXG4gICAgICB0aGlzLndpZHRoICs9IHcgKiAyLjA7XHJcbiAgICAgIHRoaXMuaGVpZ2h0ICs9IGggKiAyLjA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHg6IG51bWJlcjsgLy8g5bem56uvWOW6p+aomVxyXG4gICAgcHVibGljIHk6IG51bWJlcjsgLy8g5LiK56uvWeW6p+aomVxyXG4gICAgcHVibGljIHdpZHRoOiBudW1iZXI7IC8vIOW5hVxyXG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyOyAvLyDpq5jjgZVcclxuICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiOzs7QUFPQTtBQUFBO0FBSUE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUFBO0FBdEVBO0FBdUVBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./Framework/src/type/csmrectf.ts\n");

/***/ }),

/***/ "./Framework/src/type/csmstring.ts":
/*!*****************************************!*\
  !*** ./Framework/src/type/csmstring.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var csmString = (function () {\r\n        function csmString(s) {\r\n            this.s = s;\r\n        }\r\n        csmString.prototype.append = function (c, length) {\r\n            this.s += length !== undefined ? c.substr(0, length) : c;\r\n            return this;\r\n        };\r\n        csmString.prototype.expansion = function (length, v) {\r\n            for (var i = 0; i < length; i++) {\r\n                this.append(v);\r\n            }\r\n            return this;\r\n        };\r\n        csmString.prototype.getBytes = function () {\r\n            return encodeURIComponent(this.s).replace(/%../g, 'x').length;\r\n        };\r\n        csmString.prototype.getLength = function () {\r\n            return this.s.length;\r\n        };\r\n        csmString.prototype.isLess = function (s) {\r\n            return this.s < s.s;\r\n        };\r\n        csmString.prototype.isGreat = function (s) {\r\n            return this.s > s.s;\r\n        };\r\n        csmString.prototype.isEqual = function (s) {\r\n            return this.s == s;\r\n        };\r\n        csmString.prototype.isEmpty = function () {\r\n            return this.s.length == 0;\r\n        };\r\n        return csmString;\r\n    }());\r\n    Live2DCubismFramework.csmString = csmString;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9GcmFtZXdvcmsvc3JjL3R5cGUvY3Ntc3RyaW5nLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZTJkLy4vRnJhbWV3b3JrL3NyYy90eXBlL2NzbXN0cmluZy50cz9iNTllIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBMaXZlMkRDdWJpc21GcmFtZXdvcmsge1xyXG4gIC8qKlxyXG4gICAqIOaWh+Wtl+WIl+OCr+ODqeOCueOAglxyXG4gICAqL1xyXG4gIGV4cG9ydCBjbGFzcyBjc21TdHJpbmcge1xyXG4gICAgLyoqXHJcbiAgICAgKiDmloflrZfliJfjgpLlvozmlrnjgavov73liqDjgZnjgotcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gYyDov73liqDjgZnjgovmloflrZfliJdcclxuICAgICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhcHBlbmQoYzogc3RyaW5nLCBsZW5ndGg/OiBudW1iZXIpOiBjc21TdHJpbmcge1xyXG4gICAgICB0aGlzLnMgKz0gbGVuZ3RoICE9PSB1bmRlZmluZWQgPyBjLnN1YnN0cigwLCBsZW5ndGgpIDogYztcclxuXHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5paH5a2X44K144Kk44K644KS5ouh5by144GX44Gm5paH5a2X44KS5Z+L44KB44KLXHJcbiAgICAgKiBAcGFyYW0gbGVuZ3RoICAgIOaLoeW8teOBmeOCi+aWh+Wtl+aVsFxyXG4gICAgICogQHBhcmFtIHYgICAgICAgICDln4vjgoHjgovmloflrZdcclxuICAgICAqIEByZXR1cm4g5pu05paw44GV44KM44Gf5paH5a2X5YiXXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBleHBhbnNpb24obGVuZ3RoOiBudW1iZXIsIHY6IHN0cmluZyk6IGNzbVN0cmluZyB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0aGlzLmFwcGVuZCh2KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmloflrZfliJfjga7plbfjgZXjgpLjg5DjgqTjg4jmlbDjgaflj5blvpfjgZnjgotcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEJ5dGVzKCk6IG51bWJlciB7XHJcbiAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodGhpcy5zKS5yZXBsYWNlKC8lLi4vZywgJ3gnKS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmloflrZfliJfjga7plbfjgZXjgpLov5TjgZlcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldExlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gdGhpcy5zLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWh+Wtl+WIl+avlOi8gyA8XHJcbiAgICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcclxuICAgICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXHJcbiAgICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OCiOOCiuWkp+OBjeOBhFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNMZXNzKHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5zIDwgcy5zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5paH5a2X5YiX5q+U6LyDID5cclxuICAgICAqIEBwYXJhbSBzIOavlOi8g+OBmeOCi+aWh+Wtl+WIl1xyXG4gICAgICogQHJldHVybiB0cnVlOiAgICDmr5TovIPjgZnjgovmloflrZfliJfjgojjgorlpKfjgY3jgYRcclxuICAgICAqIEByZXR1cm4gZmFsc2U6ICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44KI44KK5bCP44GV44GEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0dyZWF0KHM6IGNzbVN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5zID4gcy5zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5paH5a2X5YiX5q+U6LyDID09XHJcbiAgICAgKiBAcGFyYW0gcyDmr5TovIPjgZnjgovmloflrZfliJdcclxuICAgICAqIEByZXR1cm4gdHJ1ZTogICAg5q+U6LyD44GZ44KL5paH5a2X5YiX44Go562J44GX44GEXHJcbiAgICAgKiBAcmV0dXJuIGZhbHNlOiAgIOavlOi8g+OBmeOCi+aWh+Wtl+WIl+OBqOeVsOOBquOCi1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaXNFcXVhbChzOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgcmV0dXJuIHRoaXMucyA9PSBzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5paH5a2X5YiX44GM56m644GL44Gp44GG44GLXHJcbiAgICAgKiBAcmV0dXJuIHRydWU6IOepuuOBruaWh+Wtl+WIl1xyXG4gICAgICogQHJldHVybiBmYWxzZTog5YCk44GM6Kit5a6a44GV44KM44Gm44GE44KLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5zLmxlbmd0aCA9PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5byV5pWw5LuY44GN44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihzOiBzdHJpbmcpIHtcclxuICAgICAgdGhpcy5zID0gcztcclxuICAgIH1cclxuXHJcbiAgICBzOiBzdHJpbmc7XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBT0E7QUFBQTtBQUlBO0FBbUZBO0FBQ0E7QUFDQTtBQTlFQTtBQUNBO0FBRUE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQU9BO0FBQ0E7QUFDQTtBQVVBO0FBQUE7QUF4RkE7QUF5RkE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Framework/src/type/csmstring.ts\n");

/***/ }),

/***/ "./Framework/src/type/csmvector.ts":
/*!*****************************************!*\
  !*** ./Framework/src/type/csmvector.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var csmVector = (function () {\r\n        function csmVector(initialCapacity) {\r\n            if (initialCapacity === void 0) { initialCapacity = 0; }\r\n            if (initialCapacity < 1) {\r\n                this._ptr = [];\r\n                this._capacity = 0;\r\n                this._size = 0;\r\n            }\r\n            else {\r\n                this._ptr = new Array(initialCapacity);\r\n                this._capacity = initialCapacity;\r\n                this._size = 0;\r\n            }\r\n        }\r\n        csmVector.prototype.at = function (index) {\r\n            return this._ptr[index];\r\n        };\r\n        csmVector.prototype.set = function (index, value) {\r\n            this._ptr[index] = value;\r\n        };\r\n        csmVector.prototype.get = function (offset) {\r\n            if (offset === void 0) { offset = 0; }\r\n            var ret = new Array();\r\n            for (var i = offset; i < this._size; i++) {\r\n                ret.push(this._ptr[i]);\r\n            }\r\n            return ret;\r\n        };\r\n        csmVector.prototype.pushBack = function (value) {\r\n            if (this._size >= this._capacity) {\r\n                this.prepareCapacity(this._capacity == 0 ? csmVector.s_defaultSize : this._capacity * 2);\r\n            }\r\n            this._ptr[this._size++] = value;\r\n        };\r\n        csmVector.prototype.clear = function () {\r\n            this._ptr.length = 0;\r\n            this._size = 0;\r\n        };\r\n        csmVector.prototype.getSize = function () {\r\n            return this._size;\r\n        };\r\n        csmVector.prototype.assign = function (newSize, value) {\r\n            var curSize = this._size;\r\n            if (curSize < newSize) {\r\n                this.prepareCapacity(newSize);\r\n            }\r\n            for (var i = 0; i < newSize; i++) {\r\n                this._ptr[i] = value;\r\n            }\r\n            this._size = newSize;\r\n        };\r\n        csmVector.prototype.resize = function (newSize, value) {\r\n            if (value === void 0) { value = null; }\r\n            this.updateSize(newSize, value, true);\r\n        };\r\n        csmVector.prototype.updateSize = function (newSize, value, callPlacementNew) {\r\n            if (value === void 0) { value = null; }\r\n            if (callPlacementNew === void 0) { callPlacementNew = true; }\r\n            var curSize = this._size;\r\n            if (curSize < newSize) {\r\n                this.prepareCapacity(newSize);\r\n                if (callPlacementNew) {\r\n                    for (var i = this._size; i < newSize; i++) {\r\n                        if (typeof value == 'function') {\r\n                            this._ptr[i] = JSON.parse(JSON.stringify(new value()));\r\n                        }\r\n                        else {\r\n                            this._ptr[i] = value;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    for (var i = this._size; i < newSize; i++) {\r\n                        this._ptr[i] = value;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                var sub = this._size - newSize;\r\n                this._ptr.splice(this._size - sub, sub);\r\n            }\r\n            this._size = newSize;\r\n        };\r\n        csmVector.prototype.insert = function (position, begin, end) {\r\n            var dstSi = position._index;\r\n            var srcSi = begin._index;\r\n            var srcEi = end._index;\r\n            var addCount = srcEi - srcSi;\r\n            this.prepareCapacity(this._size + addCount);\r\n            var addSize = this._size - dstSi;\r\n            if (addSize > 0) {\r\n                for (var i = 0; i < addSize; i++) {\r\n                    this._ptr.splice(dstSi + i, 0, null);\r\n                }\r\n            }\r\n            for (var i = srcSi; i < srcEi; i++, dstSi++) {\r\n                this._ptr[dstSi] = begin._vector._ptr[i];\r\n            }\r\n            this._size = this._size + addCount;\r\n        };\r\n        csmVector.prototype.remove = function (index) {\r\n            if (index < 0 || this._size <= index) {\r\n                return false;\r\n            }\r\n            this._ptr.splice(index, 1);\r\n            --this._size;\r\n            return true;\r\n        };\r\n        csmVector.prototype.erase = function (ite) {\r\n            var index = ite._index;\r\n            if (index < 0 || this._size <= index) {\r\n                return ite;\r\n            }\r\n            this._ptr.splice(index, 1);\r\n            --this._size;\r\n            var ite2 = new iterator(this, index);\r\n            return ite2;\r\n        };\r\n        csmVector.prototype.prepareCapacity = function (newSize) {\r\n            if (newSize > this._capacity) {\r\n                if (this._capacity == 0) {\r\n                    this._ptr = new Array(newSize);\r\n                    this._capacity = newSize;\r\n                }\r\n                else {\r\n                    this._ptr.length = newSize;\r\n                    this._capacity = newSize;\r\n                }\r\n            }\r\n        };\r\n        csmVector.prototype.begin = function () {\r\n            var ite = this._size == 0 ? this.end() : new iterator(this, 0);\r\n            return ite;\r\n        };\r\n        csmVector.prototype.end = function () {\r\n            var ite = new iterator(this, this._size);\r\n            return ite;\r\n        };\r\n        csmVector.prototype.getOffset = function (offset) {\r\n            var newVector = new csmVector();\r\n            newVector._ptr = this.get(offset);\r\n            newVector._size = this.get(offset).length;\r\n            newVector._capacity = this.get(offset).length;\r\n            return newVector;\r\n        };\r\n        csmVector.s_defaultSize = 10;\r\n        return csmVector;\r\n    }());\r\n    Live2DCubismFramework.csmVector = csmVector;\r\n    var iterator = (function () {\r\n        function iterator(v, index) {\r\n            this._vector = v != undefined ? v : null;\r\n            this._index = index != undefined ? index : 0;\r\n        }\r\n        iterator.prototype.set = function (ite) {\r\n            this._index = ite._index;\r\n            this._vector = ite._vector;\r\n            return this;\r\n        };\r\n        iterator.prototype.preIncrement = function () {\r\n            ++this._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.preDecrement = function () {\r\n            --this._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.increment = function () {\r\n            var iteold = new iterator(this._vector, this._index++);\r\n            this._vector = iteold._vector;\r\n            this._index = iteold._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.decrement = function () {\r\n            var iteold = new iterator(this._vector, this._index--);\r\n            this._vector = iteold._vector;\r\n            this._index = iteold._index;\r\n            return this;\r\n        };\r\n        iterator.prototype.ptr = function () {\r\n            return this._vector._ptr[this._index];\r\n        };\r\n        iterator.prototype.substitution = function (ite) {\r\n            this._index = ite._index;\r\n            this._vector = ite._vector;\r\n            return this;\r\n        };\r\n        iterator.prototype.notEqual = function (ite) {\r\n            return this._index != ite._index || this._vector != ite._vector;\r\n        };\r\n        return iterator;\r\n    }());\r\n    Live2DCubismFramework.iterator = iterator;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/type/csmvector.ts\n");

/***/ }),

/***/ "./Framework/src/utils/cubismdebug.ts":
/*!********************************************!*\
  !*** ./Framework/src/utils/cubismdebug.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = exports.CubismLogError = exports.CubismLogWarning = exports.CubismLogInfo = exports.CubismLogDebug = exports.CubismLogVerbose = exports.CSM_ASSERT = exports.CubismLogPrintIn = exports.CubismLogPrint = void 0;\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar cubismframeworkconfig_1 = __webpack_require__(/*! ../cubismframeworkconfig */ \"./Framework/src/cubismframeworkconfig.ts\");\r\nexports.CubismLogPrint = function (level, fmt, args) {\r\n    Live2DCubismFramework.CubismDebug.print(level, '[CSM]' + fmt, args);\r\n};\r\nexports.CubismLogPrintIn = function (level, fmt, args) {\r\n    exports.CubismLogPrint(level, fmt + '\\n', args);\r\n};\r\nexports.CSM_ASSERT = function (expr) {\r\n    console.assert(expr);\r\n};\r\nif (cubismframeworkconfig_1.CSM_LOG_LEVEL <= cubismframeworkconfig_1.CSM_LOG_LEVEL_VERBOSE) {\r\n    exports.CubismLogVerbose = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Verbose, '[V]' + fmt, args);\r\n    };\r\n    exports.CubismLogDebug = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);\r\n    };\r\n    exports.CubismLogInfo = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n    };\r\n    exports.CubismLogWarning = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n    };\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_DEBUG) {\r\n    exports.CubismLogDebug = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Debug, '[D]' + fmt, args);\r\n    };\r\n    exports.CubismLogInfo = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n    };\r\n    exports.CubismLogWarning = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n    };\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_INFO) {\r\n    exports.CubismLogInfo = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Info, '[I]' + fmt, args);\r\n    };\r\n    exports.CubismLogWarning = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n    };\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_WARNING) {\r\n    exports.CubismLogWarning = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Warning, '[W]' + fmt, args);\r\n    };\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nelse if (cubismframeworkconfig_1.CSM_LOG_LEVEL == cubismframeworkconfig_1.CSM_LOG_LEVEL_ERROR) {\r\n    exports.CubismLogError = function (fmt) {\r\n        var args = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            args[_i - 1] = arguments[_i];\r\n        }\r\n        exports.CubismLogPrintIn(live2dcubismframework_1.LogLevel.LogLevel_Error, '[E]' + fmt, args);\r\n    };\r\n}\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CubismDebug = (function () {\r\n        function CubismDebug() {\r\n        }\r\n        CubismDebug.print = function (logLevel, format, args) {\r\n            if (logLevel < live2dcubismframework_1.Live2DCubismFramework.CubismFramework.getLoggingLevel()) {\r\n                return;\r\n            }\r\n            var logPrint = live2dcubismframework_1.Live2DCubismFramework.CubismFramework.coreLogFunction;\r\n            if (!logPrint)\r\n                return;\r\n            var buffer = format.replace(/\\{(\\d+)\\}/g, function (m, k) {\r\n                return args[k];\r\n            });\r\n            logPrint(buffer);\r\n        };\r\n        CubismDebug.dumpBytes = function (logLevel, data, length) {\r\n            for (var i = 0; i < length; i++) {\r\n                if (i % 16 == 0 && i > 0)\r\n                    this.print(logLevel, '\\n');\r\n                else if (i % 8 == 0 && i > 0)\r\n                    this.print(logLevel, '  ');\r\n                this.print(logLevel, '{0} ', [data[i] & 0xff]);\r\n            }\r\n            this.print(logLevel, '\\n');\r\n        };\r\n        return CubismDebug;\r\n    }());\r\n    Live2DCubismFramework.CubismDebug = CubismDebug;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/utils/cubismdebug.ts\n");

/***/ }),

/***/ "./Framework/src/utils/cubismjson.ts":
/*!*******************************************!*\
  !*** ./Framework/src/utils/cubismjson.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Live2DCubismFramework = void 0;\r\nvar csmstring_1 = __webpack_require__(/*! ../type/csmstring */ \"./Framework/src/type/csmstring.ts\");\r\nvar csmmap_1 = __webpack_require__(/*! ../type/csmmap */ \"./Framework/src/type/csmmap.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ./cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\r\nvar csmString = csmstring_1.Live2DCubismFramework.csmString;\r\nvar Live2DCubismFramework;\r\n(function (Live2DCubismFramework) {\r\n    var CSM_JSON_ERROR_TYPE_MISMATCH = 'Error: type mismatch';\r\n    var CSM_JSON_ERROR_INDEX_OF_BOUNDS = 'Error: index out of bounds';\r\n    var Value = (function () {\r\n        function Value() {\r\n        }\r\n        Value.prototype.getRawString = function (defaultValue, indent) {\r\n            return this.getString(defaultValue, indent);\r\n        };\r\n        Value.prototype.toInt = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0; }\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.toFloat = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0; }\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.toBoolean = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = false; }\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.getSize = function () {\r\n            return 0;\r\n        };\r\n        Value.prototype.getArray = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.getVector = function (defaultValue) {\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.getMap = function (defaultValue) {\r\n            return defaultValue;\r\n        };\r\n        Value.prototype.getValueByIndex = function (index) {\r\n            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\r\n        };\r\n        Value.prototype.getValueByString = function (s) {\r\n            return Value.nullValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\r\n        };\r\n        Value.prototype.getKeys = function () {\r\n            return Value.s_dummyKeys;\r\n        };\r\n        Value.prototype.isError = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isNull = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isBool = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isFloat = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isString = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isArray = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.isMap = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.equals = function (value) {\r\n            return false;\r\n        };\r\n        Value.prototype.isStatic = function () {\r\n            return false;\r\n        };\r\n        Value.prototype.setErrorNotForClientCall = function (errorStr) {\r\n            return JsonError.errorValue;\r\n        };\r\n        Value.staticInitializeNotForClientCall = function () {\r\n            JsonBoolean.trueValue = new JsonBoolean(true);\r\n            JsonBoolean.falseValue = new JsonBoolean(false);\r\n            JsonError.errorValue = new JsonError('ERROR', true);\r\n            this.nullValue = new JsonNullvalue();\r\n            Value.s_dummyKeys = new csmVector();\r\n        };\r\n        Value.staticReleaseNotForClientCall = function () {\r\n            JsonBoolean.trueValue = null;\r\n            JsonBoolean.falseValue = null;\r\n            JsonError.errorValue = null;\r\n            Value.nullValue = null;\r\n            Value.s_dummyKeys = null;\r\n            JsonBoolean.trueValue = null;\r\n            JsonBoolean.falseValue = null;\r\n            JsonError.errorValue = null;\r\n            Value.nullValue = null;\r\n            Value.s_dummyKeys = null;\r\n        };\r\n        return Value;\r\n    }());\r\n    Live2DCubismFramework.Value = Value;\r\n    var CubismJson = (function () {\r\n        function CubismJson(buffer, length) {\r\n            this._error = null;\r\n            this._lineCount = 0;\r\n            this._root = null;\r\n            if (buffer != undefined) {\r\n                this.parseBytes(buffer, length);\r\n            }\r\n        }\r\n        CubismJson.create = function (buffer, size) {\r\n            var json = new CubismJson();\r\n            var succeeded = json.parseBytes(buffer, size);\r\n            if (!succeeded) {\r\n                CubismJson.delete(json);\r\n                return null;\r\n            }\r\n            else {\r\n                return json;\r\n            }\r\n        };\r\n        CubismJson.delete = function (instance) {\r\n            instance = null;\r\n        };\r\n        CubismJson.prototype.getRoot = function () {\r\n            return this._root;\r\n        };\r\n        CubismJson.prototype.arrayBufferToString = function (buffer) {\r\n            var uint8Array = new Uint8Array(buffer);\r\n            var str = '';\r\n            for (var i = 0, len = uint8Array.length; i < len; ++i) {\r\n                str += '%' + this.pad(uint8Array[i].toString(16));\r\n            }\r\n            str = decodeURIComponent(str);\r\n            return str;\r\n        };\r\n        CubismJson.prototype.pad = function (n) {\r\n            return n.length < 2 ? '0' + n : n;\r\n        };\r\n        CubismJson.prototype.parseBytes = function (buffer, size) {\r\n            var endPos = new Array(1);\r\n            var decodeBuffer = this.arrayBufferToString(buffer);\r\n            this._root = this.parseValue(decodeBuffer, size, 0, endPos);\r\n            if (this._error) {\r\n                var strbuf = '\\0';\r\n                strbuf = 'Json parse error : @line ' + (this._lineCount + 1) + '\\n';\r\n                this._root = new JsonString(strbuf);\r\n                cubismdebug_1.CubismLogInfo('{0}', this._root.getRawString());\r\n                return false;\r\n            }\r\n            else if (this._root == null) {\r\n                this._root = new JsonError(new csmString(this._error), false);\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n        CubismJson.prototype.getParseError = function () {\r\n            return this._error;\r\n        };\r\n        CubismJson.prototype.checkEndOfFile = function () {\r\n            return this._root.getArray()[1].equals('EOF');\r\n        };\r\n        CubismJson.prototype.parseValue = function (buffer, length, begin, outEndPos) {\r\n            if (this._error)\r\n                return null;\r\n            var o = null;\r\n            var i = begin;\r\n            var f;\r\n            for (; i < length; i++) {\r\n                var c = buffer[i];\r\n                switch (c) {\r\n                    case '-':\r\n                    case '.':\r\n                    case '0':\r\n                    case '1':\r\n                    case '2':\r\n                    case '3':\r\n                    case '4':\r\n                    case '5':\r\n                    case '6':\r\n                    case '7':\r\n                    case '8':\r\n                    case '9': {\r\n                        var afterString = new Array(1);\r\n                        f = live2dcubismframework_1.strtod(buffer.slice(i), afterString);\r\n                        outEndPos[0] = buffer.indexOf(afterString[0]);\r\n                        return new JsonFloat(f);\r\n                    }\r\n                    case '\"':\r\n                        return new JsonString(this.parseString(buffer, length, i + 1, outEndPos));\r\n                    case '[':\r\n                        o = this.parseArray(buffer, length, i + 1, outEndPos);\r\n                        return o;\r\n                    case '{':\r\n                        o = this.parseObject(buffer, length, i + 1, outEndPos);\r\n                        return o;\r\n                    case 'n':\r\n                        if (i + 3 < length) {\r\n                            o = new JsonNullvalue();\r\n                            outEndPos[0] = i + 4;\r\n                        }\r\n                        else {\r\n                            this._error = 'parse null';\r\n                        }\r\n                        return o;\r\n                    case 't':\r\n                        if (i + 3 < length) {\r\n                            o = JsonBoolean.trueValue;\r\n                            outEndPos[0] = i + 4;\r\n                        }\r\n                        else {\r\n                            this._error = 'parse true';\r\n                        }\r\n                        return o;\r\n                    case 'f':\r\n                        if (i + 4 < length) {\r\n                            o = JsonBoolean.falseValue;\r\n                            outEndPos[0] = i + 5;\r\n                        }\r\n                        else {\r\n                            this._error = \"illegal ',' position\";\r\n                        }\r\n                        return o;\r\n                    case ',':\r\n                        this._error = \"illegal ',' position\";\r\n                        return null;\r\n                    case ']':\r\n                        outEndPos[0] = i;\r\n                        return null;\r\n                    case '\\n':\r\n                        this._lineCount++;\r\n                    case ' ':\r\n                    case '\\t':\r\n                    case '\\r':\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n            this._error = 'illegal end of value';\r\n            return null;\r\n        };\r\n        CubismJson.prototype.parseString = function (string, length, begin, outEndPos) {\r\n            if (this._error)\r\n                return null;\r\n            var i = begin;\r\n            var c, c2;\r\n            var ret = new csmString('');\r\n            var bufStart = begin;\r\n            for (; i < length; i++) {\r\n                c = string[i];\r\n                switch (c) {\r\n                    case '\"': {\r\n                        outEndPos[0] = i + 1;\r\n                        ret.append(string.slice(bufStart), i - bufStart);\r\n                        return ret.s;\r\n                    }\r\n                    case '//': {\r\n                        i++;\r\n                        if (i - 1 > bufStart) {\r\n                            ret.append(string.slice(bufStart), i - bufStart);\r\n                        }\r\n                        bufStart = i + 1;\r\n                        if (i < length) {\r\n                            c2 = string[i];\r\n                            switch (c2) {\r\n                                case '\\\\':\r\n                                    ret.expansion(1, '\\\\');\r\n                                    break;\r\n                                case '\"':\r\n                                    ret.expansion(1, '\"');\r\n                                    break;\r\n                                case '/':\r\n                                    ret.expansion(1, '/');\r\n                                    break;\r\n                                case 'b':\r\n                                    ret.expansion(1, '\\b');\r\n                                    break;\r\n                                case 'f':\r\n                                    ret.expansion(1, '\\f');\r\n                                    break;\r\n                                case 'n':\r\n                                    ret.expansion(1, '\\n');\r\n                                    break;\r\n                                case 'r':\r\n                                    ret.expansion(1, '\\r');\r\n                                    break;\r\n                                case 't':\r\n                                    ret.expansion(1, '\\t');\r\n                                    break;\r\n                                case 'u':\r\n                                    this._error = 'parse string/unicord escape not supported';\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else {\r\n                            this._error = 'parse string/escape error';\r\n                        }\r\n                    }\r\n                    default: {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this._error = 'parse string/illegal end';\r\n            return null;\r\n        };\r\n        CubismJson.prototype.parseObject = function (buffer, length, begin, outEndPos) {\r\n            if (this._error)\r\n                return null;\r\n            var ret = new JsonMap();\r\n            var key = '';\r\n            var i = begin;\r\n            var c = '';\r\n            var localRetEndPos2 = Array(1);\r\n            var ok = false;\r\n            for (; i < length; i++) {\r\n                FOR_LOOP: for (; i < length; i++) {\r\n                    c = buffer[i];\r\n                    switch (c) {\r\n                        case '\"':\r\n                            key = this.parseString(buffer, length, i + 1, localRetEndPos2);\r\n                            if (this._error) {\r\n                                return null;\r\n                            }\r\n                            i = localRetEndPos2[0];\r\n                            ok = true;\r\n                            break FOR_LOOP;\r\n                        case '}':\r\n                            outEndPos[0] = i + 1;\r\n                            return ret;\r\n                        case ':':\r\n                            this._error = \"illegal ':' position\";\r\n                            break;\r\n                        case '\\n':\r\n                            this._lineCount++;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if (!ok) {\r\n                    this._error = 'key not found';\r\n                    return null;\r\n                }\r\n                ok = false;\r\n                FOR_LOOP2: for (; i < length; i++) {\r\n                    c = buffer[i];\r\n                    switch (c) {\r\n                        case ':':\r\n                            ok = true;\r\n                            i++;\r\n                            break FOR_LOOP2;\r\n                        case '}':\r\n                            this._error = \"illegal '}' position\";\r\n                            break;\r\n                        case '\\n':\r\n                            this._lineCount++;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n                if (!ok) {\r\n                    this._error = \"':' not found\";\r\n                    return null;\r\n                }\r\n                var value = this.parseValue(buffer, length, i, localRetEndPos2);\r\n                if (this._error) {\r\n                    return null;\r\n                }\r\n                i = localRetEndPos2[0];\r\n                ret.put(key, value);\r\n                FOR_LOOP3: for (; i < length; i++) {\r\n                    c = buffer[i];\r\n                    switch (c) {\r\n                        case ',':\r\n                            break FOR_LOOP3;\r\n                        case '}':\r\n                            outEndPos[0] = i + 1;\r\n                            return ret;\r\n                        case '\\n':\r\n                            this._lineCount++;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            this._error = 'illegal end of perseObject';\r\n            return null;\r\n        };\r\n        CubismJson.prototype.parseArray = function (buffer, length, begin, outEndPos) {\r\n            if (this._error)\r\n                return null;\r\n            var ret = new JsonArray();\r\n            var i = begin;\r\n            var c;\r\n            var localRetEndpos2 = new Array(1);\r\n            for (; i < length; i++) {\r\n                var value = this.parseValue(buffer, length, i, localRetEndpos2);\r\n                if (this._error) {\r\n                    return null;\r\n                }\r\n                i = localRetEndpos2[0];\r\n                if (value) {\r\n                    ret.add(value);\r\n                }\r\n                FOR_LOOP: for (; i < length; i++) {\r\n                    c = buffer[i];\r\n                    switch (c) {\r\n                        case ',':\r\n                            break FOR_LOOP;\r\n                        case ']':\r\n                            outEndPos[0] = i + 1;\r\n                            return ret;\r\n                        case '\\n':\r\n                            ++this._lineCount;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            ret = void 0;\r\n            this._error = 'illegal end of parseObject';\r\n            return null;\r\n        };\r\n        return CubismJson;\r\n    }());\r\n    Live2DCubismFramework.CubismJson = CubismJson;\r\n    var JsonFloat = (function (_super) {\r\n        __extends(JsonFloat, _super);\r\n        function JsonFloat(v) {\r\n            var _this = _super.call(this) || this;\r\n            _this._value = v;\r\n            return _this;\r\n        }\r\n        JsonFloat.prototype.isFloat = function () {\r\n            return true;\r\n        };\r\n        JsonFloat.prototype.getString = function (defaultValue, indent) {\r\n            var strbuf = '\\0';\r\n            this._value = parseFloat(strbuf);\r\n            this._stringBuffer = strbuf;\r\n            return this._stringBuffer;\r\n        };\r\n        JsonFloat.prototype.toInt = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0; }\r\n            return parseInt(this._value.toString());\r\n        };\r\n        JsonFloat.prototype.toFloat = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = 0.0; }\r\n            return this._value;\r\n        };\r\n        JsonFloat.prototype.equals = function (value) {\r\n            if ('number' === typeof value) {\r\n                if (Math.round(value)) {\r\n                    return false;\r\n                }\r\n                else {\r\n                    return value == this._value;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        return JsonFloat;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonFloat = JsonFloat;\r\n    var JsonBoolean = (function (_super) {\r\n        __extends(JsonBoolean, _super);\r\n        function JsonBoolean(v) {\r\n            var _this = _super.call(this) || this;\r\n            _this._boolValue = v;\r\n            return _this;\r\n        }\r\n        JsonBoolean.prototype.isBool = function () {\r\n            return true;\r\n        };\r\n        JsonBoolean.prototype.toBoolean = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = false; }\r\n            return this._boolValue;\r\n        };\r\n        JsonBoolean.prototype.getString = function (defaultValue, indent) {\r\n            this._stringBuffer = this._boolValue ? 'true' : 'false';\r\n            return this._stringBuffer;\r\n        };\r\n        JsonBoolean.prototype.equals = function (value) {\r\n            if ('boolean' === typeof value) {\r\n                return value == this._boolValue;\r\n            }\r\n            return false;\r\n        };\r\n        JsonBoolean.prototype.isStatic = function () {\r\n            return true;\r\n        };\r\n        return JsonBoolean;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonBoolean = JsonBoolean;\r\n    var JsonString = (function (_super) {\r\n        __extends(JsonString, _super);\r\n        function JsonString(s) {\r\n            var _this = _super.call(this) || this;\r\n            if ('string' === typeof s) {\r\n                _this._stringBuffer = s;\r\n            }\r\n            if (s instanceof csmString) {\r\n                _this._stringBuffer = s.s;\r\n            }\r\n            return _this;\r\n        }\r\n        JsonString.prototype.isString = function () {\r\n            return true;\r\n        };\r\n        JsonString.prototype.getString = function (defaultValue, indent) {\r\n            return this._stringBuffer;\r\n        };\r\n        JsonString.prototype.equals = function (value) {\r\n            if ('string' === typeof value) {\r\n                return this._stringBuffer == value;\r\n            }\r\n            if (value instanceof csmString) {\r\n                return this._stringBuffer == value.s;\r\n            }\r\n            return false;\r\n        };\r\n        return JsonString;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonString = JsonString;\r\n    var JsonError = (function (_super) {\r\n        __extends(JsonError, _super);\r\n        function JsonError(s, isStatic) {\r\n            var _this = this;\r\n            if ('string' === typeof s) {\r\n                _this = _super.call(this, s) || this;\r\n            }\r\n            else {\r\n                _this = _super.call(this, s) || this;\r\n            }\r\n            _this._isStatic = isStatic;\r\n            return _this;\r\n        }\r\n        JsonError.prototype.isStatic = function () {\r\n            return this._isStatic;\r\n        };\r\n        JsonError.prototype.setErrorNotForClientCall = function (s) {\r\n            this._stringBuffer = s;\r\n            return this;\r\n        };\r\n        JsonError.prototype.isError = function () {\r\n            return true;\r\n        };\r\n        return JsonError;\r\n    }(JsonString));\r\n    Live2DCubismFramework.JsonError = JsonError;\r\n    var JsonNullvalue = (function (_super) {\r\n        __extends(JsonNullvalue, _super);\r\n        function JsonNullvalue() {\r\n            var _this = _super.call(this) || this;\r\n            _this._stringBuffer = 'NullValue';\r\n            return _this;\r\n        }\r\n        JsonNullvalue.prototype.isNull = function () {\r\n            return true;\r\n        };\r\n        JsonNullvalue.prototype.getString = function (defaultValue, indent) {\r\n            return this._stringBuffer;\r\n        };\r\n        JsonNullvalue.prototype.isStatic = function () {\r\n            return true;\r\n        };\r\n        return JsonNullvalue;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonNullvalue = JsonNullvalue;\r\n    var JsonArray = (function (_super) {\r\n        __extends(JsonArray, _super);\r\n        function JsonArray() {\r\n            var _this = _super.call(this) || this;\r\n            _this._array = new csmVector();\r\n            return _this;\r\n        }\r\n        JsonArray.prototype.release = function () {\r\n            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.preIncrement()) {\r\n                var v = ite.ptr();\r\n                if (v && !v.isStatic()) {\r\n                    v = void 0;\r\n                    v = null;\r\n                }\r\n            }\r\n        };\r\n        JsonArray.prototype.isArray = function () {\r\n            return true;\r\n        };\r\n        JsonArray.prototype.getValueByIndex = function (index) {\r\n            if (index < 0 || this._array.getSize() <= index) {\r\n                return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_INDEX_OF_BOUNDS);\r\n            }\r\n            var v = this._array.at(index);\r\n            if (v == null) {\r\n                return Value.nullValue;\r\n            }\r\n            return v;\r\n        };\r\n        JsonArray.prototype.getValueByString = function (s) {\r\n            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\r\n        };\r\n        JsonArray.prototype.getString = function (defaultValue, indent) {\r\n            var stringBuffer = indent + '[\\n';\r\n            for (var ite = this._array.begin(); ite.notEqual(this._array.end()); ite.increment()) {\r\n                var v = ite.ptr();\r\n                this._stringBuffer += indent + '' + v.getString(indent + ' ') + '\\n';\r\n            }\r\n            this._stringBuffer = stringBuffer + indent + ']\\n';\r\n            return this._stringBuffer;\r\n        };\r\n        JsonArray.prototype.add = function (v) {\r\n            this._array.pushBack(v);\r\n        };\r\n        JsonArray.prototype.getVector = function (defaultValue) {\r\n            if (defaultValue === void 0) { defaultValue = null; }\r\n            return this._array;\r\n        };\r\n        JsonArray.prototype.getSize = function () {\r\n            return this._array.getSize();\r\n        };\r\n        return JsonArray;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonArray = JsonArray;\r\n    var JsonMap = (function (_super) {\r\n        __extends(JsonMap, _super);\r\n        function JsonMap() {\r\n            var _this = _super.call(this) || this;\r\n            _this._map = new csmMap();\r\n            return _this;\r\n        }\r\n        JsonMap.prototype.release = function () {\r\n            var ite = this._map.begin();\r\n            while (ite.notEqual(this._map.end())) {\r\n                var v = ite.ptr().second;\r\n                if (v && !v.isStatic()) {\r\n                    v = void 0;\r\n                    v = null;\r\n                }\r\n                ite.preIncrement();\r\n            }\r\n        };\r\n        JsonMap.prototype.isMap = function () {\r\n            return true;\r\n        };\r\n        JsonMap.prototype.getValueByString = function (s) {\r\n            if (s instanceof csmString) {\r\n                var ret = this._map.getValue(s.s);\r\n                if (ret == null) {\r\n                    return Value.nullValue;\r\n                }\r\n                return ret;\r\n            }\r\n            for (var iter = this._map.begin(); iter.notEqual(this._map.end()); iter.preIncrement()) {\r\n                if (iter.ptr().first == s) {\r\n                    if (iter.ptr().second == null) {\r\n                        return Value.nullValue;\r\n                    }\r\n                    return iter.ptr().second;\r\n                }\r\n            }\r\n            return Value.nullValue;\r\n        };\r\n        JsonMap.prototype.getValueByIndex = function (index) {\r\n            return Value.errorValue.setErrorNotForClientCall(CSM_JSON_ERROR_TYPE_MISMATCH);\r\n        };\r\n        JsonMap.prototype.getString = function (defaultValue, indent) {\r\n            this._stringBuffer = indent + '{\\n';\r\n            var ite = this._map.begin();\r\n            while (ite.notEqual(this._map.end())) {\r\n                var key = ite.ptr().first;\r\n                var v = ite.ptr().second;\r\n                this._stringBuffer +=\r\n                    indent + ' ' + key + ' : ' + v.getString(indent + '   ') + ' \\n';\r\n                ite.preIncrement();\r\n            }\r\n            this._stringBuffer += indent + '}\\n';\r\n            return this._stringBuffer;\r\n        };\r\n        JsonMap.prototype.getMap = function (defaultValue) {\r\n            return this._map;\r\n        };\r\n        JsonMap.prototype.put = function (key, v) {\r\n            this._map.setValue(key, v);\r\n        };\r\n        JsonMap.prototype.getKeys = function () {\r\n            if (!this._keys) {\r\n                this._keys = new csmVector();\r\n                var ite = this._map.begin();\r\n                while (ite.notEqual(this._map.end())) {\r\n                    var key = ite.ptr().first;\r\n                    this._keys.pushBack(key);\r\n                    ite.preIncrement();\r\n                }\r\n            }\r\n            return this._keys;\r\n        };\r\n        JsonMap.prototype.getSize = function () {\r\n            return this._keys.getSize();\r\n        };\r\n        return JsonMap;\r\n    }(Value));\r\n    Live2DCubismFramework.JsonMap = JsonMap;\r\n})(Live2DCubismFramework = exports.Live2DCubismFramework || (exports.Live2DCubismFramework = {}));\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Framework/src/utils/cubismjson.ts\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./src/asset/index.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/asset/index.css ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);\n// Module\n___CSS_LOADER_EXPORT___.push([module.i, \"@font-face {\\r\\n    font-family: 'iconfont';  /* project id 1168737 */\\r\\n    src: url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.eot');\\r\\n    src: url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.eot?#iefix') format('embedded-opentype'),\\r\\n    url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.woff2') format('woff2'),\\r\\n    url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.woff') format('woff'),\\r\\n    url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.ttf') format('truetype'),\\r\\n    url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.svg#iconfont') format('svg');\\r\\n  }\\r\\n\\r\\n.iconfont{\\r\\n    font-family:\\\"iconfont\\\" !important;\\r\\n    font-size:16px;font-style:normal;\\r\\n    -webkit-font-smoothing: antialiased;\\r\\n    -webkit-text-stroke-width: 0.2px;\\r\\n    -moz-osx-font-smoothing: grayscale;\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://src/asset/index.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,uBAAuB,GAAG,uBAAuB;IACjD,yDAAyD;IACzD;;;;+EAI2E;EAC7E;;AAEF;IACI,iCAAiC;IACjC,cAAc,CAAC,iBAAiB;IAChC,mCAAmC;IACnC,gCAAgC;IAChC,kCAAkC;IAClC,eAAe;AACnB\",\"sourcesContent\":[\"@font-face {\\r\\n    font-family: 'iconfont';  /* project id 1168737 */\\r\\n    src: url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.eot');\\r\\n    src: url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.eot?#iefix') format('embedded-opentype'),\\r\\n    url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.woff2') format('woff2'),\\r\\n    url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.woff') format('woff'),\\r\\n    url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.ttf') format('truetype'),\\r\\n    url('//at.alicdn.com/t/font_1168737_j6ahlsx1dk.svg#iconfont') format('svg');\\r\\n  }\\r\\n\\r\\n.iconfont{\\r\\n    font-family:\\\"iconfont\\\" !important;\\r\\n    font-size:16px;font-style:normal;\\r\\n    -webkit-font-smoothing: antialiased;\\r\\n    -webkit-text-stroke-width: 0.2px;\\r\\n    -moz-osx-font-smoothing: grayscale;\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NyYy9hc3NldC9pbmRleC5jc3MuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmQvLi9zcmMvYXNzZXQvaW5kZXguY3NzPzhhYWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKHRydWUpO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZSB7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiAnaWNvbmZvbnQnOyAgLyogcHJvamVjdCBpZCAxMTY4NzM3ICovXFxyXFxuICAgIHNyYzogdXJsKCcvL2F0LmFsaWNkbi5jb20vdC9mb250XzExNjg3MzdfajZhaGxzeDFkay5lb3QnKTtcXHJcXG4gICAgc3JjOiB1cmwoJy8vYXQuYWxpY2RuLmNvbS90L2ZvbnRfMTE2ODczN19qNmFobHN4MWRrLmVvdD8jaWVmaXgnKSBmb3JtYXQoJ2VtYmVkZGVkLW9wZW50eXBlJyksXFxyXFxuICAgIHVybCgnLy9hdC5hbGljZG4uY29tL3QvZm9udF8xMTY4NzM3X2o2YWhsc3gxZGsud29mZjInKSBmb3JtYXQoJ3dvZmYyJyksXFxyXFxuICAgIHVybCgnLy9hdC5hbGljZG4uY29tL3QvZm9udF8xMTY4NzM3X2o2YWhsc3gxZGsud29mZicpIGZvcm1hdCgnd29mZicpLFxcclxcbiAgICB1cmwoJy8vYXQuYWxpY2RuLmNvbS90L2ZvbnRfMTE2ODczN19qNmFobHN4MWRrLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKSxcXHJcXG4gICAgdXJsKCcvL2F0LmFsaWNkbi5jb20vdC9mb250XzExNjg3MzdfajZhaGxzeDFkay5zdmcjaWNvbmZvbnQnKSBmb3JtYXQoJ3N2ZycpO1xcclxcbiAgfVxcclxcblxcclxcbi5pY29uZm9udHtcXHJcXG4gICAgZm9udC1mYW1pbHk6XFxcImljb25mb250XFxcIiAhaW1wb3J0YW50O1xcclxcbiAgICBmb250LXNpemU6MTZweDtmb250LXN0eWxlOm5vcm1hbDtcXHJcXG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxyXFxuICAgIC13ZWJraXQtdGV4dC1zdHJva2Utd2lkdGg6IDAuMnB4O1xcclxcbiAgICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly9zcmMvYXNzZXQvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksdUJBQXVCLEdBQUcsdUJBQXVCO0lBQ2pELHlEQUF5RDtJQUN6RDs7OzsrRUFJMkU7RUFDN0U7O0FBRUY7SUFDSSxpQ0FBaUM7SUFDakMsY0FBYyxDQUFDLGlCQUFpQjtJQUNoQyxtQ0FBbUM7SUFDbkMsZ0NBQWdDO0lBQ2hDLGtDQUFrQztJQUNsQyxlQUFlO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBmb250LWZhY2Uge1xcclxcbiAgICBmb250LWZhbWlseTogJ2ljb25mb250JzsgIC8qIHByb2plY3QgaWQgMTE2ODczNyAqL1xcclxcbiAgICBzcmM6IHVybCgnLy9hdC5hbGljZG4uY29tL3QvZm9udF8xMTY4NzM3X2o2YWhsc3gxZGsuZW90Jyk7XFxyXFxuICAgIHNyYzogdXJsKCcvL2F0LmFsaWNkbi5jb20vdC9mb250XzExNjg3MzdfajZhaGxzeDFkay5lb3Q/I2llZml4JykgZm9ybWF0KCdlbWJlZGRlZC1vcGVudHlwZScpLFxcclxcbiAgICB1cmwoJy8vYXQuYWxpY2RuLmNvbS90L2ZvbnRfMTE2ODczN19qNmFobHN4MWRrLndvZmYyJykgZm9ybWF0KCd3b2ZmMicpLFxcclxcbiAgICB1cmwoJy8vYXQuYWxpY2RuLmNvbS90L2ZvbnRfMTE2ODczN19qNmFobHN4MWRrLndvZmYnKSBmb3JtYXQoJ3dvZmYnKSxcXHJcXG4gICAgdXJsKCcvL2F0LmFsaWNkbi5jb20vdC9mb250XzExNjg3MzdfajZhaGxzeDFkay50dGYnKSBmb3JtYXQoJ3RydWV0eXBlJyksXFxyXFxuICAgIHVybCgnLy9hdC5hbGljZG4uY29tL3QvZm9udF8xMTY4NzM3X2o2YWhsc3gxZGsuc3ZnI2ljb25mb250JykgZm9ybWF0KCdzdmcnKTtcXHJcXG4gIH1cXHJcXG5cXHJcXG4uaWNvbmZvbnR7XFxyXFxuICAgIGZvbnQtZmFtaWx5OlxcXCJpY29uZm9udFxcXCIgIWltcG9ydGFudDtcXHJcXG4gICAgZm9udC1zaXplOjE2cHg7Zm9udC1zdHlsZTpub3JtYWw7XFxyXFxuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcclxcbiAgICAtd2Via2l0LXRleHQtc3Ryb2tlLXdpZHRoOiAwLjJweDtcXHJcXG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./src/asset/index.css\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZTJkLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! exports provided: Headers, Request, Response, DOMException, fetch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMException\", function() { return DOMException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetch\", function() { return fetch; });\nvar support = {\n  searchParams: 'URLSearchParams' in self,\n  iterable: 'Symbol' in self && 'iterator' in Symbol,\n  blob:\n    'FileReader' in self &&\n    'Blob' in self &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in self,\n  arrayBuffer: 'ArrayBuffer' in self\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : 'OK'\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = self.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      resolve(new Response(body, options))\n    }\n\n    xhr.onerror = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.ontimeout = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.onabort = function() {\n      reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    xhr.open(request.method, request.url, true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr && support.blob) {\n      xhr.responseType = 'blob'\n    }\n\n    request.headers.forEach(function(value, name) {\n      xhr.setRequestHeader(name, value)\n    })\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!self.fetch) {\n  self.fetch = fetch\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/whatwg-fetch/fetch.js\n");

/***/ }),

/***/ "./src/asset/index.css":
/*!*****************************!*\
  !*** ./src/asset/index.css ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var api = __webpack_require__(/*! ../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js!./index.css */ \"./node_modules/css-loader/dist/cjs.js!./src/asset/index.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.i, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXNzZXQvaW5kZXguY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZTJkLy4vc3JjL2Fzc2V0L2luZGV4LmNzcz83YTQ1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/asset/index.css\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lappdelegate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\n/* harmony import */ var _lappdelegate__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lappdelegate__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lapplive2dmanager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lapplive2dmanager */ \"./src/lapplive2dmanager.ts\");\n/* harmony import */ var _lapplive2dmanager__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lapplive2dmanager__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lappdefine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\");\n/* harmony import */ var _lappdefine__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_lappdefine__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _asset_index_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./asset/index.css */ \"./src/asset/index.css\");\n/* harmony import */ var _asset_index_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_asset_index_css__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _lappmodel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lappmodel */ \"./src/lappmodel.ts\");\n/* harmony import */ var _lappmodel__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_lappmodel__WEBPACK_IMPORTED_MODULE_5__);\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\nfunction ReactLive2d(props) {\n  // 好看颜色列表\n  // green: '#B4DEAE',\n  // DeepBlue: '#5B8DBE',\n  // LightBlue: '#C8E6FE',\n  // pink: '#F9B8BE'\n  // 容器样式\n  var containerStyle = {\n    position: 'fixed',\n    top: props.top ? props.top : '',\n    right: props.right ? props.right : '0',\n    bottom: props.bottom ? props.bottom : '0',\n    left: props.left ? props.left : ''\n  }; // canvas样式\n\n  var canvasStyle = {\n    position: 'relative',\n    top: props.top ? props.top : '',\n    right: props.right ? props.right : '0',\n    bottom: props.bottom ? props.bottom : '0',\n    left: props.left ? props.left : ''\n  }; // 对话框样式\n\n  var printStyle = {\n    position: 'absolute',\n    width: props.width > 300 ? props.width / 2 : '150px',\n    left: props.width > 300 ? (props.width - props.width / 2) / 2 + 'px' : (props.width - 150) / 2 + 'px',\n    top: '0',\n    minHeight: '20px',\n    borderRadius: '5px',\n    border: '1px dashed #ccc',\n    padding: '5px',\n    background: props.color ? props.color : '#C8E6FE',\n    display: 'none'\n  }; // 面板主题样式\n\n  var Theme = {\n    color: props.color ? props.color : '#C8E6FE',\n    width: '30px',\n    height: '30px'\n  };\n  var timer = null;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      controllerOn = _useState2[0],\n      setControllerOn = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      controllerIn = _useState4[0],\n      setControllerIn = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      printMenu = _useState6[0],\n      setPrintMenu = _useState6[1]; // 进入显示控制台\n\n\n  function cvMouseOver() {\n    setControllerOn(true);\n  }\n\n  function cvMouseOut() {\n    timer = setTimeout(function () {\n      // 0.01秒内没有进入点击面板，说明已经鼠标离开\n      if (!controllerIn) {\n        setControllerOn(false);\n        setControllerIn(false);\n      }\n    }, 10);\n  } // 进入选择菜单\n\n\n  function ctMouseOver() {\n    setControllerIn(true);\n    clearTimeout(timer);\n  } // 离开选择菜单\n\n\n  function ctMouseOut() {\n    setControllerIn(false);\n  } //切换\n\n\n  function ctTab() {\n    _lapplive2dmanager__WEBPACK_IMPORTED_MODULE_1__[\"LAppLive2DManager\"].getInstance().nextScene();\n  } // 悬停菜单时的对白\n\n\n  function talkPrint(print) {\n    var printNow = document.getElementById('live2d-print');\n    printNow.innerHTML = print;\n    printNow.style.display = 'block';\n  }\n\n  function cancelPrint() {\n    var printNow = document.getElementById('live2d-print');\n    printNow.innerHTML = '';\n    printNow.style.display = 'none';\n  }\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    console.log('props', props);\n    props.ModelList ? _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setModelDir(props.ModelList) : _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setModelDir([]);\n    props.TouchBody ? _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setHitBody(props.TouchBody) : _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setHitBody([]);\n    props.TouchHead ? _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setHitHead(props.TouchHead) : _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setHitHead([]);\n    props.TouchDefault ? _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setHitDefault(props.TouchDefault) : _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setHitDefault([]);\n    props.PathFull ? _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setPathFull(props.PathFull) : _lappdefine__WEBPACK_IMPORTED_MODULE_2__[\"lappdefineSet\"].setPathFull('');\n\n    if (!navigator.userAgent.match(/mobile/i) || props.MobileShow == true) {\n      if (_lappdelegate__WEBPACK_IMPORTED_MODULE_0__[\"LAppDelegate\"].getInstance().initialize() == false) {\n        return;\n      }\n\n      _lappdelegate__WEBPACK_IMPORTED_MODULE_0__[\"LAppDelegate\"].getInstance().run(); // window.onbeforeunload = () => LAppDelegate.releaseInstance();\n    }\n  }, []);\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    console.log(1234567);\n    console.log(props.motion);\n    var manager = _lapplive2dmanager__WEBPACK_IMPORTED_MODULE_1__[\"LAppLive2DManager\"].getInstance();\n\n    var modelCount = manager._models.getSize();\n\n    for (var i = 0; i < modelCount; ++i) {\n      var mode = manager.getModel(i);\n      mode.setExpression(props.motion);\n    }\n  }, [props]);\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (props.release == true) {\n      _lappdelegate__WEBPACK_IMPORTED_MODULE_0__[\"LAppDelegate\"].releaseInstance();\n    }\n  }, [props.release]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(\"div\", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(\"div\", {\n    style: containerStyle,\n    width: props.width ? props.width : '300',\n    height: props.height ? props.height : '500',\n    id: \"live2d-container\"\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(\"div\", {\n    id: \"live2d-hidden\",\n    style: {\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      zIndex: '2'\n    }\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(\"div\", {\n    id: \"live2d-print\",\n    style: printStyle\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(\"canvas\", {\n    id: \"live2d\",\n    style: canvasStyle,\n    width: props.width ? props.width : '300',\n    height: props.height ? props.height : '500',\n    className: \"live2d\",\n    onMouseEnter: cvMouseOver,\n    onMouseLeave: cvMouseOut\n  }), controllerOn && (!props.menuList || props.menuList.length > 0) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(\"div\", {\n    className: \"live2d-controller\",\n    style: {\n      position: 'absolute',\n      top: '20px',\n      left: '20px'\n    },\n    onMouseEnter: ctMouseOver,\n    onMouseLeave: ctMouseOut\n  }, (!props.menuList || props.menuList.indexOf('Mtab') > -1) && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement(\"div\", {\n    className: \"iconfont\",\n    style: Theme,\n    onClick: ctTab,\n    onMouseEnter: function onMouseEnter() {\n      return talkPrint('你想要换一个看板娘吗？');\n    },\n    onMouseLeave: cancelPrint\n  }, \"\\uE7CA\"))));\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ReactLive2d);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/lappdefine.ts":
/*!***************************!*\
  !*** ./src/lappdefine.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.lappdefineSet = exports.RenderTargetHeight = exports.RenderTargetWidth = exports.CubismLoggingLevel = exports.DebugTouchLogEnable = exports.DebugLogEnable = exports.PriorityForce = exports.PriorityNormal = exports.PriorityIdle = exports.PriorityNone = exports.HitDefaultList = exports.HitHeadList = exports.HitBodyList = exports.HitAreaNameBody = exports.HitAreaNameHead = exports.MotionGroupTapBody = exports.MotionGroupIdle = exports.MotionGroupDefault = exports.ModelDir = exports.PowerImageName = exports.GearImageName = exports.BackImageName = exports.ResourcesPath = exports.ViewLogicalMaxTop = exports.ViewLogicalMaxBottom = exports.ViewLogicalMaxRight = exports.ViewLogicalMaxLeft = exports.ViewLogicalRight = exports.ViewLogicalLeft = exports.ViewMinScale = exports.ViewMaxScale = void 0;\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../Framework/src/live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nexports.ViewMaxScale = 2.0;\r\nexports.ViewMinScale = 0.8;\r\nexports.ViewLogicalLeft = -1.0;\r\nexports.ViewLogicalRight = 1.0;\r\nexports.ViewLogicalMaxLeft = -2.0;\r\nexports.ViewLogicalMaxRight = 2.0;\r\nexports.ViewLogicalMaxBottom = -2.0;\r\nexports.ViewLogicalMaxTop = 2.0;\r\nexports.ResourcesPath = './Resources/';\r\nexports.BackImageName = 'back_class_normal.png';\r\nexports.GearImageName = 'icon_gear.png';\r\nexports.PowerImageName = 'CloseNormal.png';\r\nexports.ModelDir = ['Hiyori', 'Haru', 'Rice'];\r\nexports.MotionGroupDefault = '';\r\nexports.MotionGroupIdle = 'Idle';\r\nexports.MotionGroupTapBody = 'TapBody';\r\nexports.HitAreaNameHead = 'Head';\r\nexports.HitAreaNameBody = 'Body';\r\nexports.HitBodyList = ['啊呀，你的手在摸哪里嘛~', '哼，坏人'];\r\nexports.HitHeadList = ['讨厌~不要掐人家的脸嘛~', '希望明天也能感受到你的触摸呢'];\r\nexports.HitDefaultList = ['今天又是开心的一天呢~', '真是元气满满呀'];\r\nexports.PriorityNone = 0;\r\nexports.PriorityIdle = 1;\r\nexports.PriorityNormal = 2;\r\nexports.PriorityForce = 3;\r\nexports.DebugLogEnable = true;\r\nexports.DebugTouchLogEnable = false;\r\nexports.CubismLoggingLevel = live2dcubismframework_1.LogLevel.LogLevel_Verbose;\r\nexports.RenderTargetWidth = 1900;\r\nexports.RenderTargetHeight = 1000;\r\nvar lappdefineSet = (function () {\r\n    function lappdefineSet() {\r\n    }\r\n    lappdefineSet.setModelDir = function (modelDir) {\r\n        exports.ModelDir = modelDir.length > 0 ? modelDir : exports.ModelDir;\r\n    };\r\n    lappdefineSet.setHitBody = function (hitBodyList) {\r\n        exports.HitBodyList = hitBodyList.length > 0 ? hitBodyList : exports.HitBodyList;\r\n    };\r\n    lappdefineSet.setHitHead = function (hitHeadList) {\r\n        exports.HitHeadList = hitHeadList.length > 0 ? hitHeadList : exports.HitHeadList;\r\n    };\r\n    lappdefineSet.setHitDefault = function (hitDefaultList) {\r\n        exports.HitDefaultList = hitDefaultList.length > 0 ? hitDefaultList : exports.HitDefaultList;\r\n    };\r\n    lappdefineSet.setPathFull = function (pathfull) {\r\n        exports.ResourcesPath = pathfull.length > 0 ? pathfull : exports.ResourcesPath;\r\n    };\r\n    return lappdefineSet;\r\n}());\r\nexports.lappdefineSet = lappdefineSet;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFwcGRlZmluZS50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL3NyYy9sYXBwZGVmaW5lLnRzPzFjM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4uL0ZyYW1ld29yay9zcmMvbGl2ZTJkY3ViaXNtZnJhbWV3b3JrJ1xyXG5cclxuLyoqXHJcbiAqIFNhbXBsZSBBcHDjgafkvb/nlKjjgZnjgovlrprmlbBcclxuICovXHJcbi8vIOeUu+mdolxyXG5leHBvcnQgY29uc3QgVmlld01heFNjYWxlID0gMi4wO1xyXG5leHBvcnQgY29uc3QgVmlld01pblNjYWxlID0gMC44O1xyXG5cclxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTGVmdCA9IC0xLjA7XHJcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbFJpZ2h0ID0gMS4wO1xyXG5cclxuZXhwb3J0IGNvbnN0IFZpZXdMb2dpY2FsTWF4TGVmdCA9IC0yLjA7XHJcbmV4cG9ydCBjb25zdCBWaWV3TG9naWNhbE1heFJpZ2h0ID0gMi4wO1xyXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhCb3R0b20gPSAtMi4wO1xyXG5leHBvcnQgY29uc3QgVmlld0xvZ2ljYWxNYXhUb3AgPSAyLjA7XHJcblxyXG4vLyDnm7jlr77jg5HjgrlcclxuZXhwb3J0IGxldCBSZXNvdXJjZXNQYXRoID0gJy4vUmVzb3VyY2VzLyc7XHJcbi8vIOe7neWvuei3r+W+hO+8jOaPkOS+m+e7mVNTUuexu+Wei+mhueebrlxyXG4vLyBleHBvcnQgbGV0IFJlc291cmNlc1BhdGhGdWxsID0gJyc7XHJcblxyXG4vLyDjg6Ljg4fjg6vjga7lvozjgo3jgavjgYLjgovog4zmma/jga7nlLvlg4/jg5XjgqHjgqTjg6tcclxuZXhwb3J0IGNvbnN0IEJhY2tJbWFnZU5hbWUgPSAnYmFja19jbGFzc19ub3JtYWwucG5nJztcclxuXHJcbi8vIOWIh+aNolxyXG5leHBvcnQgY29uc3QgR2VhckltYWdlTmFtZSA9ICdpY29uX2dlYXIucG5nJztcclxuXHJcbi8vIOe1guS6huODnOOCv+ODs1xyXG5leHBvcnQgY29uc3QgUG93ZXJJbWFnZU5hbWUgPSAnQ2xvc2VOb3JtYWwucG5nJztcclxuXHJcbi8vIOODouODh+ODq+Wumue+qS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyDjg6Ljg4fjg6vjgpLphY3nva7jgZfjgZ/jg4fjgqPjg6zjgq/jg4jjg6rlkI3jga7phY3liJdcclxuLy8g44OH44Kj44Os44Kv44OI44Oq5ZCN44GobW9kZWwzLmpzb27jga7lkI3liY3jgpLkuIDoh7TjgZXjgZvjgabjgYrjgY/jgZPjgahcclxuZXhwb3J0IGxldCBNb2RlbERpcjogc3RyaW5nW10gPSBbJ0hpeW9yaScsICdIYXJ1JywgJ1JpY2UnXTtcclxuXHJcbi8vIOWklumDqOWumue+qeODleOCoeOCpOODq++8iGpzb27vvInjgajlkIjjgo/jgZvjgotcclxuZXhwb3J0IGNvbnN0IE1vdGlvbkdyb3VwRGVmYXVsdCA9ICcnOyAvLyDpu5jorqTnmoTlhbbku5bmqKHlnotcclxuZXhwb3J0IGNvbnN0IE1vdGlvbkdyb3VwSWRsZSA9ICdJZGxlJzsgLy8g44Ki44Kk44OJ44Oq44Oz44KwXHJcbmV4cG9ydCBjb25zdCBNb3Rpb25Hcm91cFRhcEJvZHkgPSAnVGFwQm9keSc7IC8vIOS9k+OCkuOCv+ODg+ODl+OBl+OBn+OBqOOBjVxyXG5cclxuLy8g5aSW6YOo5a6a576p44OV44Kh44Kk44Or77yIanNvbu+8ieOBqOWQiOOCj+OBm+OCi1xyXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVIZWFkID0gJ0hlYWQnO1xyXG5leHBvcnQgY29uc3QgSGl0QXJlYU5hbWVCb2R5ID0gJ0JvZHknO1xyXG5cclxuLy8g5a+56K+d5YaF5a65XHJcbmV4cG9ydCBsZXQgSGl0Qm9keUxpc3Q6IHN0cmluZ1tdID0gWyfllYrlkYDvvIzkvaDnmoTmiYvlnKjmkbjlk6rph4zlmJt+Jywn5ZO877yM5Z2P5Lq6J107XHJcbmV4cG9ydCBsZXQgSGl0SGVhZExpc3Q6IHN0cmluZ1tdID0gWyforqjljox+5LiN6KaB5o6Q5Lq65a6255qE6IS45ZibficsJ+W4jOacm+aYjuWkqeS5n+iDveaEn+WPl+WIsOS9oOeahOinpuaRuOWRoiddO1xyXG5leHBvcnQgbGV0IEhpdERlZmF1bHRMaXN0OiBzdHJpbmdbXSA9IFsn5LuK5aSp5Y+I5piv5byA5b+D55qE5LiA5aSp5ZGificsJ+ecn+aYr+WFg+awlOa7oea7oeWRgCddO1xyXG5cclxuLy8g44Oi44O844K344On44Oz44Gu5YSq5YWI5bqm5a6a5pWwXHJcbmV4cG9ydCBjb25zdCBQcmlvcml0eU5vbmUgPSAwO1xyXG5leHBvcnQgY29uc3QgUHJpb3JpdHlJZGxlID0gMTtcclxuZXhwb3J0IGNvbnN0IFByaW9yaXR5Tm9ybWFsID0gMjtcclxuZXhwb3J0IGNvbnN0IFByaW9yaXR5Rm9yY2UgPSAzO1xyXG5cclxuLy8g44OH44OQ44OD44Kw55So44Ot44Kw44Gu6KGo56S644Kq44OX44K344On44OzXHJcbmV4cG9ydCBjb25zdCBEZWJ1Z0xvZ0VuYWJsZSA9IHRydWU7XHJcbmV4cG9ydCBjb25zdCBEZWJ1Z1RvdWNoTG9nRW5hYmxlID0gZmFsc2U7XHJcblxyXG4vLyBGcmFtZXdvcmvjgYvjgonlh7rlipvjgZnjgovjg63jgrDjga7jg6zjg5njg6voqK3lrppcclxuZXhwb3J0IGNvbnN0IEN1YmlzbUxvZ2dpbmdMZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5Mb2dMZXZlbF9WZXJib3NlO1xyXG5cclxuLy8g44OH44OV44Kp44Or44OI44Gu44Os44Oz44OA44O844K/44O844Ky44OD44OI44K144Kk44K6XHJcbmV4cG9ydCBjb25zdCBSZW5kZXJUYXJnZXRXaWR0aCA9IDE5MDA7XHJcbmV4cG9ydCBjb25zdCBSZW5kZXJUYXJnZXRIZWlnaHQgPSAxMDAwO1xyXG5cclxuLy8g5aSW6YOo5Lyg5YWl5Yqo5oCB5Y+C5pWwXHJcbmV4cG9ydCBjbGFzcyBsYXBwZGVmaW5lU2V0IHtcclxuICAgIC8vIOaooeWei+WIl+ihqFxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRNb2RlbERpcihtb2RlbERpcjpBcnJheTxzdHJpbmc+KTogdm9pZCB7XHJcbiAgICAgICAgTW9kZWxEaXIgPSBtb2RlbERpci5sZW5ndGg+MCA/IG1vZGVsRGlyIDogTW9kZWxEaXJcclxuICAgIH1cclxuICAgIC8vIOi6q+S9k+eCueWHu+ivreiogFxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRIaXRCb2R5KGhpdEJvZHlMaXN0OkFycmF5PHN0cmluZz4pOiB2b2lkIHtcclxuICAgICAgICBIaXRCb2R5TGlzdCA9IGhpdEJvZHlMaXN0Lmxlbmd0aD4wID8gaGl0Qm9keUxpc3QgOiBIaXRCb2R5TGlzdFxyXG4gICAgfVxyXG4gICAgLy8g5aS06YOo54K55Ye76K+t6KiAXHJcbiAgICBwdWJsaWMgc3RhdGljIHNldEhpdEhlYWQoaGl0SGVhZExpc3Q6QXJyYXk8c3RyaW5nPik6IHZvaWQge1xyXG4gICAgICAgIEhpdEhlYWRMaXN0ID0gaGl0SGVhZExpc3QubGVuZ3RoPjAgPyBoaXRIZWFkTGlzdCA6IEhpdEhlYWRMaXN0XHJcbiAgICB9XHJcbiAgICAvLyDpu5jorqTngrnlh7vor63oqIBcclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0SGl0RGVmYXVsdChoaXREZWZhdWx0TGlzdDpBcnJheTxzdHJpbmc+KTogdm9pZCB7XHJcbiAgICAgICAgSGl0RGVmYXVsdExpc3QgPSBoaXREZWZhdWx0TGlzdC5sZW5ndGg+MCA/IGhpdERlZmF1bHRMaXN0IDogSGl0RGVmYXVsdExpc3RcclxuICAgIH1cclxuICAgIC8vIOaooeWei+e7neWvuei3r+W+hFxyXG4gICAgcHVibGljIHN0YXRpYyBzZXRQYXRoRnVsbChwYXRoZnVsbDpzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBSZXNvdXJjZXNQYXRoID0gcGF0aGZ1bGwubGVuZ3RoPjAgPyBwYXRoZnVsbCA6IFJlc291cmNlc1BhdGhcclxuICAgIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiI7OztBQU9BO0FBTUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBS0E7QUFHQTtBQUdBO0FBS0E7QUFHQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBR0E7QUFBQTtBQXFCQTtBQW5CQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBckJBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lappdefine.ts\n");

/***/ }),

/***/ "./src/lappdelegate.ts":
/*!*****************************!*\
  !*** ./src/lappdelegate.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LAppDelegate = exports.frameBuffer = exports.gl = exports.s_instance = exports.canvas = void 0;\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../Framework/src/live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar Csm_CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar lappview_1 = __webpack_require__(/*! ./lappview */ \"./src/lappview.ts\");\r\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\r\nvar lapptexturemanager_1 = __webpack_require__(/*! ./lapptexturemanager */ \"./src/lapptexturemanager.ts\");\r\nvar lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ \"./src/lapplive2dmanager.ts\");\r\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\r\nexports.canvas = null;\r\nexports.s_instance = null;\r\nexports.gl = null;\r\nexports.frameBuffer = null;\r\nvar LAppDelegate = (function () {\r\n    function LAppDelegate() {\r\n        this._captured = false;\r\n        this._mouseX = 0.0;\r\n        this._mouseY = 0.0;\r\n        this._isEnd = false;\r\n        this._cubismOption = new live2dcubismframework_1.Option();\r\n        this._view = new lappview_1.LAppView();\r\n        this._textureManager = new lapptexturemanager_1.LAppTextureManager();\r\n    }\r\n    LAppDelegate.getInstance = function () {\r\n        if (exports.s_instance == null) {\r\n            exports.s_instance = new LAppDelegate();\r\n        }\r\n        return exports.s_instance;\r\n    };\r\n    LAppDelegate.releaseInstance = function () {\r\n        console.log(\"释放实例\");\r\n        if (exports.s_instance != null) {\r\n            exports.s_instance.release();\r\n        }\r\n        exports.s_instance = null;\r\n    };\r\n    LAppDelegate.prototype.initialize = function () {\r\n        exports.canvas = document.getElementById(\"live2d\");\r\n        document.addEventListener(\"mousemove\", function (e) {\r\n            if (!LAppDelegate.getInstance()._view) {\r\n                lapppal_1.LAppPal.printMessage(\"view notfound\");\r\n                return;\r\n            }\r\n            else {\r\n            }\r\n            if (document.getElementById(\"live2d\")) {\r\n                var rect = document.getElementById(\"live2d\").getBoundingClientRect();\r\n                var posX = e.clientX - rect.left;\r\n                var posY = e.clientY - rect.top;\r\n                LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\r\n            }\r\n        }, false);\r\n        document.addEventListener(\"mouseout\", function (e) {\r\n            var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n            live2DManager.onDrag(0.0, 0.0);\r\n        }, false);\r\n        exports.canvas.addEventListener(\"click\", function (e) {\r\n            if (!LAppDelegate.getInstance()._view) {\r\n                lapppal_1.LAppPal.printMessage(\"view notfound\");\r\n                return;\r\n            }\r\n            var rect = exports.canvas.getBoundingClientRect();\r\n            var posX = e.clientX - rect.left;\r\n            var posY = e.clientY - rect.top;\r\n            LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\r\n            LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n        }, false);\r\n        exports.gl = exports.canvas.getContext('webgl') || exports.canvas.getContext('experimental-webgl');\r\n        if (!exports.gl) {\r\n            alert('Cannot initialize WebGL. This browser does not support.');\r\n            exports.gl = null;\r\n            document.body.innerHTML =\r\n                'This browser does not support the <code>&lt;canvas&gt;</code> element.';\r\n            return false;\r\n        }\r\n        if (!exports.frameBuffer) {\r\n            exports.frameBuffer = exports.gl.getParameter(exports.gl.FRAMEBUFFER_BINDING);\r\n        }\r\n        exports.gl.enable(exports.gl.BLEND);\r\n        exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);\r\n        var supportTouch = 'ontouchend' in exports.canvas;\r\n        if (supportTouch) {\r\n            exports.canvas.ontouchstart = onTouchBegan;\r\n            exports.canvas.ontouchmove = onTouchMoved;\r\n            exports.canvas.ontouchend = onTouchEnded;\r\n            exports.canvas.ontouchcancel = onTouchCancel;\r\n        }\r\n        else {\r\n        }\r\n        this._view.initialize();\r\n        this.initializeCubism();\r\n        return true;\r\n    };\r\n    LAppDelegate.prototype.release = function () {\r\n        this._textureManager.release();\r\n        this._textureManager = null;\r\n        this._view.release();\r\n        this._view = null;\r\n        lapplive2dmanager_1.LAppLive2DManager.releaseInstance();\r\n        Csm_CubismFramework.dispose();\r\n    };\r\n    LAppDelegate.prototype.run = function () {\r\n        var _this = this;\r\n        var loop = function () {\r\n            if (exports.s_instance == null) {\r\n                return;\r\n            }\r\n            lapppal_1.LAppPal.updateTime();\r\n            exports.gl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n            exports.gl.enable(exports.gl.DEPTH_TEST);\r\n            exports.gl.depthFunc(exports.gl.LEQUAL);\r\n            exports.gl.clear(exports.gl.COLOR_BUFFER_BIT | exports.gl.DEPTH_BUFFER_BIT);\r\n            exports.gl.clearDepth(1.0);\r\n            exports.gl.enable(exports.gl.BLEND);\r\n            exports.gl.blendFunc(exports.gl.SRC_ALPHA, exports.gl.ONE_MINUS_SRC_ALPHA);\r\n            _this._view.render();\r\n            requestAnimationFrame(loop);\r\n        };\r\n        loop();\r\n    };\r\n    LAppDelegate.prototype.createShader = function () {\r\n        var vertexShaderId = exports.gl.createShader(exports.gl.VERTEX_SHADER);\r\n        if (vertexShaderId == null) {\r\n            lapppal_1.LAppPal.printMessage('failed to create vertexShader');\r\n            return null;\r\n        }\r\n        var vertexShader = 'precision mediump float;' +\r\n            'attribute vec3 position;' +\r\n            'attribute vec2 uv;' +\r\n            'varying vec2 vuv;' +\r\n            'void main(void)' +\r\n            '{' +\r\n            '   gl_Position = vec4(position, 1.0);' +\r\n            '   vuv = uv;' +\r\n            '}';\r\n        exports.gl.shaderSource(vertexShaderId, vertexShader);\r\n        exports.gl.compileShader(vertexShaderId);\r\n        var fragmentShaderId = exports.gl.createShader(exports.gl.FRAGMENT_SHADER);\r\n        if (fragmentShaderId == null) {\r\n            lapppal_1.LAppPal.printMessage('failed to create fragmentShader');\r\n            return null;\r\n        }\r\n        var fragmentShader = 'precision mediump float;' +\r\n            'varying vec2 vuv;' +\r\n            'uniform sampler2D texture;' +\r\n            'void main(void)' +\r\n            '{' +\r\n            '   gl_FragColor = texture2D(texture, vuv);' +\r\n            '}';\r\n        exports.gl.shaderSource(fragmentShaderId, fragmentShader);\r\n        exports.gl.compileShader(fragmentShaderId);\r\n        var programId = exports.gl.createProgram();\r\n        exports.gl.attachShader(programId, vertexShaderId);\r\n        exports.gl.attachShader(programId, fragmentShaderId);\r\n        exports.gl.deleteShader(vertexShaderId);\r\n        exports.gl.deleteShader(fragmentShaderId);\r\n        exports.gl.linkProgram(programId);\r\n        exports.gl.useProgram(programId);\r\n        return programId;\r\n    };\r\n    LAppDelegate.prototype.getView = function () {\r\n        return this._view;\r\n    };\r\n    LAppDelegate.prototype.getTextureManager = function () {\r\n        return this._textureManager;\r\n    };\r\n    LAppDelegate.prototype.initializeCubism = function () {\r\n        this._cubismOption.logFunction = lapppal_1.LAppPal.printMessage;\r\n        this._cubismOption.loggingLevel = LAppDefine.CubismLoggingLevel;\r\n        Csm_CubismFramework.startUp(this._cubismOption);\r\n        Csm_CubismFramework.initialize();\r\n        lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n        lapppal_1.LAppPal.updateTime();\r\n        this._view.initializeSprite();\r\n    };\r\n    return LAppDelegate;\r\n}());\r\nexports.LAppDelegate = LAppDelegate;\r\nfunction onClickBegan(e) {\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    LAppDelegate.getInstance()._captured = true;\r\n    var posX = e.pageX;\r\n    var posY = e.pageY;\r\n    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\r\n}\r\nfunction onMouseMoved(e) {\r\n    if (!LAppDelegate.getInstance()._captured) {\r\n        return;\r\n    }\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.clientX - rect.left;\r\n    var posY = e.clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\r\n}\r\nfunction onClickEnded(e) {\r\n    LAppDelegate.getInstance()._captured = false;\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.clientX - rect.left;\r\n    var posY = e.clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\nfunction onTouchBegan(e) {\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    LAppDelegate.getInstance()._captured = true;\r\n    var posX = e.changedTouches[0].pageX;\r\n    var posY = e.changedTouches[0].pageY;\r\n    LAppDelegate.getInstance()._view.onTouchesBegan(posX, posY);\r\n}\r\nfunction onTouchMoved(e) {\r\n    if (!LAppDelegate.getInstance()._captured) {\r\n        return;\r\n    }\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.changedTouches[0].clientX - rect.left;\r\n    var posY = e.changedTouches[0].clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesMoved(posX, posY);\r\n}\r\nfunction onTouchEnded(e) {\r\n    LAppDelegate.getInstance()._captured = false;\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.changedTouches[0].clientX - rect.left;\r\n    var posY = e.changedTouches[0].clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\nfunction onTouchCancel(e) {\r\n    LAppDelegate.getInstance()._captured = false;\r\n    if (!LAppDelegate.getInstance()._view) {\r\n        lapppal_1.LAppPal.printMessage('view notfound');\r\n        return;\r\n    }\r\n    var rect = e.target.getBoundingClientRect();\r\n    var posX = e.changedTouches[0].clientX - rect.left;\r\n    var posY = e.changedTouches[0].clientY - rect.top;\r\n    LAppDelegate.getInstance()._view.onTouchesEnded(posX, posY);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappdelegate.ts\n");

/***/ }),

/***/ "./src/lapplive2dmanager.ts":
/*!**********************************!*\
  !*** ./src/lapplive2dmanager.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LAppLive2DManager = exports.s_instance = void 0;\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ../Framework/src/math/cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../Framework/src/type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar Csm_csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar Csm_CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar lappmodel_1 = __webpack_require__(/*! ./lappmodel */ \"./src/lappmodel.ts\");\r\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\r\nexports.s_instance = null;\r\nvar timer = null;\r\nvar LAppLive2DManager = (function () {\r\n    function LAppLive2DManager() {\r\n        this._finishedMotion = function (self) {\r\n            lapppal_1.LAppPal.printMessage('Motion Finished:');\r\n        };\r\n        this._viewMatrix = new Csm_CubismMatrix44();\r\n        this._models = new Csm_csmVector();\r\n        this._sceneIndex = 0;\r\n        this.changeScene(this._sceneIndex);\r\n    }\r\n    LAppLive2DManager.getInstance = function () {\r\n        if (exports.s_instance == null) {\r\n            exports.s_instance = new LAppLive2DManager();\r\n        }\r\n        return exports.s_instance;\r\n    };\r\n    LAppLive2DManager.releaseInstance = function () {\r\n        if (exports.s_instance != null) {\r\n            exports.s_instance = void 0;\r\n        }\r\n        exports.s_instance = null;\r\n    };\r\n    LAppLive2DManager.prototype.getModel = function (no) {\r\n        if (no < this._models.getSize()) {\r\n            return this._models.at(no);\r\n        }\r\n        return null;\r\n    };\r\n    LAppLive2DManager.prototype.releaseAllModel = function () {\r\n        for (var i = 0; i < this._models.getSize(); i++) {\r\n            this._models.at(i).release();\r\n            this._models.set(i, null);\r\n        }\r\n        this._models.clear();\r\n    };\r\n    LAppLive2DManager.prototype.onDrag = function (x, y) {\r\n        for (var i = 0; i < this._models.getSize(); i++) {\r\n            var model = this.getModel(i);\r\n            if (model) {\r\n                model.setDragging(x, y);\r\n            }\r\n        }\r\n    };\r\n    LAppLive2DManager.prototype.onTap = function (x, y) {\r\n        if (LAppDefine.DebugLogEnable) {\r\n            lapppal_1.LAppPal.printMessage(\"[APP]tap point: {x: \" + x.toFixed(2) + \" y: \" + y.toFixed(2) + \"}\");\r\n        }\r\n        for (var i = 0; i < this._models.getSize(); i++) {\r\n            if (this._models.at(i).hitTest(LAppDefine.HitAreaNameHead, x, y)) {\r\n                if (LAppDefine.DebugLogEnable) {\r\n                    lapppal_1.LAppPal.printMessage(\"[APP]hit area: [\" + LAppDefine.HitAreaNameHead + \"]\");\r\n                    this.talkPrint(LAppDefine.HitHeadList[Math.floor(Math.random() * LAppDefine.HitHeadList.length)]);\r\n                }\r\n                this._models.at(i).setRandomExpression();\r\n            }\r\n            else if (this._models.at(i).hitTest(LAppDefine.HitAreaNameBody, x, y)) {\r\n                if (LAppDefine.DebugLogEnable) {\r\n                    lapppal_1.LAppPal.printMessage(\"[APP]hit area: [\" + LAppDefine.HitAreaNameBody + \"]\");\r\n                    this.talkPrint(LAppDefine.HitBodyList[Math.floor(Math.random() * LAppDefine.HitBodyList.length)]);\r\n                }\r\n                this._models\r\n                    .at(i)\r\n                    .startRandomMotion(LAppDefine.MotionGroupTapBody, LAppDefine.PriorityNormal, this._finishedMotion);\r\n            }\r\n            else {\r\n                this._models\r\n                    .at(i)\r\n                    .startRandomMotion(LAppDefine.MotionGroupDefault, LAppDefine.PriorityNormal, this._finishedMotion);\r\n                this.talkPrint(LAppDefine.HitDefaultList[Math.floor(Math.random() * LAppDefine.HitDefaultList.length)]);\r\n            }\r\n        }\r\n    };\r\n    LAppLive2DManager.prototype.talkPrint = function (print) {\r\n        clearTimeout(timer);\r\n        var printNow = document.getElementById('live2d-print');\r\n        printNow.innerHTML = print;\r\n        printNow.style.display = 'block';\r\n        timer = setTimeout(function () {\r\n            printNow.innerHTML = '';\r\n            printNow.style.display = 'none';\r\n        }, 2000);\r\n    };\r\n    LAppLive2DManager.prototype.onUpdate = function () {\r\n        var projection = new Csm_CubismMatrix44();\r\n        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;\r\n        projection.scale(1.0, width / height);\r\n        if (this._viewMatrix != null) {\r\n            projection.multiplyByMatrix(this._viewMatrix);\r\n        }\r\n        var saveProjection = projection.clone();\r\n        var modelCount = this._models.getSize();\r\n        for (var i = 0; i < modelCount; ++i) {\r\n            var model = this.getModel(i);\r\n            projection = saveProjection.clone();\r\n            model.update();\r\n            model.draw(projection);\r\n        }\r\n    };\r\n    LAppLive2DManager.prototype.nextScene = function () {\r\n        var no = (this._sceneIndex + 1) % LAppDefine.ModelDir.length;\r\n        this.changeScene(no);\r\n    };\r\n    LAppLive2DManager.prototype.changeScene = function (index) {\r\n        this._sceneIndex = index;\r\n        if (LAppDefine.DebugLogEnable) {\r\n            lapppal_1.LAppPal.printMessage(\"[APP]model index: \" + this._sceneIndex);\r\n        }\r\n        var model = LAppDefine.ModelDir[index];\r\n        var modelPath = LAppDefine.ResourcesPath + model + '/';\r\n        var modelJsonName = LAppDefine.ModelDir[index];\r\n        modelJsonName += '.model3.json';\r\n        this.releaseAllModel();\r\n        this._models.pushBack(new lappmodel_1.LAppModel());\r\n        this._models.at(0).loadAssets(modelPath, modelJsonName);\r\n    };\r\n    return LAppLive2DManager;\r\n}());\r\nexports.LAppLive2DManager = LAppLive2DManager;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lapplive2dmanager.ts\n");

/***/ }),

/***/ "./src/lappmodel.ts":
/*!**************************!*\
  !*** ./src/lappmodel.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LAppModel = void 0;\r\nvar live2dcubismframework_1 = __webpack_require__(/*! ../Framework/src/live2dcubismframework */ \"./Framework/src/live2dcubismframework.ts\");\r\nvar cubismusermodel_1 = __webpack_require__(/*! ../Framework/src/model/cubismusermodel */ \"./Framework/src/model/cubismusermodel.ts\");\r\nvar cubismmodelsettingjson_1 = __webpack_require__(/*! ../Framework/src/cubismmodelsettingjson */ \"./Framework/src/cubismmodelsettingjson.ts\");\r\nvar cubismdefaultparameterid_1 = __webpack_require__(/*! ../Framework/src/cubismdefaultparameterid */ \"./Framework/src/cubismdefaultparameterid.ts\");\r\nvar acubismmotion_1 = __webpack_require__(/*! ../Framework/src/motion/acubismmotion */ \"./Framework/src/motion/acubismmotion.ts\");\r\nvar cubismeyeblink_1 = __webpack_require__(/*! ../Framework/src/effect/cubismeyeblink */ \"./Framework/src/effect/cubismeyeblink.ts\");\r\nvar cubismbreath_1 = __webpack_require__(/*! ../Framework/src/effect/cubismbreath */ \"./Framework/src/effect/cubismbreath.ts\");\r\nvar csmvector_1 = __webpack_require__(/*! ../Framework/src/type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar csmmap_1 = __webpack_require__(/*! ../Framework/src/type/csmmap */ \"./Framework/src/type/csmmap.ts\");\r\nvar cubismmotionqueuemanager_1 = __webpack_require__(/*! ../Framework/src/motion/cubismmotionqueuemanager */ \"./Framework/src/motion/cubismmotionqueuemanager.ts\");\r\nvar cubismdebug_1 = __webpack_require__(/*! ../Framework/src/utils/cubismdebug */ \"./Framework/src/utils/cubismdebug.ts\");\r\nvar InvalidMotionQueueEntryHandleValue = cubismmotionqueuemanager_1.Live2DCubismFramework.InvalidMotionQueueEntryHandleValue;\r\nvar csmMap = csmmap_1.Live2DCubismFramework.csmMap;\r\nvar csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar CubismBreath = cubismbreath_1.Live2DCubismFramework.CubismBreath;\r\nvar BreathParameterData = cubismbreath_1.Live2DCubismFramework.BreathParameterData;\r\nvar CubismEyeBlink = cubismeyeblink_1.Live2DCubismFramework.CubismEyeBlink;\r\nvar ACubismMotion = acubismmotion_1.Live2DCubismFramework.ACubismMotion;\r\nvar CubismFramework = live2dcubismframework_1.Live2DCubismFramework.CubismFramework;\r\nvar CubismUserModel = cubismusermodel_1.Live2DCubismFramework.CubismUserModel;\r\nvar CubismModelSettingJson = cubismmodelsettingjson_1.Live2DCubismFramework.CubismModelSettingJson;\r\nvar CubismDefaultParameterId = cubismdefaultparameterid_1.Live2DCubismFramework;\r\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\r\n__webpack_require__(/*! whatwg-fetch */ \"./node_modules/whatwg-fetch/fetch.js\");\r\nvar LoadStep;\r\n(function (LoadStep) {\r\n    LoadStep[LoadStep[\"LoadAssets\"] = 0] = \"LoadAssets\";\r\n    LoadStep[LoadStep[\"LoadModel\"] = 1] = \"LoadModel\";\r\n    LoadStep[LoadStep[\"WaitLoadModel\"] = 2] = \"WaitLoadModel\";\r\n    LoadStep[LoadStep[\"LoadExpression\"] = 3] = \"LoadExpression\";\r\n    LoadStep[LoadStep[\"WaitLoadExpression\"] = 4] = \"WaitLoadExpression\";\r\n    LoadStep[LoadStep[\"LoadPhysics\"] = 5] = \"LoadPhysics\";\r\n    LoadStep[LoadStep[\"WaitLoadPhysics\"] = 6] = \"WaitLoadPhysics\";\r\n    LoadStep[LoadStep[\"LoadPose\"] = 7] = \"LoadPose\";\r\n    LoadStep[LoadStep[\"WaitLoadPose\"] = 8] = \"WaitLoadPose\";\r\n    LoadStep[LoadStep[\"SetupEyeBlink\"] = 9] = \"SetupEyeBlink\";\r\n    LoadStep[LoadStep[\"SetupBreath\"] = 10] = \"SetupBreath\";\r\n    LoadStep[LoadStep[\"LoadUserData\"] = 11] = \"LoadUserData\";\r\n    LoadStep[LoadStep[\"WaitLoadUserData\"] = 12] = \"WaitLoadUserData\";\r\n    LoadStep[LoadStep[\"SetupEyeBlinkIds\"] = 13] = \"SetupEyeBlinkIds\";\r\n    LoadStep[LoadStep[\"SetupLipSyncIds\"] = 14] = \"SetupLipSyncIds\";\r\n    LoadStep[LoadStep[\"SetupLayout\"] = 15] = \"SetupLayout\";\r\n    LoadStep[LoadStep[\"LoadMotion\"] = 16] = \"LoadMotion\";\r\n    LoadStep[LoadStep[\"WaitLoadMotion\"] = 17] = \"WaitLoadMotion\";\r\n    LoadStep[LoadStep[\"CompleteInitialize\"] = 18] = \"CompleteInitialize\";\r\n    LoadStep[LoadStep[\"CompleteSetupModel\"] = 19] = \"CompleteSetupModel\";\r\n    LoadStep[LoadStep[\"LoadTexture\"] = 20] = \"LoadTexture\";\r\n    LoadStep[LoadStep[\"WaitLoadTexture\"] = 21] = \"WaitLoadTexture\";\r\n    LoadStep[LoadStep[\"CompleteSetup\"] = 22] = \"CompleteSetup\";\r\n})(LoadStep || (LoadStep = {}));\r\nvar LAppModel = (function (_super) {\r\n    __extends(LAppModel, _super);\r\n    function LAppModel() {\r\n        var _this = _super.call(this) || this;\r\n        _this._modelSetting = null;\r\n        _this._modelHomeDir = null;\r\n        _this._userTimeSeconds = 0.0;\r\n        _this._eyeBlinkIds = new csmVector();\r\n        _this._lipSyncIds = new csmVector();\r\n        _this._motions = new csmMap();\r\n        _this._expressions = new csmMap();\r\n        _this._hitArea = new csmVector();\r\n        _this._userArea = new csmVector();\r\n        _this._idParamAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleX);\r\n        _this._idParamAngleY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleY);\r\n        _this._idParamAngleZ = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamAngleZ);\r\n        _this._idParamEyeBallX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallX);\r\n        _this._idParamEyeBallY = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamEyeBallY);\r\n        _this._idParamBodyAngleX = CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBodyAngleX);\r\n        _this._state = LoadStep.LoadAssets;\r\n        _this._expressionCount = 0;\r\n        _this._textureCount = 0;\r\n        _this._motionCount = 0;\r\n        _this._allMotionCount = 0;\r\n        return _this;\r\n    }\r\n    LAppModel.prototype.loadAssets = function (dir, fileName) {\r\n        var _this = this;\r\n        console.log('资源路径', dir);\r\n        this._modelHomeDir = dir;\r\n        fetch(\"\" + this._modelHomeDir + fileName)\r\n            .then(function (response) { return response.arrayBuffer(); })\r\n            .then(function (arrayBuffer) {\r\n            var setting = new CubismModelSettingJson(arrayBuffer, arrayBuffer.byteLength);\r\n            _this._state = LoadStep.LoadModel;\r\n            _this.setupModel(setting);\r\n        });\r\n    };\r\n    LAppModel.prototype.setupModel = function (setting) {\r\n        var _this = this;\r\n        this._updating = true;\r\n        this._initialized = false;\r\n        this._modelSetting = setting;\r\n        if (this._modelSetting.getModelFileName() != '') {\r\n            var modelFileName = this._modelSetting.getModelFileName();\r\n            fetch(\"\" + this._modelHomeDir + modelFileName)\r\n                .then(function (response) { return response.arrayBuffer(); })\r\n                .then(function (arrayBuffer) {\r\n                _this.loadModel(arrayBuffer);\r\n                _this._state = LoadStep.LoadExpression;\r\n                loadCubismExpression();\r\n            });\r\n            this._state = LoadStep.WaitLoadModel;\r\n        }\r\n        else {\r\n            lapppal_1.LAppPal.printMessage('Model data does not exist.');\r\n        }\r\n        var loadCubismExpression = function () {\r\n            if (_this._modelSetting.getExpressionCount() > 0) {\r\n                var count_1 = _this._modelSetting.getExpressionCount();\r\n                var _loop_1 = function (i) {\r\n                    var expressionName = _this._modelSetting.getExpressionName(i);\r\n                    var expressionFileName = _this._modelSetting.getExpressionFileName(i);\r\n                    fetch(\"\" + _this._modelHomeDir + expressionFileName)\r\n                        .then(function (response) { return response.arrayBuffer(); })\r\n                        .then(function (arrayBuffer) {\r\n                        var motion = _this.loadExpression(arrayBuffer, arrayBuffer.byteLength, expressionName);\r\n                        if (_this._expressions.getValue(expressionName) != null) {\r\n                            ACubismMotion.delete(_this._expressions.getValue(expressionName));\r\n                            _this._expressions.setValue(expressionName, null);\r\n                        }\r\n                        _this._expressions.setValue(expressionName, motion);\r\n                        _this._expressionCount++;\r\n                        if (_this._expressionCount >= count_1) {\r\n                            _this._state = LoadStep.LoadPhysics;\r\n                            loadCubismPhysics();\r\n                        }\r\n                    });\r\n                };\r\n                for (var i = 0; i < count_1; i++) {\r\n                    _loop_1(i);\r\n                }\r\n                _this._state = LoadStep.WaitLoadExpression;\r\n            }\r\n            else {\r\n                _this._state = LoadStep.LoadPhysics;\r\n                loadCubismPhysics();\r\n            }\r\n        };\r\n        var loadCubismPhysics = function () {\r\n            if (_this._modelSetting.getPhysicsFileName() != '') {\r\n                var physicsFileName = _this._modelSetting.getPhysicsFileName();\r\n                fetch(\"\" + _this._modelHomeDir + physicsFileName)\r\n                    .then(function (response) { return response.arrayBuffer(); })\r\n                    .then(function (arrayBuffer) {\r\n                    _this.loadPhysics(arrayBuffer, arrayBuffer.byteLength);\r\n                    _this._state = LoadStep.LoadPose;\r\n                    loadCubismPose();\r\n                });\r\n                _this._state = LoadStep.WaitLoadPhysics;\r\n            }\r\n            else {\r\n                _this._state = LoadStep.LoadPose;\r\n                loadCubismPose();\r\n            }\r\n        };\r\n        var loadCubismPose = function () {\r\n            if (_this._modelSetting.getPoseFileName() != '') {\r\n                var poseFileName = _this._modelSetting.getPoseFileName();\r\n                fetch(\"\" + _this._modelHomeDir + poseFileName)\r\n                    .then(function (response) { return response.arrayBuffer(); })\r\n                    .then(function (arrayBuffer) {\r\n                    _this.loadPose(arrayBuffer, arrayBuffer.byteLength);\r\n                    _this._state = LoadStep.SetupEyeBlink;\r\n                    setupEyeBlink();\r\n                });\r\n                _this._state = LoadStep.WaitLoadPose;\r\n            }\r\n            else {\r\n                _this._state = LoadStep.SetupEyeBlink;\r\n                setupEyeBlink();\r\n            }\r\n        };\r\n        var setupEyeBlink = function () {\r\n            if (_this._modelSetting.getEyeBlinkParameterCount() > 0) {\r\n                _this._eyeBlink = CubismEyeBlink.create(_this._modelSetting);\r\n                _this._state = LoadStep.SetupBreath;\r\n            }\r\n            setupBreath();\r\n        };\r\n        var setupBreath = function () {\r\n            _this._breath = CubismBreath.create();\r\n            var breathParameters = new csmVector();\r\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleX, 0.0, 15.0, 6.5345, 0.5));\r\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleY, 0.0, 8.0, 3.5345, 0.5));\r\n            breathParameters.pushBack(new BreathParameterData(_this._idParamAngleZ, 0.0, 10.0, 5.5345, 0.5));\r\n            breathParameters.pushBack(new BreathParameterData(_this._idParamBodyAngleX, 0.0, 4.0, 15.5345, 0.5));\r\n            breathParameters.pushBack(new BreathParameterData(CubismFramework.getIdManager().getId(CubismDefaultParameterId.ParamBreath), 0.0, 0.5, 3.2345, 0.5));\r\n            _this._breath.setParameters(breathParameters);\r\n            _this._state = LoadStep.LoadUserData;\r\n            loadUserData();\r\n        };\r\n        var loadUserData = function () {\r\n            if (_this._modelSetting.getUserDataFile() != '') {\r\n                var userDataFile = _this._modelSetting.getUserDataFile();\r\n                fetch(\"\" + _this._modelHomeDir + userDataFile)\r\n                    .then(function (response) { return response.arrayBuffer(); })\r\n                    .then(function (arrayBuffer) {\r\n                    _this.loadUserData(arrayBuffer, arrayBuffer.byteLength);\r\n                    _this._state = LoadStep.SetupEyeBlinkIds;\r\n                    setupEyeBlinkIds();\r\n                });\r\n                _this._state = LoadStep.WaitLoadUserData;\r\n            }\r\n            else {\r\n                _this._state = LoadStep.SetupEyeBlinkIds;\r\n                setupEyeBlinkIds();\r\n            }\r\n        };\r\n        var setupEyeBlinkIds = function () {\r\n            var eyeBlinkIdCount = _this._modelSetting.getEyeBlinkParameterCount();\r\n            for (var i = 0; i < eyeBlinkIdCount; ++i) {\r\n                _this._eyeBlinkIds.pushBack(_this._modelSetting.getEyeBlinkParameterId(i));\r\n            }\r\n            _this._state = LoadStep.SetupLipSyncIds;\r\n            setupLipSyncIds();\r\n        };\r\n        var setupLipSyncIds = function () {\r\n            var lipSyncIdCount = _this._modelSetting.getLipSyncParameterCount();\r\n            for (var i = 0; i < lipSyncIdCount; ++i) {\r\n                _this._lipSyncIds.pushBack(_this._modelSetting.getLipSyncParameterId(i));\r\n            }\r\n            _this._state = LoadStep.SetupLayout;\r\n            setupLayout();\r\n        };\r\n        var setupLayout = function () {\r\n            var layout = new csmMap();\r\n            _this._modelSetting.getLayoutMap(layout);\r\n            _this._modelMatrix.setupFromLayout(layout);\r\n            _this._state = LoadStep.LoadMotion;\r\n            loadCubismMotion();\r\n        };\r\n        var loadCubismMotion = function () {\r\n            document.getElementById('live2d-hidden').style.display = 'block';\r\n            _this._state = LoadStep.WaitLoadMotion;\r\n            _this._model.saveParameters();\r\n            _this._allMotionCount = 0;\r\n            _this._motionCount = 0;\r\n            var group = [];\r\n            var motionGroupCount = _this._modelSetting.getMotionGroupCount();\r\n            for (var i = 0; i < motionGroupCount; i++) {\r\n                group[i] = _this._modelSetting.getMotionGroupName(i);\r\n                _this._allMotionCount += _this._modelSetting.getMotionCount(group[i]);\r\n            }\r\n            for (var i = 0; i < motionGroupCount; i++) {\r\n                _this.preLoadMotionGroup(group[i]);\r\n            }\r\n            if (motionGroupCount == 0) {\r\n                _this._state = LoadStep.LoadTexture;\r\n                _this._motionManager.stopAllMotions();\r\n                _this._updating = false;\r\n                _this._initialized = true;\r\n                _this.createRenderer();\r\n                _this.setupTextures();\r\n                _this.getRenderer().startUp(lappdelegate_1.gl);\r\n            }\r\n        };\r\n    };\r\n    LAppModel.prototype.setupTextures = function () {\r\n        var _this = this;\r\n        var usePremultiply = true;\r\n        if (this._state == LoadStep.LoadTexture) {\r\n            var textureCount_1 = this._modelSetting.getTextureCount();\r\n            var _loop_2 = function (modelTextureNumber) {\r\n                if (this_1._modelSetting.getTextureFileName(modelTextureNumber) == '') {\r\n                    return \"continue\";\r\n                }\r\n                var texturePath = this_1._modelSetting.getTextureFileName(modelTextureNumber);\r\n                texturePath = this_1._modelHomeDir + texturePath;\r\n                var onLoad = function (textureInfo) {\r\n                    _this.getRenderer().bindTexture(modelTextureNumber, textureInfo.id);\r\n                    _this._textureCount++;\r\n                    if (_this._textureCount >= textureCount_1) {\r\n                        _this._state = LoadStep.CompleteSetup;\r\n                    }\r\n                };\r\n                lappdelegate_1.LAppDelegate.getInstance()\r\n                    .getTextureManager()\r\n                    .createTextureFromPngFile(texturePath, usePremultiply, onLoad);\r\n                this_1.getRenderer().setIsPremultipliedAlpha(usePremultiply);\r\n            };\r\n            var this_1 = this;\r\n            for (var modelTextureNumber = 0; modelTextureNumber < textureCount_1; modelTextureNumber++) {\r\n                _loop_2(modelTextureNumber);\r\n            }\r\n            this._state = LoadStep.WaitLoadTexture;\r\n        }\r\n    };\r\n    LAppModel.prototype.reloadRenderer = function () {\r\n        this.deleteRenderer();\r\n        this.createRenderer();\r\n        this.setupTextures();\r\n    };\r\n    LAppModel.prototype.update = function () {\r\n        if (this._state != LoadStep.CompleteSetup)\r\n            return;\r\n        var deltaTimeSeconds = lapppal_1.LAppPal.getDeltaTime();\r\n        this._userTimeSeconds += deltaTimeSeconds;\r\n        this._dragManager.update(deltaTimeSeconds);\r\n        this._dragX = this._dragManager.getX();\r\n        this._dragY = this._dragManager.getY();\r\n        var motionUpdated = false;\r\n        this._model.loadParameters();\r\n        if (this._motionManager.isFinished()) {\r\n            this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\r\n            var lucky = Math.floor(Math.random() * 1000 + 100);\r\n            if (lucky == 999) {\r\n                this.startRandomMotion(LAppDefine.MotionGroupIdle, LAppDefine.PriorityIdle);\r\n            }\r\n            else if (lucky == 888) {\r\n                this.startRandomMotion(LAppDefine.MotionGroupDefault, LAppDefine.PriorityIdle);\r\n            }\r\n        }\r\n        else {\r\n            motionUpdated = this._motionManager.updateMotion(this._model, deltaTimeSeconds);\r\n        }\r\n        this._model.saveParameters();\r\n        if (!motionUpdated) {\r\n            if (this._eyeBlink != null) {\r\n                this._eyeBlink.updateParameters(this._model, deltaTimeSeconds);\r\n            }\r\n        }\r\n        if (this._expressionManager != null) {\r\n            this._expressionManager.updateMotion(this._model, deltaTimeSeconds);\r\n        }\r\n        this._model.addParameterValueById(this._idParamAngleX, this._dragX * 30);\r\n        this._model.addParameterValueById(this._idParamAngleY, this._dragY * 30);\r\n        this._model.addParameterValueById(this._idParamAngleZ, this._dragX * this._dragY * -30);\r\n        this._model.addParameterValueById(this._idParamBodyAngleX, this._dragX * 10);\r\n        this._model.addParameterValueById(this._idParamEyeBallX, this._dragX);\r\n        this._model.addParameterValueById(this._idParamEyeBallY, this._dragY);\r\n        if (this._breath != null) {\r\n            this._breath.updateParameters(this._model, deltaTimeSeconds);\r\n        }\r\n        if (this._physics != null) {\r\n            this._physics.evaluate(this._model, deltaTimeSeconds);\r\n        }\r\n        if (this._lipsync) {\r\n            var value = 0;\r\n            for (var i = 0; i < this._lipSyncIds.getSize(); ++i) {\r\n                this._model.addParameterValueById(this._lipSyncIds.at(i), value, 0.8);\r\n            }\r\n        }\r\n        if (this._pose != null) {\r\n            this._pose.updateParameters(this._model, deltaTimeSeconds);\r\n        }\r\n        this._model.update();\r\n    };\r\n    LAppModel.prototype.startMotion = function (group, no, priority, onFinishedMotionHandler) {\r\n        var _this = this;\r\n        if (priority == LAppDefine.PriorityForce) {\r\n            this._motionManager.setReservePriority(priority);\r\n        }\r\n        else if (!this._motionManager.reserveMotion(priority)) {\r\n            if (this._debugMode) {\r\n                lapppal_1.LAppPal.printMessage(\"[APP]can't start motion.\");\r\n            }\r\n            return InvalidMotionQueueEntryHandleValue;\r\n        }\r\n        var motionFileName = this._modelSetting.getMotionFileName(group, no);\r\n        var name = group + \"_\" + no;\r\n        var motion = this._motions.getValue(name);\r\n        var autoDelete = false;\r\n        if (motion == null) {\r\n            fetch(\"\" + this._modelHomeDir + motionFileName)\r\n                .then(function (response) { return response.arrayBuffer(); })\r\n                .then(function (arrayBuffer) {\r\n                motion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, null, onFinishedMotionHandler);\r\n                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, no);\r\n                if (fadeTime >= 0.0) {\r\n                    motion.setFadeInTime(fadeTime);\r\n                }\r\n                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, no);\r\n                if (fadeTime >= 0.0) {\r\n                    motion.setFadeOutTime(fadeTime);\r\n                }\r\n                motion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);\r\n                autoDelete = true;\r\n            });\r\n        }\r\n        else {\r\n            motion.setFinishedMotionHandler(onFinishedMotionHandler);\r\n        }\r\n        if (this._debugMode) {\r\n            lapppal_1.LAppPal.printMessage(\"[APP]start motion: [\" + group + \"_\" + no);\r\n        }\r\n        return this._motionManager.startMotionPriority(motion, autoDelete, priority);\r\n    };\r\n    LAppModel.prototype.startRandomMotion = function (group, priority, onFinishedMotionHandler) {\r\n        if (this._modelSetting.getMotionCount(group) == 0) {\r\n            return InvalidMotionQueueEntryHandleValue;\r\n        }\r\n        var no = Math.floor(Math.random() * this._modelSetting.getMotionCount(group));\r\n        return this.startMotion(group, no, priority, onFinishedMotionHandler);\r\n    };\r\n    LAppModel.prototype.setExpression = function (expressionId) {\r\n        var motion = this._expressions.getValue(expressionId);\r\n        if (this._debugMode) {\r\n            lapppal_1.LAppPal.printMessage(\"[APP]expression: [\" + expressionId + \"]\");\r\n        }\r\n        if (motion != null) {\r\n            this._expressionManager.startMotionPriority(motion, false, LAppDefine.PriorityForce);\r\n        }\r\n        else {\r\n            if (this._debugMode) {\r\n                lapppal_1.LAppPal.printMessage(\"[APP]expression[\" + expressionId + \"] is null\");\r\n            }\r\n        }\r\n    };\r\n    LAppModel.prototype.setRandomExpression = function () {\r\n        if (this._expressions.getSize() == 0) {\r\n            return;\r\n        }\r\n        var no = Math.floor(Math.random() * this._expressions.getSize());\r\n        for (var i = 0; i < this._expressions.getSize(); i++) {\r\n            if (i == no) {\r\n                var name_1 = this._expressions._keyValues[i].first;\r\n                console.log(\"client--->:\" + name_1);\r\n                this.setExpression(name_1);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    LAppModel.prototype.motionEventFired = function (eventValue) {\r\n        cubismdebug_1.CubismLogInfo('{0} is fired on LAppModel!!', eventValue.s);\r\n    };\r\n    LAppModel.prototype.hitTest = function (hitArenaName, x, y) {\r\n        if (this._opacity < 1) {\r\n            return false;\r\n        }\r\n        var count = this._modelSetting.getHitAreasCount();\r\n        for (var i = 0; i < count; i++) {\r\n            if (this._modelSetting.getHitAreaName(i) == hitArenaName) {\r\n                var drawId = this._modelSetting.getHitAreaId(i);\r\n                return this.isHit(drawId, x, y);\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    LAppModel.prototype.preLoadMotionGroup = function (group) {\r\n        var _this = this;\r\n        var _loop_3 = function (i) {\r\n            var motionFileName = this_2._modelSetting.getMotionFileName(group, i);\r\n            var name_2 = group + \"_\" + i;\r\n            if (this_2._debugMode) {\r\n                lapppal_1.LAppPal.printMessage(\"[APP]load motion: \" + motionFileName + \" => [\" + name_2 + \"]\");\r\n            }\r\n            fetch(\"\" + this_2._modelHomeDir + motionFileName)\r\n                .then(function (response) { return response.arrayBuffer(); })\r\n                .then(function (arrayBuffer) {\r\n                var tmpMotion = _this.loadMotion(arrayBuffer, arrayBuffer.byteLength, name_2);\r\n                var fadeTime = _this._modelSetting.getMotionFadeInTimeValue(group, i);\r\n                if (fadeTime >= 0.0) {\r\n                    tmpMotion.setFadeInTime(fadeTime);\r\n                }\r\n                fadeTime = _this._modelSetting.getMotionFadeOutTimeValue(group, i);\r\n                if (fadeTime >= 0.0) {\r\n                    tmpMotion.setFadeOutTime(fadeTime);\r\n                }\r\n                tmpMotion.setEffectIds(_this._eyeBlinkIds, _this._lipSyncIds);\r\n                if (_this._motions.getValue(name_2) != null) {\r\n                    ACubismMotion.delete(_this._motions.getValue(name_2));\r\n                }\r\n                _this._motions.setValue(name_2, tmpMotion);\r\n                _this._motionCount++;\r\n                if (_this._motionCount >= _this._allMotionCount) {\r\n                    _this._state = LoadStep.LoadTexture;\r\n                    document.getElementById('live2d-hidden').style.display = 'none';\r\n                    if (_this._motionManager) {\r\n                        _this._motionManager.stopAllMotions();\r\n                        _this.createRenderer();\r\n                        _this.setupTextures();\r\n                        _this.getRenderer().startUp(lappdelegate_1.gl);\r\n                    }\r\n                    _this._updating = false;\r\n                    _this._initialized = true;\r\n                    document.getElementById('live2d').style.visibility = 'visible';\r\n                }\r\n            });\r\n        };\r\n        var this_2 = this;\r\n        for (var i = 0; i < this._modelSetting.getMotionCount(group); i++) {\r\n            _loop_3(i);\r\n        }\r\n    };\r\n    LAppModel.prototype.releaseMotions = function () {\r\n        this._motions.clear();\r\n    };\r\n    LAppModel.prototype.releaseExpressions = function () {\r\n        this._expressions.clear();\r\n    };\r\n    LAppModel.prototype.doDraw = function () {\r\n        if (this._model == null)\r\n            return;\r\n        var viewport = [0, 0, lappdelegate_1.canvas.width, lappdelegate_1.canvas.height];\r\n        this.getRenderer().setRenderState(lappdelegate_1.frameBuffer, viewport);\r\n        this.getRenderer().drawModel();\r\n    };\r\n    LAppModel.prototype.draw = function (matrix) {\r\n        if (this._model == null) {\r\n            return;\r\n        }\r\n        if (this._state == LoadStep.CompleteSetup) {\r\n            matrix.multiplyByMatrix(this._modelMatrix);\r\n            this.getRenderer().setMvpMatrix(matrix);\r\n            this.doDraw();\r\n        }\r\n    };\r\n    return LAppModel;\r\n}(CubismUserModel));\r\nexports.LAppModel = LAppModel;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappmodel.ts\n");

/***/ }),

/***/ "./src/lapppal.ts":
/*!************************!*\
  !*** ./src/lapppal.ts ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LAppPal = void 0;\r\nvar LAppPal = (function () {\r\n    function LAppPal() {\r\n    }\r\n    LAppPal.loadFileAsBytes = function (filePath, callback) {\r\n        fetch(filePath)\r\n            .then(function (response) { return response.arrayBuffer(); })\r\n            .then(function (arrayBuffer) { return callback(arrayBuffer, arrayBuffer.byteLength); });\r\n    };\r\n    LAppPal.getDeltaTime = function () {\r\n        return this.s_deltaTime;\r\n    };\r\n    LAppPal.updateTime = function () {\r\n        this.s_currentFrame = Date.now();\r\n        this.s_deltaTime = (this.s_currentFrame - this.s_lastFrame) / 1000;\r\n        this.s_lastFrame = this.s_currentFrame;\r\n    };\r\n    LAppPal.printMessage = function (message) {\r\n        console.log(message);\r\n    };\r\n    LAppPal.lastUpdate = Date.now();\r\n    LAppPal.s_currentFrame = 0.0;\r\n    LAppPal.s_lastFrame = 0.0;\r\n    LAppPal.s_deltaTime = 0.0;\r\n    return LAppPal;\r\n}());\r\nexports.LAppPal = LAppPal;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbGFwcHBhbC50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdmUyZC8uL3NyYy9sYXBwcGFsLnRzP2QzNzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodChjKSBMaXZlMkQgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSB0aGUgTGl2ZTJEIE9wZW4gU29mdHdhcmUgbGljZW5zZVxyXG4gKiB0aGF0IGNhbiBiZSBmb3VuZCBhdCBodHRwczovL3d3dy5saXZlMmQuY29tL2V1bGEvbGl2ZTJkLW9wZW4tc29mdHdhcmUtbGljZW5zZS1hZ3JlZW1lbnRfZW4uaHRtbC5cclxuICovXHJcblxyXG4vKipcclxuICog44OX44Op44OD44OI44OV44Kp44O844Og5L6d5a2Y5qmf6IO944KS5oq96LGh5YyW44GZ44KLIEN1YmlzbSBQbGF0Zm9ybSBBYnN0cmFjdGlvbiBMYXllci5cclxuICpcclxuICog44OV44Kh44Kk44Or6Kqt44G/6L6844G/44KE5pmC5Yi75Y+W5b6X562J44Gu44OX44Op44OD44OI44OV44Kp44O844Og44Gr5L6d5a2Y44GZ44KL6Zai5pWw44KS44G+44Go44KB44KL44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTEFwcFBhbCB7XHJcbiAgLyoqXHJcbiAgICog44OV44Kh44Kk44Or44KS44OQ44Kk44OI44OH44O844K/44Go44GX44Gm6Kqt44G/44GT44KAXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZmlsZVBhdGgg6Kqt44G/6L6844G/5a++6LGh44OV44Kh44Kk44Or44Gu44OR44K5XHJcbiAgICogQHJldHVyblxyXG4gICAqIHtcclxuICAgKiAgICAgIGJ1ZmZlciwgICDoqq3jgb/ovrzjgpPjgaDjg5DjgqTjg4jjg4fjg7zjgr9cclxuICAgKiAgICAgIHNpemUgICAgICAgIOODleOCoeOCpOODq+OCteOCpOOCulxyXG4gICAqIH1cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGxvYWRGaWxlQXNCeXRlcyhcclxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXHJcbiAgICBjYWxsYmFjazogKGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlciwgc2l6ZTogbnVtYmVyKSA9PiB2b2lkXHJcbiAgKTogdm9pZCB7XHJcbiAgICBmZXRjaChmaWxlUGF0aClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcclxuICAgICAgLnRoZW4oYXJyYXlCdWZmZXIgPT4gY2FsbGJhY2soYXJyYXlCdWZmZXIsIGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODh+ODq+OCv+aZgumWk++8iOWJjeWbnuODleODrOODvOODoOOBqOOBruW3ruWIhu+8ieOCkuWPluW+l+OBmeOCi1xyXG4gICAqIEByZXR1cm4g44OH44Or44K/5pmC6ZaTW21zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0RGVsdGFUaW1lKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5zX2RlbHRhVGltZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgdXBkYXRlVGltZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc19jdXJyZW50RnJhbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgdGhpcy5zX2RlbHRhVGltZSA9ICh0aGlzLnNfY3VycmVudEZyYW1lIC0gdGhpcy5zX2xhc3RGcmFtZSkgLyAxMDAwO1xyXG4gICAgdGhpcy5zX2xhc3RGcmFtZSA9IHRoaXMuc19jdXJyZW50RnJhbWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDjg6Hjg4Pjgrvjg7zjgrjjgpLlh7rlipvjgZnjgotcclxuICAgKiBAcGFyYW0gbWVzc2FnZSDmloflrZfliJdcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHByaW50TWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxhc3RVcGRhdGUgPSBEYXRlLm5vdygpO1xyXG5cclxuICBzdGF0aWMgc19jdXJyZW50RnJhbWUgPSAwLjA7XHJcbiAgc3RhdGljIHNfbGFzdEZyYW1lID0gMC4wO1xyXG4gIHN0YXRpYyBzX2RlbHRhVGltZSA9IDAuMDtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7OztBQVlBO0FBQUE7QUErQ0E7QUFwQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUEvQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/lapppal.ts\n");

/***/ }),

/***/ "./src/lapptexturemanager.ts":
/*!***********************************!*\
  !*** ./src/lapptexturemanager.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TextureInfo = exports.LAppTextureManager = void 0;\r\nvar csmvector_1 = __webpack_require__(/*! ../Framework/src/type/csmvector */ \"./Framework/src/type/csmvector.ts\");\r\nvar Csm_csmVector = csmvector_1.Live2DCubismFramework.csmVector;\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar LAppTextureManager = (function () {\r\n    function LAppTextureManager() {\r\n        this._textures = new Csm_csmVector();\r\n    }\r\n    LAppTextureManager.prototype.release = function () {\r\n        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {\r\n            lappdelegate_1.gl.deleteTexture(ite.ptr().id);\r\n        }\r\n        this._textures = null;\r\n    };\r\n    LAppTextureManager.prototype.createTextureFromPngFile = function (fileName, usePremultiply, callback) {\r\n        var _this = this;\r\n        var _loop_1 = function (ite) {\r\n            if (ite.ptr().fileName == fileName &&\r\n                ite.ptr().usePremultply == usePremultiply) {\r\n                ite.ptr().img = new Image();\r\n                ite.ptr().img.onload = function () { return callback(ite.ptr()); };\r\n                ite.ptr().img.src = fileName;\r\n                return { value: void 0 };\r\n            }\r\n        };\r\n        for (var ite = this._textures.begin(); ite.notEqual(this._textures.end()); ite.preIncrement()) {\r\n            var state_1 = _loop_1(ite);\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n        var img = new Image();\r\n        img.onload = function () {\r\n            var tex = lappdelegate_1.gl.createTexture();\r\n            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, tex);\r\n            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MIN_FILTER, lappdelegate_1.gl.LINEAR_MIPMAP_LINEAR);\r\n            lappdelegate_1.gl.texParameteri(lappdelegate_1.gl.TEXTURE_2D, lappdelegate_1.gl.TEXTURE_MAG_FILTER, lappdelegate_1.gl.LINEAR);\r\n            if (usePremultiply) {\r\n                lappdelegate_1.gl.pixelStorei(lappdelegate_1.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\r\n            }\r\n            lappdelegate_1.gl.texImage2D(lappdelegate_1.gl.TEXTURE_2D, 0, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.RGBA, lappdelegate_1.gl.UNSIGNED_BYTE, img);\r\n            lappdelegate_1.gl.generateMipmap(lappdelegate_1.gl.TEXTURE_2D);\r\n            lappdelegate_1.gl.bindTexture(lappdelegate_1.gl.TEXTURE_2D, null);\r\n            var textureInfo = new TextureInfo();\r\n            if (textureInfo != null) {\r\n                textureInfo.fileName = fileName;\r\n                textureInfo.width = img.width;\r\n                textureInfo.height = img.height;\r\n                textureInfo.id = tex;\r\n                textureInfo.img = img;\r\n                textureInfo.usePremultply = usePremultiply;\r\n                _this._textures.pushBack(textureInfo);\r\n            }\r\n            callback(textureInfo);\r\n        };\r\n        img.src = fileName;\r\n        img.crossOrigin = \"anonymous\";\r\n    };\r\n    LAppTextureManager.prototype.releaseTextures = function () {\r\n        for (var i = 0; i < this._textures.getSize(); i++) {\r\n            this._textures.set(i, null);\r\n        }\r\n        this._textures.clear();\r\n    };\r\n    LAppTextureManager.prototype.releaseTextureByTexture = function (texture) {\r\n        for (var i = 0; i < this._textures.getSize(); i++) {\r\n            if (this._textures.at(i).id != texture) {\r\n                continue;\r\n            }\r\n            this._textures.set(i, null);\r\n            this._textures.remove(i);\r\n            break;\r\n        }\r\n    };\r\n    LAppTextureManager.prototype.releaseTextureByFilePath = function (fileName) {\r\n        for (var i = 0; i < this._textures.getSize(); i++) {\r\n            if (this._textures.at(i).fileName == fileName) {\r\n                this._textures.set(i, null);\r\n                this._textures.remove(i);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    return LAppTextureManager;\r\n}());\r\nexports.LAppTextureManager = LAppTextureManager;\r\nvar TextureInfo = (function () {\r\n    function TextureInfo() {\r\n        this.id = null;\r\n        this.width = 0;\r\n        this.height = 0;\r\n    }\r\n    return TextureInfo;\r\n}());\r\nexports.TextureInfo = TextureInfo;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lapptexturemanager.ts\n");

/***/ }),

/***/ "./src/lappview.ts":
/*!*************************!*\
  !*** ./src/lappview.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.LAppView = void 0;\r\nvar cubismmatrix44_1 = __webpack_require__(/*! ../Framework/src/math/cubismmatrix44 */ \"./Framework/src/math/cubismmatrix44.ts\");\r\nvar cubismviewmatrix_1 = __webpack_require__(/*! ../Framework/src/math/cubismviewmatrix */ \"./Framework/src/math/cubismviewmatrix.ts\");\r\nvar Csm_CubismViewMatrix = cubismviewmatrix_1.Live2DCubismFramework.CubismViewMatrix;\r\nvar Csm_CubismMatrix44 = cubismmatrix44_1.Live2DCubismFramework.CubismMatrix44;\r\nvar touchmanager_1 = __webpack_require__(/*! ./touchmanager */ \"./src/touchmanager.ts\");\r\nvar lapplive2dmanager_1 = __webpack_require__(/*! ./lapplive2dmanager */ \"./src/lapplive2dmanager.ts\");\r\nvar lappdelegate_1 = __webpack_require__(/*! ./lappdelegate */ \"./src/lappdelegate.ts\");\r\nvar lapppal_1 = __webpack_require__(/*! ./lapppal */ \"./src/lapppal.ts\");\r\nvar LAppDefine = __importStar(__webpack_require__(/*! ./lappdefine */ \"./src/lappdefine.ts\"));\r\nvar LAppView = (function () {\r\n    function LAppView() {\r\n        this._programId = null;\r\n        this._back = null;\r\n        this._gear = null;\r\n        this._touchManager = new touchmanager_1.TouchManager();\r\n        this._deviceToScreen = new Csm_CubismMatrix44();\r\n        this._viewMatrix = new Csm_CubismViewMatrix();\r\n    }\r\n    LAppView.prototype.initialize = function () {\r\n        var width = lappdelegate_1.canvas.width, height = lappdelegate_1.canvas.height;\r\n        var ratio = height / width;\r\n        var left = LAppDefine.ViewLogicalLeft;\r\n        var right = LAppDefine.ViewLogicalRight;\r\n        var bottom = -ratio;\r\n        var top = ratio;\r\n        this._viewMatrix.setScreenRect(left, right, bottom, top);\r\n        var screenW = Math.abs(left - right);\r\n        this._deviceToScreen.scaleRelative(screenW / width, -screenW / width);\r\n        this._deviceToScreen.translateRelative(-width * 0.5, -height * 0.5);\r\n        this._viewMatrix.setMaxScale(LAppDefine.ViewMaxScale);\r\n        this._viewMatrix.setMinScale(LAppDefine.ViewMinScale);\r\n        this._viewMatrix.setMaxScreenRect(LAppDefine.ViewLogicalMaxLeft, LAppDefine.ViewLogicalMaxRight, LAppDefine.ViewLogicalMaxBottom, LAppDefine.ViewLogicalMaxTop);\r\n    };\r\n    LAppView.prototype.release = function () {\r\n        this._viewMatrix = null;\r\n        this._touchManager = null;\r\n        this._deviceToScreen = null;\r\n        if (this._gear) {\r\n            this._gear.release();\r\n        }\r\n        this._gear = null;\r\n        if (this._back) {\r\n            this._back.release();\r\n        }\r\n        this._back = null;\r\n        lappdelegate_1.gl.deleteProgram(this._programId);\r\n        this._programId = null;\r\n    };\r\n    LAppView.prototype.render = function () {\r\n        lappdelegate_1.gl.useProgram(this._programId);\r\n        if (this._back) {\r\n            this._back.render(this._programId);\r\n        }\r\n        if (this._gear) {\r\n            this._gear.render(this._programId);\r\n        }\r\n        lappdelegate_1.gl.flush();\r\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n        live2DManager.onUpdate();\r\n    };\r\n    LAppView.prototype.initializeSprite = function () {\r\n        var width = lappdelegate_1.canvas.width;\r\n        var height = lappdelegate_1.canvas.height;\r\n        var textureManager = lappdelegate_1.LAppDelegate.getInstance().getTextureManager();\r\n        var resourcesPath = LAppDefine.ResourcesPath;\r\n        var imageName = '';\r\n    };\r\n    LAppView.prototype.onTouchesBegan = function (pointX, pointY) {\r\n        this._touchManager.touchesBegan(pointX, pointY);\r\n    };\r\n    LAppView.prototype.onTouchesMoved = function (pointX, pointY) {\r\n        var viewX = this.transformViewX(this._touchManager.getX());\r\n        var viewY = this.transformViewY(this._touchManager.getY());\r\n        this._touchManager.touchesMoved(pointX, pointY);\r\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n        live2DManager.onDrag(viewX, viewY);\r\n    };\r\n    LAppView.prototype.onTouchesEnded = function (pointX, pointY) {\r\n        var live2DManager = lapplive2dmanager_1.LAppLive2DManager.getInstance();\r\n        live2DManager.onDrag(0.0, 0.0);\r\n        {\r\n            var x = this._deviceToScreen.transformX(this._touchManager.getX());\r\n            var y = this._deviceToScreen.transformY(this._touchManager.getY());\r\n            if (LAppDefine.DebugTouchLogEnable) {\r\n                lapppal_1.LAppPal.printMessage(\"[APP]touchesEnded x: \" + x + \" y: \" + y);\r\n            }\r\n            live2DManager.onTap(x, y);\r\n        }\r\n    };\r\n    LAppView.prototype.transformViewX = function (deviceX) {\r\n        var screenX = this._deviceToScreen.transformX(deviceX);\r\n        return this._viewMatrix.invertTransformX(screenX);\r\n    };\r\n    LAppView.prototype.transformViewY = function (deviceY) {\r\n        var screenY = this._deviceToScreen.transformY(deviceY);\r\n        return this._viewMatrix.invertTransformY(screenY);\r\n    };\r\n    LAppView.prototype.transformScreenX = function (deviceX) {\r\n        return this._deviceToScreen.transformX(deviceX);\r\n    };\r\n    LAppView.prototype.transformScreenY = function (deviceY) {\r\n        return this._deviceToScreen.transformY(deviceY);\r\n    };\r\n    return LAppView;\r\n}());\r\nexports.LAppView = LAppView;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/lappview.ts\n");

/***/ }),

/***/ "./src/touchmanager.ts":
/*!*****************************!*\
  !*** ./src/touchmanager.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TouchManager = void 0;\r\nvar TouchManager = (function () {\r\n    function TouchManager() {\r\n        this._startX = 0.0;\r\n        this._startY = 0.0;\r\n        this._lastX = 0.0;\r\n        this._lastY = 0.0;\r\n        this._lastX1 = 0.0;\r\n        this._lastY1 = 0.0;\r\n        this._lastX2 = 0.0;\r\n        this._lastY2 = 0.0;\r\n        this._lastTouchDistance = 0.0;\r\n        this._deltaX = 0.0;\r\n        this._deltaY = 0.0;\r\n        this._scale = 1.0;\r\n        this._touchSingle = false;\r\n        this._flipAvailable = false;\r\n    }\r\n    TouchManager.prototype.getCenterX = function () {\r\n        return this._lastX;\r\n    };\r\n    TouchManager.prototype.getCenterY = function () {\r\n        return this._lastY;\r\n    };\r\n    TouchManager.prototype.getDeltaX = function () {\r\n        return this._deltaX;\r\n    };\r\n    TouchManager.prototype.getDeltaY = function () {\r\n        return this._deltaY;\r\n    };\r\n    TouchManager.prototype.getStartX = function () {\r\n        return this._startX;\r\n    };\r\n    TouchManager.prototype.getStartY = function () {\r\n        return this._startY;\r\n    };\r\n    TouchManager.prototype.getScale = function () {\r\n        return this._scale;\r\n    };\r\n    TouchManager.prototype.getX = function () {\r\n        return this._lastX;\r\n    };\r\n    TouchManager.prototype.getY = function () {\r\n        return this._lastY;\r\n    };\r\n    TouchManager.prototype.getX1 = function () {\r\n        return this._lastX1;\r\n    };\r\n    TouchManager.prototype.getY1 = function () {\r\n        return this._lastY1;\r\n    };\r\n    TouchManager.prototype.getX2 = function () {\r\n        return this._lastX2;\r\n    };\r\n    TouchManager.prototype.getY2 = function () {\r\n        return this._lastY2;\r\n    };\r\n    TouchManager.prototype.isSingleTouch = function () {\r\n        return this._touchSingle;\r\n    };\r\n    TouchManager.prototype.isFlickAvailable = function () {\r\n        return this._flipAvailable;\r\n    };\r\n    TouchManager.prototype.disableFlick = function () {\r\n        this._flipAvailable = false;\r\n    };\r\n    TouchManager.prototype.touchesBegan = function (deviceX, deviceY) {\r\n        this._lastX = deviceX;\r\n        this._lastY = deviceY;\r\n        this._startX = deviceX;\r\n        this._startY = deviceY;\r\n        this._lastTouchDistance = -1.0;\r\n        this._flipAvailable = true;\r\n        this._touchSingle = true;\r\n    };\r\n    TouchManager.prototype.touchesMoved = function (deviceX, deviceY) {\r\n        this._lastX = deviceX;\r\n        this._lastY = deviceY;\r\n        this._lastTouchDistance = -1.0;\r\n        this._touchSingle = true;\r\n    };\r\n    TouchManager.prototype.getFlickDistance = function () {\r\n        return this.calculateDistance(this._startX, this._startY, this._lastX, this._lastY);\r\n    };\r\n    TouchManager.prototype.calculateDistance = function (x1, y1, x2, y2) {\r\n        return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\r\n    };\r\n    TouchManager.prototype.calculateMovingAmount = function (v1, v2) {\r\n        if (v1 > 0.0 != v2 > 0.0) {\r\n            return 0.0;\r\n        }\r\n        var sign = v1 > 0.0 ? 1.0 : -1.0;\r\n        var absoluteValue1 = Math.abs(v1);\r\n        var absoluteValue2 = Math.abs(v2);\r\n        return (sign * (absoluteValue1 < absoluteValue2 ? absoluteValue1 : absoluteValue2));\r\n    };\r\n    return TouchManager;\r\n}());\r\nexports.TouchManager = TouchManager;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdG91Y2htYW5hZ2VyLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGl2ZTJkLy4vc3JjL3RvdWNobWFuYWdlci50cz9hMmVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQoYykgTGl2ZTJEIEluYy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIExpdmUyRCBPcGVuIFNvZnR3YXJlIGxpY2Vuc2VcclxuICogdGhhdCBjYW4gYmUgZm91bmQgYXQgaHR0cHM6Ly93d3cubGl2ZTJkLmNvbS9ldWxhL2xpdmUyZC1vcGVuLXNvZnR3YXJlLWxpY2Vuc2UtYWdyZWVtZW50X2VuLmh0bWwuXHJcbiAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvdWNoTWFuYWdlciB7XHJcbiAgLyoqXHJcbiAgICog44Kz44Oz44K544OI44Op44Kv44K/XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9zdGFydFggPSAwLjA7XHJcbiAgICB0aGlzLl9zdGFydFkgPSAwLjA7XHJcbiAgICB0aGlzLl9sYXN0WCA9IDAuMDtcclxuICAgIHRoaXMuX2xhc3RZID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFgxID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFkxID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFgyID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFkyID0gMC4wO1xyXG4gICAgdGhpcy5fbGFzdFRvdWNoRGlzdGFuY2UgPSAwLjA7XHJcbiAgICB0aGlzLl9kZWx0YVggPSAwLjA7XHJcbiAgICB0aGlzLl9kZWx0YVkgPSAwLjA7XHJcbiAgICB0aGlzLl9zY2FsZSA9IDEuMDtcclxuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gZmFsc2U7XHJcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0Q2VudGVyWCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xhc3RYO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldENlbnRlclkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9sYXN0WTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXREZWx0YVgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9kZWx0YVg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RGVsdGFZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGVsdGFZO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFN0YXJ0WCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0WDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRTdGFydFkoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9zdGFydFk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0U2NhbGUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLl9zY2FsZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRYKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFg7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0WSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xhc3RZO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFgxKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFgxO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFkxKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkxO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFgyKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFgyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFkyKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fbGFzdFkyO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGlzU2luZ2xlVG91Y2goKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fdG91Y2hTaW5nbGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaXNGbGlja0F2YWlsYWJsZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9mbGlwQXZhaWxhYmxlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc2FibGVGbGljaygpOiB2b2lkIHtcclxuICAgIHRoaXMuX2ZsaXBBdmFpbGFibGUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOOCv+ODg+ODgemWi+Wni+aZguOCpOODmeODs+ODiFxyXG4gICAqIEBwYXJhbSBkZXZpY2VYIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcclxuICAgKiBAcGFyYW0gZGV2aWNlWSDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXHJcbiAgICovXHJcbiAgcHVibGljIHRvdWNoZXNCZWdhbihkZXZpY2VYOiBudW1iZXIsIGRldmljZVk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fbGFzdFggPSBkZXZpY2VYO1xyXG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xyXG4gICAgdGhpcy5fc3RhcnRYID0gZGV2aWNlWDtcclxuICAgIHRoaXMuX3N0YXJ0WSA9IGRldmljZVk7XHJcbiAgICB0aGlzLl9sYXN0VG91Y2hEaXN0YW5jZSA9IC0xLjA7XHJcbiAgICB0aGlzLl9mbGlwQXZhaWxhYmxlID0gdHJ1ZTtcclxuICAgIHRoaXMuX3RvdWNoU2luZ2xlID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOODieODqeODg+OCsOaZguOBruOCpOODmeODs+ODiFxyXG4gICAqIEBwYXJhbSBkZXZpY2VYIOOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnjjga7lgKRcclxuICAgKiBAcGFyYW0gZGV2aWNlWSDjgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXHJcbiAgICovXHJcbiAgcHVibGljIHRvdWNoZXNNb3ZlZChkZXZpY2VYOiBudW1iZXIsIGRldmljZVk6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5fbGFzdFggPSBkZXZpY2VYO1xyXG4gICAgdGhpcy5fbGFzdFkgPSBkZXZpY2VZO1xyXG4gICAgdGhpcy5fbGFzdFRvdWNoRGlzdGFuY2UgPSAtMS4wO1xyXG4gICAgdGhpcy5fdG91Y2hTaW5nbGUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog44OV44Oq44OD44Kv44Gu6Led6Zui5ris5a6aXHJcbiAgICogQHJldHVybiDjg5Xjg6rjg4Pjgq/ot53pm6JcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RmxpY2tEaXN0YW5jZSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlRGlzdGFuY2UoXHJcbiAgICAgIHRoaXMuX3N0YXJ0WCxcclxuICAgICAgdGhpcy5fc3RhcnRZLFxyXG4gICAgICB0aGlzLl9sYXN0WCxcclxuICAgICAgdGhpcy5fbGFzdFlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDngrnvvJHjgYvjgonngrnvvJLjgbjjga7ot53pm6LjgpLmsYLjgoHjgotcclxuICAgKlxyXG4gICAqIEBwYXJhbSB4MSDvvJHjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5444Gu5YCkXHJcbiAgICogQHBhcmFtIHkxIO+8keOBpOebruOBruOCv+ODg+ODgeOBl+OBn+eUu+mdouOBrnnjga7lgKRcclxuICAgKiBAcGFyYW0geDIg77yS44Gk55uu44Gu44K/44OD44OB44GX44Gf55S76Z2i44GueOOBruWApFxyXG4gICAqIEBwYXJhbSB5MiDvvJLjgaTnm67jga7jgr/jg4Pjg4HjgZfjgZ/nlLvpnaLjga5544Gu5YCkXHJcbiAgICovXHJcbiAgcHVibGljIGNhbGN1bGF0ZURpc3RhbmNlKFxyXG4gICAgeDE6IG51bWJlcixcclxuICAgIHkxOiBudW1iZXIsXHJcbiAgICB4MjogbnVtYmVyLFxyXG4gICAgeTI6IG51bWJlclxyXG4gICk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KCh4MSAtIHgyKSAqICh4MSAtIHgyKSArICh5MSAtIHkyKSAqICh5MSAtIHkyKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDvvJLjgaTnm67jga7lgKTjgYvjgonjgIHnp7vli5Xph4/jgpLmsYLjgoHjgovjgIJcclxuICAgKiDpgZXjgYbmlrnlkJHjga7loLTlkIjjga/np7vli5Xph4/vvJDjgILlkIzjgZjmlrnlkJHjga7loLTlkIjjga/jgIHntbblr77lgKTjgYzlsI/jgZXjgYTmlrnjga7lgKTjgpLlj4LnhafjgZnjgovjgIJcclxuICAgKlxyXG4gICAqIEBwYXJhbSB2MSDvvJHjgaTnm67jga7np7vli5Xph49cclxuICAgKiBAcGFyYW0gdjIg77yS44Gk55uu44Gu56e75YuV6YePXHJcbiAgICpcclxuICAgKiBAcmV0dXJuIOWwj+OBleOBhOaWueOBruenu+WLlemHj1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjYWxjdWxhdGVNb3ZpbmdBbW91bnQodjE6IG51bWJlciwgdjI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICBpZiAodjEgPiAwLjAgIT0gdjIgPiAwLjApIHtcclxuICAgICAgcmV0dXJuIDAuMDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzaWduOiBudW1iZXIgPSB2MSA+IDAuMCA/IDEuMCA6IC0xLjA7XHJcbiAgICBjb25zdCBhYnNvbHV0ZVZhbHVlMSA9IE1hdGguYWJzKHYxKTtcclxuICAgIGNvbnN0IGFic29sdXRlVmFsdWUyID0gTWF0aC5hYnModjIpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgc2lnbiAqIChhYnNvbHV0ZVZhbHVlMSA8IGFic29sdXRlVmFsdWUyID8gYWJzb2x1dGVWYWx1ZTEgOiBhYnNvbHV0ZVZhbHVlMilcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBfc3RhcnRZOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnjjga7lgKRcclxuICBfc3RhcnRYOiBudW1iZXI7IC8vIOOCv+ODg+ODgeOCkumWi+Wni+OBl+OBn+aZguOBrnnjga7lgKRcclxuICBfbGFzdFg6IG51bWJlcjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GueOOBruWApFxyXG4gIF9sYXN0WTogbnVtYmVyOyAvLyDjgrfjg7PjgrDjg6vjgr/jg4Pjg4HmmYLjga5544Gu5YCkXHJcbiAgX2xhc3RYMTogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuIDjgaTnm67jga5444Gu5YCkXHJcbiAgX2xhc3RZMTogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuIDjgaTnm67jga5544Gu5YCkXHJcbiAgX2xhc3RYMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5444Gu5YCkXHJcbiAgX2xhc3RZMjogbnVtYmVyOyAvLyDjg4Djg5bjg6vjgr/jg4Pjg4HmmYLjga7kuozjgaTnm67jga5544Gu5YCkXHJcbiAgX2xhc3RUb3VjaERpc3RhbmNlOiBudW1iZXI7IC8vIDLmnKzku6XkuIrjgafjgr/jg4Pjg4HjgZfjgZ/jgajjgY3jga7mjIfjga7ot53pm6JcclxuICBfZGVsdGFYOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnjjga7np7vli5Xot53pm6LjgIJcclxuICBfZGVsdGFZOiBudW1iZXI7IC8vIOWJjeWbnuOBruWApOOBi+OCieS7iuWbnuOBruWApOOBuOOBrnnjga7np7vli5Xot53pm6LjgIJcclxuICBfc2NhbGU6IG51bWJlcjsgLy8g44GT44Gu44OV44Os44O844Og44Gn5o6b44GR5ZCI44KP44Gb44KL5ouh5aSn546H44CC5ouh5aSn5pON5L2c5Lit5Lul5aSW44GvMeOAglxyXG4gIF90b3VjaFNpbmdsZTogYm9vbGVhbjsgLy8g44K344Oz44Kw44Or44K/44OD44OB5pmC44GvdHJ1ZVxyXG4gIF9mbGlwQXZhaWxhYmxlOiBib29sZWFuOyAvLyDjg5Xjg6rjg4Pjg5fjgYzmnInlirnjgYvjganjgYbjgYtcclxufVxyXG4iXSwibWFwcGluZ3MiOiI7OztBQU9BO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQTtBQUNBO0FBTUE7QUFVQTtBQU1BO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFnQkE7QUFBQTtBQWxMQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/touchmanager.ts\n");

/***/ }),

/***/ "react":
/*!**************************************************************************************!*\
  !*** external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"} ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_react__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3QuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9saXZlMmQvZXh0ZXJuYWwge1wicm9vdFwiOlwiUmVhY3RcIixcImNvbW1vbmpzMlwiOlwicmVhY3RcIixcImNvbW1vbmpzXCI6XCJyZWFjdFwiLFwiYW1kXCI6XCJyZWFjdFwifT8yNDZlIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9fOyJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///react\n");

/***/ })

/******/ });
});